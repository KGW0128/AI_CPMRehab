
CPMV1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000843c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000528  080085e0  080085e0  000095e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b08  08008b08  0000a1d8  2**0
                  CONTENTS
  4 .ARM          00000008  08008b08  08008b08  00009b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b10  08008b10  0000a1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b10  08008b10  00009b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008b14  08008b14  00009b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08008b18  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  200001d8  08008cf0  0000a1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004b4  08008cf0  0000a4b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012c6c  00000000  00000000  0000a208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d5b  00000000  00000000  0001ce74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f8  00000000  00000000  0001fbd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d4f  00000000  00000000  00020cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a10  00000000  00000000  00021a17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016475  00000000  00000000  0003a427  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092f17  00000000  00000000  0005089c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e37b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005828  00000000  00000000  000e37f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  000e9020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080085c4 	.word	0x080085c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	080085c4 	.word	0x080085c4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <ADS1115_SetI2CHandle>:
  * @brief 사용할 I2C 핸들을 설정
  * @param hi2c I2C 핸들 포인터
  * @retval None
  */
void ADS1115_SetI2CHandle(I2C_HandleTypeDef *hi2c)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  _hi2c = hi2c;
 8000eb0:	4a04      	ldr	r2, [pc, #16]	@ (8000ec4 <ADS1115_SetI2CHandle+0x1c>)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6013      	str	r3, [r2, #0]
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	200001f4 	.word	0x200001f4

08000ec8 <ADS1115_Init>:

/**
  * @brief ADS1115 초기화 함수
  * @retval HAL 상태
  */
HAL_StatusTypeDef ADS1115_Init(void) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af02      	add	r7, sp, #8
  uint8_t buffer[3];
  HAL_StatusTypeDef status;

  // 포인터 레지스터를 Config 레지스터로 설정
  buffer[0] = ADS1115_REG_CONFIG;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	723b      	strb	r3, [r7, #8]
  // - 차동 입력 A0-A1
  // - PGA 게인 = 4 (±1.024V 범위, 필요에 따라 조정)
  // - 단일 샷 모드
  // - 128 SPS 데이터 레이트
  // - 비교기 비활성화
  uint16_t config = ADS1115_OS_SINGLE | ADS1115_MUX_SINGLE_0 |
 8000ed2:	f24c 1383 	movw	r3, #49539	@ 0xc183
 8000ed6:	81fb      	strh	r3, [r7, #14]
                   ADS1115_PGA_4_096V | ADS1115_MODE_CONT |
                   ADS1115_DR_128SPS | ADS1115_COMP_QUE_DIS;

  buffer[1] = (uint8_t)(config >> 8);    // MSB
 8000ed8:	89fb      	ldrh	r3, [r7, #14]
 8000eda:	0a1b      	lsrs	r3, r3, #8
 8000edc:	b29b      	uxth	r3, r3
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	727b      	strb	r3, [r7, #9]
  buffer[2] = (uint8_t)(config & 0xFF);  // LSB
 8000ee2:	89fb      	ldrh	r3, [r7, #14]
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	72bb      	strb	r3, [r7, #10]

  // 설정값을 ADS1115에 쓰기
  status = HAL_I2C_Master_Transmit(_hi2c, ADS1115_I2C_ADDR << 1, buffer, 3, HAL_MAX_DELAY);
 8000ee8:	4b17      	ldr	r3, [pc, #92]	@ (8000f48 <ADS1115_Init+0x80>)
 8000eea:	6818      	ldr	r0, [r3, #0]
 8000eec:	f107 0208 	add.w	r2, r7, #8
 8000ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef4:	9300      	str	r3, [sp, #0]
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	2190      	movs	r1, #144	@ 0x90
 8000efa:	f001 fddb 	bl	8002ab4 <HAL_I2C_Master_Transmit>
 8000efe:	4603      	mov	r3, r0
 8000f00:	737b      	strb	r3, [r7, #13]

  // 설정 확인
  if(status == HAL_OK) {
 8000f02:	7b7b      	ldrb	r3, [r7, #13]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d11a      	bne.n	8000f3e <ADS1115_Init+0x76>
    uint8_t check_reg = ADS1115_REG_CONFIG;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	71fb      	strb	r3, [r7, #7]
    uint8_t check_data[2];

    HAL_I2C_Master_Transmit(_hi2c, ADS1115_I2C_ADDR << 1, &check_reg, 1, 100);
 8000f0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f48 <ADS1115_Init+0x80>)
 8000f0e:	6818      	ldr	r0, [r3, #0]
 8000f10:	1dfa      	adds	r2, r7, #7
 8000f12:	2364      	movs	r3, #100	@ 0x64
 8000f14:	9300      	str	r3, [sp, #0]
 8000f16:	2301      	movs	r3, #1
 8000f18:	2190      	movs	r1, #144	@ 0x90
 8000f1a:	f001 fdcb 	bl	8002ab4 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(_hi2c, ADS1115_I2C_ADDR << 1, check_data, 2, 100);
 8000f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f48 <ADS1115_Init+0x80>)
 8000f20:	6818      	ldr	r0, [r3, #0]
 8000f22:	1d3a      	adds	r2, r7, #4
 8000f24:	2364      	movs	r3, #100	@ 0x64
 8000f26:	9300      	str	r3, [sp, #0]
 8000f28:	2302      	movs	r3, #2
 8000f2a:	2190      	movs	r1, #144	@ 0x90
 8000f2c:	f001 fec0 	bl	8002cb0 <HAL_I2C_Master_Receive>

    printf("Configuration check: 0x%02X%02X\r\n", check_data[0], check_data[1]);
 8000f30:	793b      	ldrb	r3, [r7, #4]
 8000f32:	4619      	mov	r1, r3
 8000f34:	797b      	ldrb	r3, [r7, #5]
 8000f36:	461a      	mov	r2, r3
 8000f38:	4804      	ldr	r0, [pc, #16]	@ (8000f4c <ADS1115_Init+0x84>)
 8000f3a:	f005 fa03 	bl	8006344 <iprintf>
  }

  return status;
 8000f3e:	7b7b      	ldrb	r3, [r7, #13]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	200001f4 	.word	0x200001f4
 8000f4c:	080085e0 	.word	0x080085e0

08000f50 <ADS1115_ReadADC>:

/**
  * @brief ADS1115에서 ADC 값 읽기
  * @retval 16비트 ADC 값
  */
int16_t ADS1115_ReadADC(void) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af02      	add	r7, sp, #8
  uint8_t buffer[3];
  int16_t adc_value = 0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	80fb      	strh	r3, [r7, #6]

  // 포인터 레지스터를 Config 레지스터로 설정
  buffer[0] = ADS1115_REG_CONFIG;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	703b      	strb	r3, [r7, #0]

  // ADS1115 설정 및 변환 시작
  uint16_t config = ADS1115_OS_SINGLE | ADS1115_MUX_SINGLE_0 |
 8000f5e:	f24c 1383 	movw	r3, #49539	@ 0xc183
 8000f62:	80bb      	strh	r3, [r7, #4]
                   ADS1115_PGA_4_096V | ADS1115_MODE_CONT |
                   ADS1115_DR_128SPS | ADS1115_COMP_QUE_DIS;

  buffer[1] = (uint8_t)(config >> 8);    // MSB
 8000f64:	88bb      	ldrh	r3, [r7, #4]
 8000f66:	0a1b      	lsrs	r3, r3, #8
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	707b      	strb	r3, [r7, #1]
  buffer[2] = (uint8_t)(config & 0xFF);  // LSB
 8000f6e:	88bb      	ldrh	r3, [r7, #4]
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	70bb      	strb	r3, [r7, #2]

  // 설정값을 ADS1115에 쓰기
  HAL_I2C_Master_Transmit(_hi2c, ADS1115_I2C_ADDR << 1, buffer, 3, HAL_MAX_DELAY);
 8000f74:	4b17      	ldr	r3, [pc, #92]	@ (8000fd4 <ADS1115_ReadADC+0x84>)
 8000f76:	6818      	ldr	r0, [r3, #0]
 8000f78:	463a      	mov	r2, r7
 8000f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7e:	9300      	str	r3, [sp, #0]
 8000f80:	2303      	movs	r3, #3
 8000f82:	2190      	movs	r1, #144	@ 0x90
 8000f84:	f001 fd96 	bl	8002ab4 <HAL_I2C_Master_Transmit>

  // 변환 완료 대기
  HAL_Delay(10);
 8000f88:	200a      	movs	r0, #10
 8000f8a:	f001 f8e9 	bl	8002160 <HAL_Delay>

  // 포인터 레지스터를 Conversion 레지스터로 설정
  buffer[0] = ADS1115_REG_CONVERSION;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	703b      	strb	r3, [r7, #0]
  HAL_I2C_Master_Transmit(_hi2c, ADS1115_I2C_ADDR << 1, buffer, 1, HAL_MAX_DELAY);
 8000f92:	4b10      	ldr	r3, [pc, #64]	@ (8000fd4 <ADS1115_ReadADC+0x84>)
 8000f94:	6818      	ldr	r0, [r3, #0]
 8000f96:	463a      	mov	r2, r7
 8000f98:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9c:	9300      	str	r3, [sp, #0]
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	2190      	movs	r1, #144	@ 0x90
 8000fa2:	f001 fd87 	bl	8002ab4 <HAL_I2C_Master_Transmit>

  // 변환 결과 읽기
  HAL_I2C_Master_Receive(_hi2c, ADS1115_I2C_ADDR << 1, buffer, 2, HAL_MAX_DELAY);
 8000fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd4 <ADS1115_ReadADC+0x84>)
 8000fa8:	6818      	ldr	r0, [r3, #0]
 8000faa:	463a      	mov	r2, r7
 8000fac:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	2190      	movs	r1, #144	@ 0x90
 8000fb6:	f001 fe7b 	bl	8002cb0 <HAL_I2C_Master_Receive>

  // MSB와 LSB 결합
  adc_value = ((int16_t)buffer[0] << 8) | buffer[1];
 8000fba:	783b      	ldrb	r3, [r7, #0]
 8000fbc:	021b      	lsls	r3, r3, #8
 8000fbe:	b21a      	sxth	r2, r3
 8000fc0:	787b      	ldrb	r3, [r7, #1]
 8000fc2:	b21b      	sxth	r3, r3
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	80fb      	strh	r3, [r7, #6]

  return adc_value;
 8000fc8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	200001f4 	.word	0x200001f4

08000fd8 <ADS1115_ReadAveragedADC>:

/**
  * @brief 여러 샘플을 읽어서 평균값 반환
  * @retval 평균 ADC 값
  */
int16_t ADS1115_ReadAveragedADC(void) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
  int32_t sum = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	607b      	str	r3, [r7, #4]

//  for(int i = 0; i < 50; i++) {
//    sum += ADS1115_ReadADC();
//    HAL_Delay(10);  // 샘플 간 약간의 지연
//  }
  sum = ADS1115_ReadADC();
 8000fe2:	f7ff ffb5 	bl	8000f50 <ADS1115_ReadADC>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	607b      	str	r3, [r7, #4]
  HAL_Delay(10);
 8000fea:	200a      	movs	r0, #10
 8000fec:	f001 f8b8 	bl	8002160 <HAL_Delay>
//
//  return sum / 50;
  return sum;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	b21b      	sxth	r3, r3
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <Encoder_SetTimHandle>:
  * @brief 사용할 타이머 핸들을 설정
  * @param htim 타이머 핸들 포인터
  * @retval None
  */
void Encoder_SetTimHandle(TIM_HandleTypeDef *htim)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  _htim = htim;
 8001004:	4a04      	ldr	r2, [pc, #16]	@ (8001018 <Encoder_SetTimHandle+0x1c>)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6013      	str	r3, [r2, #0]
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	200001f8 	.word	0x200001f8

0800101c <Encoder_Init>:
/**
  * @brief 엔코더 초기화
  * @retval None
  */
void Encoder_Init(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  initial_encoder_count = __HAL_TIM_GET_COUNTER(_htim);
 8001020:	4b05      	ldr	r3, [pc, #20]	@ (8001038 <Encoder_Init+0x1c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001028:	4a04      	ldr	r2, [pc, #16]	@ (800103c <Encoder_Init+0x20>)
 800102a:	6013      	str	r3, [r2, #0]
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	200001f8 	.word	0x200001f8
 800103c:	200001fc 	.word	0x200001fc

08001040 <Encoder_Start>:
/**
  * @brief 엔코더 시작
  * @retval None
  */
void Encoder_Start(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  HAL_TIM_Encoder_Start(_htim, TIM_CHANNEL_ALL);
 8001044:	4b04      	ldr	r3, [pc, #16]	@ (8001058 <Encoder_Start+0x18>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	213c      	movs	r1, #60	@ 0x3c
 800104a:	4618      	mov	r0, r3
 800104c:	f003 f926 	bl	800429c <HAL_TIM_Encoder_Start>
  Encoder_Init();  // 초기 카운트 저장
 8001050:	f7ff ffe4 	bl	800101c <Encoder_Init>
}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}
 8001058:	200001f8 	.word	0x200001f8

0800105c <Encoder_GetAngle>:
/**
  * @brief 엔코더 카운트 값을 360도로 변환하는 함수
  * @retval 계산된 각도 (0-360도)
  */
float Encoder_GetAngle(void)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
  // 현재 엔코더 카운트 값 가져오기
  current_encoder_count = __HAL_TIM_GET_COUNTER(_htim);
 8001062:	4b1a      	ldr	r3, [pc, #104]	@ (80010cc <Encoder_GetAngle+0x70>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800106a:	4a19      	ldr	r2, [pc, #100]	@ (80010d0 <Encoder_GetAngle+0x74>)
 800106c:	6013      	str	r3, [r2, #0]

  // 카운트 차이 계산
  int32_t count_diff = current_encoder_count - initial_encoder_count;
 800106e:	4b18      	ldr	r3, [pc, #96]	@ (80010d0 <Encoder_GetAngle+0x74>)
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	4b18      	ldr	r3, [pc, #96]	@ (80010d4 <Encoder_GetAngle+0x78>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	603b      	str	r3, [r7, #0]

  // 0에서 360도 범위로 변환
  // 카운트 차이를 MAX_ENCODER_COUNT로 나누어 360도를 곱함
  float angle = (float)count_diff / (float)MAX_ENCODER_COUNT * 360.0f;
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	ee07 3a90 	vmov	s15, r3
 8001080:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001084:	eddf 6a14 	vldr	s13, [pc, #80]	@ 80010d8 <Encoder_GetAngle+0x7c>
 8001088:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800108c:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80010dc <Encoder_GetAngle+0x80>
 8001090:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001094:	edc7 7a01 	vstr	s15, [r7, #4]

  // 부호에 따라 범위 조정
  if (angle < 0)
 8001098:	edd7 7a01 	vldr	s15, [r7, #4]
 800109c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010a4:	d507      	bpl.n	80010b6 <Encoder_GetAngle+0x5a>
  {
    angle += 360.0f;  // 360도 내로 값을 맞추기 위해 양수로 처리
 80010a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80010aa:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80010dc <Encoder_GetAngle+0x80>
 80010ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010b2:	edc7 7a01 	vstr	s15, [r7, #4]
  }

  return angle;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	ee07 3a90 	vmov	s15, r3
}
 80010bc:	eeb0 0a67 	vmov.f32	s0, s15
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	200001f8 	.word	0x200001f8
 80010d0:	20000200 	.word	0x20000200
 80010d4:	200001fc 	.word	0x200001fc
 80010d8:	469c3e00 	.word	0x469c3e00
 80010dc:	43b40000 	.word	0x43b40000

080010e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08a      	sub	sp, #40	@ 0x28
 80010e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e6:	f107 0314 	add.w	r3, r7, #20
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]
 80010f2:	60da      	str	r2, [r3, #12]
 80010f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	613b      	str	r3, [r7, #16]
 80010fa:	4b2d      	ldr	r3, [pc, #180]	@ (80011b0 <MX_GPIO_Init+0xd0>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fe:	4a2c      	ldr	r2, [pc, #176]	@ (80011b0 <MX_GPIO_Init+0xd0>)
 8001100:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001104:	6313      	str	r3, [r2, #48]	@ 0x30
 8001106:	4b2a      	ldr	r3, [pc, #168]	@ (80011b0 <MX_GPIO_Init+0xd0>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800110e:	613b      	str	r3, [r7, #16]
 8001110:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	4b26      	ldr	r3, [pc, #152]	@ (80011b0 <MX_GPIO_Init+0xd0>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111a:	4a25      	ldr	r2, [pc, #148]	@ (80011b0 <MX_GPIO_Init+0xd0>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	6313      	str	r3, [r2, #48]	@ 0x30
 8001122:	4b23      	ldr	r3, [pc, #140]	@ (80011b0 <MX_GPIO_Init+0xd0>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	60bb      	str	r3, [r7, #8]
 8001132:	4b1f      	ldr	r3, [pc, #124]	@ (80011b0 <MX_GPIO_Init+0xd0>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001136:	4a1e      	ldr	r2, [pc, #120]	@ (80011b0 <MX_GPIO_Init+0xd0>)
 8001138:	f043 0304 	orr.w	r3, r3, #4
 800113c:	6313      	str	r3, [r2, #48]	@ 0x30
 800113e:	4b1c      	ldr	r3, [pc, #112]	@ (80011b0 <MX_GPIO_Init+0xd0>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001142:	f003 0304 	and.w	r3, r3, #4
 8001146:	60bb      	str	r3, [r7, #8]
 8001148:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	607b      	str	r3, [r7, #4]
 800114e:	4b18      	ldr	r3, [pc, #96]	@ (80011b0 <MX_GPIO_Init+0xd0>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001152:	4a17      	ldr	r2, [pc, #92]	@ (80011b0 <MX_GPIO_Init+0xd0>)
 8001154:	f043 0302 	orr.w	r3, r3, #2
 8001158:	6313      	str	r3, [r2, #48]	@ 0x30
 800115a:	4b15      	ldr	r3, [pc, #84]	@ (80011b0 <MX_GPIO_Init+0xd0>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	607b      	str	r3, [r7, #4]
 8001164:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001166:	2200      	movs	r2, #0
 8001168:	2120      	movs	r1, #32
 800116a:	4812      	ldr	r0, [pc, #72]	@ (80011b4 <MX_GPIO_Init+0xd4>)
 800116c:	f001 fb44 	bl	80027f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001170:	2320      	movs	r3, #32
 8001172:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001174:	2301      	movs	r3, #1
 8001176:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117c:	2300      	movs	r3, #0
 800117e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001180:	f107 0314 	add.w	r3, r7, #20
 8001184:	4619      	mov	r1, r3
 8001186:	480b      	ldr	r0, [pc, #44]	@ (80011b4 <MX_GPIO_Init+0xd4>)
 8001188:	f001 f9b2 	bl	80024f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : start_limit_Pin end_limit_Pin */
  GPIO_InitStruct.Pin = start_limit_Pin|end_limit_Pin;
 800118c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001190:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001192:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001196:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	4619      	mov	r1, r3
 80011a2:	4805      	ldr	r0, [pc, #20]	@ (80011b8 <MX_GPIO_Init+0xd8>)
 80011a4:	f001 f9a4 	bl	80024f0 <HAL_GPIO_Init>

}
 80011a8:	bf00      	nop
 80011aa:	3728      	adds	r7, #40	@ 0x28
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40023800 	.word	0x40023800
 80011b4:	40020000 	.word	0x40020000
 80011b8:	40020800 	.word	0x40020800

080011bc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011c0:	4b12      	ldr	r3, [pc, #72]	@ (800120c <MX_I2C1_Init+0x50>)
 80011c2:	4a13      	ldr	r2, [pc, #76]	@ (8001210 <MX_I2C1_Init+0x54>)
 80011c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80011c6:	4b11      	ldr	r3, [pc, #68]	@ (800120c <MX_I2C1_Init+0x50>)
 80011c8:	4a12      	ldr	r2, [pc, #72]	@ (8001214 <MX_I2C1_Init+0x58>)
 80011ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011cc:	4b0f      	ldr	r3, [pc, #60]	@ (800120c <MX_I2C1_Init+0x50>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011d2:	4b0e      	ldr	r3, [pc, #56]	@ (800120c <MX_I2C1_Init+0x50>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011d8:	4b0c      	ldr	r3, [pc, #48]	@ (800120c <MX_I2C1_Init+0x50>)
 80011da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011e0:	4b0a      	ldr	r3, [pc, #40]	@ (800120c <MX_I2C1_Init+0x50>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011e6:	4b09      	ldr	r3, [pc, #36]	@ (800120c <MX_I2C1_Init+0x50>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011ec:	4b07      	ldr	r3, [pc, #28]	@ (800120c <MX_I2C1_Init+0x50>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011f2:	4b06      	ldr	r3, [pc, #24]	@ (800120c <MX_I2C1_Init+0x50>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011f8:	4804      	ldr	r0, [pc, #16]	@ (800120c <MX_I2C1_Init+0x50>)
 80011fa:	f001 fb17 	bl	800282c <HAL_I2C_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001204:	f000 fc02 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20000204 	.word	0x20000204
 8001210:	40005400 	.word	0x40005400
 8001214:	00061a80 	.word	0x00061a80

08001218 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08a      	sub	sp, #40	@ 0x28
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a19      	ldr	r2, [pc, #100]	@ (800129c <HAL_I2C_MspInit+0x84>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d12c      	bne.n	8001294 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	613b      	str	r3, [r7, #16]
 800123e:	4b18      	ldr	r3, [pc, #96]	@ (80012a0 <HAL_I2C_MspInit+0x88>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001242:	4a17      	ldr	r2, [pc, #92]	@ (80012a0 <HAL_I2C_MspInit+0x88>)
 8001244:	f043 0302 	orr.w	r3, r3, #2
 8001248:	6313      	str	r3, [r2, #48]	@ 0x30
 800124a:	4b15      	ldr	r3, [pc, #84]	@ (80012a0 <HAL_I2C_MspInit+0x88>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	613b      	str	r3, [r7, #16]
 8001254:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001256:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800125a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800125c:	2312      	movs	r3, #18
 800125e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001264:	2303      	movs	r3, #3
 8001266:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001268:	2304      	movs	r3, #4
 800126a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800126c:	f107 0314 	add.w	r3, r7, #20
 8001270:	4619      	mov	r1, r3
 8001272:	480c      	ldr	r0, [pc, #48]	@ (80012a4 <HAL_I2C_MspInit+0x8c>)
 8001274:	f001 f93c 	bl	80024f0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001278:	2300      	movs	r3, #0
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	4b08      	ldr	r3, [pc, #32]	@ (80012a0 <HAL_I2C_MspInit+0x88>)
 800127e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001280:	4a07      	ldr	r2, [pc, #28]	@ (80012a0 <HAL_I2C_MspInit+0x88>)
 8001282:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001286:	6413      	str	r3, [r2, #64]	@ 0x40
 8001288:	4b05      	ldr	r3, [pc, #20]	@ (80012a0 <HAL_I2C_MspInit+0x88>)
 800128a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001294:	bf00      	nop
 8001296:	3728      	adds	r7, #40	@ 0x28
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40005400 	.word	0x40005400
 80012a0:	40023800 	.word	0x40023800
 80012a4:	40020400 	.word	0x40020400

080012a8 <__io_putchar>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int ch)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80012b0:	1d39      	adds	r1, r7, #4
 80012b2:	f04f 33ff 	mov.w	r3, #4294967295
 80012b6:	2201      	movs	r2, #1
 80012b8:	4803      	ldr	r0, [pc, #12]	@ (80012c8 <__io_putchar+0x20>)
 80012ba:	f003 fb23 	bl	8004904 <HAL_UART_Transmit>
  return ch;
 80012be:	687b      	ldr	r3, [r7, #4]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	2000031c 	.word	0x2000031c
 80012cc:	00000000 	.word	0x00000000

080012d0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08a      	sub	sp, #40	@ 0x28
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012d6:	f000 fed1 	bl	800207c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012da:	f000 fa11 	bl	8001700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012de:	f7ff feff 	bl	80010e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80012e2:	f000 fdeb 	bl	8001ebc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80012e6:	f7ff ff69 	bl	80011bc <MX_I2C1_Init>
  MX_TIM3_Init();
 80012ea:	f000 fd19 	bl	8001d20 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80012ee:	f000 fdbb 	bl	8001e68 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &rxData, 1);
 80012f2:	2201      	movs	r2, #1
 80012f4:	49ac      	ldr	r1, [pc, #688]	@ (80015a8 <main+0x2d8>)
 80012f6:	48ad      	ldr	r0, [pc, #692]	@ (80015ac <main+0x2dc>)
 80012f8:	f003 fb8f 	bl	8004a1a <HAL_UART_Receive_IT>
  Encoder_SetTimHandle(&htim3);
 80012fc:	48ac      	ldr	r0, [pc, #688]	@ (80015b0 <main+0x2e0>)
 80012fe:	f7ff fe7d 	bl	8000ffc <Encoder_SetTimHandle>
  Encoder_Start();
 8001302:	f7ff fe9d 	bl	8001040 <Encoder_Start>


    ADS1115_SetI2CHandle(&hi2c1);
 8001306:	48ab      	ldr	r0, [pc, #684]	@ (80015b4 <main+0x2e4>)
 8001308:	f7ff fdce 	bl	8000ea8 <ADS1115_SetI2CHandle>
    ADS1115_Init();
 800130c:	f7ff fddc 	bl	8000ec8 <ADS1115_Init>
//    Calibrate_Zero();
//    Calibrate_Scale(1000);
  // 초기값 설정: 이 값들은 HMI에서 전송되기 전에 사용될 기본값입니다
  cpm_params.speed = 1;       // 속도 초기값 (1~10)
 8001310:	4ba9      	ldr	r3, [pc, #676]	@ (80015b8 <main+0x2e8>)
 8001312:	2201      	movs	r2, #1
 8001314:	801a      	strh	r2, [r3, #0]
  cpm_params.angle = 10;      // 각도 초기값 (10~120)
 8001316:	4ba8      	ldr	r3, [pc, #672]	@ (80015b8 <main+0x2e8>)
 8001318:	220a      	movs	r2, #10
 800131a:	805a      	strh	r2, [r3, #2]
  cpm_params.repeat = 10;     // 반복 횟수 초기값 (1~100)
 800131c:	4ba6      	ldr	r3, [pc, #664]	@ (80015b8 <main+0x2e8>)
 800131e:	220a      	movs	r2, #10
 8001320:	711a      	strb	r2, [r3, #4]
  cpm_params.delay = 1;
 8001322:	4ba5      	ldr	r3, [pc, #660]	@ (80015b8 <main+0x2e8>)
 8001324:	2201      	movs	r2, #1
 8001326:	80da      	strh	r2, [r3, #6]


 cpm_params.state = CPM_STATE_IDLE;  // 초기 상태
 8001328:	4ba3      	ldr	r3, [pc, #652]	@ (80015b8 <main+0x2e8>)
 800132a:	2200      	movs	r2, #0
 800132c:	721a      	strb	r2, [r3, #8]
  RS485_MotorInit(&huart1);
 800132e:	48a3      	ldr	r0, [pc, #652]	@ (80015bc <main+0x2ec>)
 8001330:	f000 fb72 	bl	8001a18 <RS485_MotorInit>
    // printf("Angle: %d\n", (int)angle);
    // Load cell 데이터 읽기
//    int16_t raw_data = ADS1115_ReadAveragedADC();
//    int16_t tared_value = raw_data - ADS1115_GetOffset();
//    int16_t weight = ADS1115_GetScaleFactor() * tared_value;
    int16_t raw_data = ADS1115_ReadAveragedADC();
 8001334:	f7ff fe50 	bl	8000fd8 <ADS1115_ReadAveragedADC>
 8001338:	4603      	mov	r3, r0
 800133a:	847b      	strh	r3, [r7, #34]	@ 0x22
    int16_t tared_value = raw_data + 250;
 800133c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800133e:	33fa      	adds	r3, #250	@ 0xfa
 8001340:	b29b      	uxth	r3, r3
 8001342:	843b      	strh	r3, [r7, #32]
    int16_t weight = 1.582278 * tared_value;
 8001344:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff f8f3 	bl	8000534 <__aeabi_i2d>
 800134e:	a394      	add	r3, pc, #592	@ (adr r3, 80015a0 <main+0x2d0>)
 8001350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001354:	f7ff f958 	bl	8000608 <__aeabi_dmul>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	4610      	mov	r0, r2
 800135e:	4619      	mov	r1, r3
 8001360:	f7ff fc02 	bl	8000b68 <__aeabi_d2iz>
 8001364:	4603      	mov	r3, r0
 8001366:	83fb      	strh	r3, [r7, #30]


    // 출력
    printf("Raw: %d, Tared: %d, Weight: %d\n", raw_data, tared_value, weight );
 8001368:	f9b7 1022 	ldrsh.w	r1, [r7, #34]	@ 0x22
 800136c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001370:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001374:	4892      	ldr	r0, [pc, #584]	@ (80015c0 <main+0x2f0>)
 8001376:	f004 ffe5 	bl	8006344 <iprintf>

    switch (cpm_mode)
 800137a:	4b92      	ldr	r3, [pc, #584]	@ (80015c4 <main+0x2f4>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b02      	cmp	r3, #2
 8001380:	f000 81a8 	beq.w	80016d4 <main+0x404>
 8001384:	2b02      	cmp	r3, #2
 8001386:	dcd5      	bgt.n	8001334 <main+0x64>
 8001388:	2b00      	cmp	r3, #0
 800138a:	f000 81a5 	beq.w	80016d8 <main+0x408>
 800138e:	2b01      	cmp	r3, #1
 8001390:	f040 81a5 	bne.w	80016de <main+0x40e>
      case CPM_IDLE:
        // IDLE 상태에서는 아무 동작도 하지 않음
        break;

      case CPM_ACTIVE:
        if (cpm_params.state == CPM_STATE_RUNNING)
 8001394:	4b88      	ldr	r3, [pc, #544]	@ (80015b8 <main+0x2e8>)
 8001396:	7a1b      	ldrb	r3, [r3, #8]
 8001398:	2b01      	cmp	r3, #1
 800139a:	f040 80f9 	bne.w	8001590 <main+0x2c0>
        {
          char command[10];
          float current_angle = Encoder_GetAngle();
 800139e:	f7ff fe5d 	bl	800105c <Encoder_GetAngle>
 80013a2:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
          float delay = cpm_params.delay * 1000;
 80013a6:	4b84      	ldr	r3, [pc, #528]	@ (80015b8 <main+0x2e8>)
 80013a8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80013ac:	461a      	mov	r2, r3
 80013ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013b2:	fb02 f303 	mul.w	r3, r2, r3
 80013b6:	ee07 3a90 	vmov	s15, r3
 80013ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013be:	edc7 7a04 	vstr	s15, [r7, #16]

          // 엔코더 각도 범위 처리 (0~360도)
          if (current_angle > 270 && current_angle <= 360 )
 80013c2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80013c6:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 80015c8 <main+0x2f8>
 80013ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d2:	dd0c      	ble.n	80013ee <main+0x11e>
 80013d4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80013d8:	ed9f 7a7c 	vldr	s14, [pc, #496]	@ 80015cc <main+0x2fc>
 80013dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e4:	d803      	bhi.n	80013ee <main+0x11e>
            {current_angle = 0.0f;}
 80013e6:	f04f 0300 	mov.w	r3, #0
 80013ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80013ec:	e01a      	b.n	8001424 <main+0x154>
          else if (current_angle > 150.0f && current_angle < 270)
 80013ee:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80013f2:	ed9f 7a77 	vldr	s14, [pc, #476]	@ 80015d0 <main+0x300>
 80013f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013fe:	dd11      	ble.n	8001424 <main+0x154>
 8001400:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001404:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 80015c8 <main+0x2f8>
 8001408:	eef4 7ac7 	vcmpe.f32	s15, s14
 800140c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001410:	d508      	bpl.n	8001424 <main+0x154>
            {current_angle = cpm_params.angle;}
 8001412:	4b69      	ldr	r3, [pc, #420]	@ (80015b8 <main+0x2e8>)
 8001414:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001418:	ee07 3a90 	vmov	s15, r3
 800141c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001420:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

          // HMI로부터 파라미터가 업데이트된 경우 새 동작을 시작
          if (params_updated) {
 8001424:	4b6b      	ldr	r3, [pc, #428]	@ (80015d4 <main+0x304>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d00b      	beq.n	8001444 <main+0x174>
            // 모터 정지 후 새 파라미터로 재시작
            RS485_SendCommand("ST");    // 모터 정지
 800142c:	486a      	ldr	r0, [pc, #424]	@ (80015d8 <main+0x308>)
 800142e:	f000 fb03 	bl	8001a38 <RS485_SendCommand>
            HAL_Delay(200);
 8001432:	20c8      	movs	r0, #200	@ 0xc8
 8001434:	f000 fe94 	bl	8002160 <HAL_Delay>

            // 초기화 플래그 리셋하여 새 파라미터로 초기화
            cpm_initialized = false;
 8001438:	4b68      	ldr	r3, [pc, #416]	@ (80015dc <main+0x30c>)
 800143a:	2200      	movs	r2, #0
 800143c:	701a      	strb	r2, [r3, #0]
            params_updated = false;  // 업데이트 플래그 초기화
 800143e:	4b65      	ldr	r3, [pc, #404]	@ (80015d4 <main+0x304>)
 8001440:	2200      	movs	r2, #0
 8001442:	701a      	strb	r2, [r3, #0]
          }

          // 초기 설정이 안 된 경우 초기화
          if (!cpm_initialized) {
 8001444:	4b65      	ldr	r3, [pc, #404]	@ (80015dc <main+0x30c>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	f083 0301 	eor.w	r3, r3, #1
 800144c:	b2db      	uxtb	r3, r3
 800144e:	2b00      	cmp	r3, #0
 8001450:	d02a      	beq.n	80014a8 <main+0x1d8>
            // 모터 초기화
            RS485_SendCommand("ME");    // 모터 활성화
 8001452:	4863      	ldr	r0, [pc, #396]	@ (80015e0 <main+0x310>)
 8001454:	f000 faf0 	bl	8001a38 <RS485_SendCommand>
            HAL_Delay(500);             // 모터 활성화 대기
 8001458:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800145c:	f000 fe80 	bl	8002160 <HAL_Delay>

            // 기본 파라미터 설정
            RS485_SendCommand("JA10");  // 가속도
 8001460:	4860      	ldr	r0, [pc, #384]	@ (80015e4 <main+0x314>)
 8001462:	f000 fae9 	bl	8001a38 <RS485_SendCommand>
            RS485_SendCommand("JL10");  // 감속도
 8001466:	4860      	ldr	r0, [pc, #384]	@ (80015e8 <main+0x318>)
 8001468:	f000 fae6 	bl	8001a38 <RS485_SendCommand>
            RS485_SendCommand("JS1");   // 저크
 800146c:	485f      	ldr	r0, [pc, #380]	@ (80015ec <main+0x31c>)
 800146e:	f000 fae3 	bl	8001a38 <RS485_SendCommand>
            RS485_SendCommand("CJ");    // 조그 모드 설정 적용
 8001472:	485f      	ldr	r0, [pc, #380]	@ (80015f0 <main+0x320>)
 8001474:	f000 fae0 	bl	8001a38 <RS485_SendCommand>

            // 반복 카운터 초기화
            repeat_count = cpm_params.repeat;
 8001478:	4b4f      	ldr	r3, [pc, #316]	@ (80015b8 <main+0x2e8>)
 800147a:	791b      	ldrb	r3, [r3, #4]
 800147c:	461a      	mov	r2, r3
 800147e:	4b5d      	ldr	r3, [pc, #372]	@ (80015f4 <main+0x324>)
 8001480:	601a      	str	r2, [r3, #0]
            cpm_initialized = true;
 8001482:	4b56      	ldr	r3, [pc, #344]	@ (80015dc <main+0x30c>)
 8001484:	2201      	movs	r2, #1
 8001486:	701a      	strb	r2, [r3, #0]

            // 초기 방향 설정 (전진)
            sprintf(command, "CS%d", cpm_params.speed);
 8001488:	4b4b      	ldr	r3, [pc, #300]	@ (80015b8 <main+0x2e8>)
 800148a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800148e:	461a      	mov	r2, r3
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	4959      	ldr	r1, [pc, #356]	@ (80015f8 <main+0x328>)
 8001494:	4618      	mov	r0, r3
 8001496:	f004 ff67 	bl	8006368 <siprintf>
            RS485_SendCommand(command);
 800149a:	1d3b      	adds	r3, r7, #4
 800149c:	4618      	mov	r0, r3
 800149e:	f000 facb 	bl	8001a38 <RS485_SendCommand>
            moving_forward = true;
 80014a2:	4b56      	ldr	r3, [pc, #344]	@ (80015fc <main+0x32c>)
 80014a4:	2201      	movs	r2, #1
 80014a6:	701a      	strb	r2, [r3, #0]
          }

          // 방향 및 제한 확인
          if (moving_forward && (current_angle >= cpm_params.angle)) {
 80014a8:	4b54      	ldr	r3, [pc, #336]	@ (80015fc <main+0x32c>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d02c      	beq.n	800150a <main+0x23a>
 80014b0:	4b41      	ldr	r3, [pc, #260]	@ (80015b8 <main+0x2e8>)
 80014b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80014b6:	ee07 3a90 	vmov	s15, r3
 80014ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014be:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80014c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ca:	db1e      	blt.n	800150a <main+0x23a>
            // 전진 한계 도달, 방향 전환

            RS485_SendCommand("ST");
 80014cc:	4842      	ldr	r0, [pc, #264]	@ (80015d8 <main+0x308>)
 80014ce:	f000 fab3 	bl	8001a38 <RS485_SendCommand>
            HAL_Delay(delay);
 80014d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80014d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014da:	ee17 0a90 	vmov	r0, s15
 80014de:	f000 fe3f 	bl	8002160 <HAL_Delay>
            RS485_SendCommand("CJ");    // 조그 모드 설정 적용
 80014e2:	4843      	ldr	r0, [pc, #268]	@ (80015f0 <main+0x320>)
 80014e4:	f000 faa8 	bl	8001a38 <RS485_SendCommand>
            sprintf(command, "CS-%d", cpm_params.speed);
 80014e8:	4b33      	ldr	r3, [pc, #204]	@ (80015b8 <main+0x2e8>)
 80014ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ee:	461a      	mov	r2, r3
 80014f0:	1d3b      	adds	r3, r7, #4
 80014f2:	4943      	ldr	r1, [pc, #268]	@ (8001600 <main+0x330>)
 80014f4:	4618      	mov	r0, r3
 80014f6:	f004 ff37 	bl	8006368 <siprintf>
            RS485_SendCommand(command);
 80014fa:	1d3b      	adds	r3, r7, #4
 80014fc:	4618      	mov	r0, r3
 80014fe:	f000 fa9b 	bl	8001a38 <RS485_SendCommand>
            moving_forward = false;
 8001502:	4b3e      	ldr	r3, [pc, #248]	@ (80015fc <main+0x32c>)
 8001504:	2200      	movs	r2, #0
 8001506:	701a      	strb	r2, [r3, #0]
 8001508:	e03e      	b.n	8001588 <main+0x2b8>
          }
          else if (!moving_forward && current_angle <= 0.0f ) {
 800150a:	4b3c      	ldr	r3, [pc, #240]	@ (80015fc <main+0x32c>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	f083 0301 	eor.w	r3, r3, #1
 8001512:	b2db      	uxtb	r3, r3
 8001514:	2b00      	cmp	r3, #0
 8001516:	d037      	beq.n	8001588 <main+0x2b8>
 8001518:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800151c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001524:	d830      	bhi.n	8001588 <main+0x2b8>
            // 시작 위치에 도달, 한 사이클 완료
            repeat_count--;
 8001526:	4b33      	ldr	r3, [pc, #204]	@ (80015f4 <main+0x324>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	3b01      	subs	r3, #1
 800152c:	4a31      	ldr	r2, [pc, #196]	@ (80015f4 <main+0x324>)
 800152e:	6013      	str	r3, [r2, #0]

            if (repeat_count <= 0) {
 8001530:	4b30      	ldr	r3, [pc, #192]	@ (80015f4 <main+0x324>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	dc09      	bgt.n	800154c <main+0x27c>
              // 모든 반복 완료
              RS485_SendCommand("ST");  // 정지
 8001538:	4827      	ldr	r0, [pc, #156]	@ (80015d8 <main+0x308>)
 800153a:	f000 fa7d 	bl	8001a38 <RS485_SendCommand>
              cpm_params.state = CPM_STATE_IDLE;
 800153e:	4b1e      	ldr	r3, [pc, #120]	@ (80015b8 <main+0x2e8>)
 8001540:	2200      	movs	r2, #0
 8001542:	721a      	strb	r2, [r3, #8]
              cpm_initialized = false;
 8001544:	4b25      	ldr	r3, [pc, #148]	@ (80015dc <main+0x30c>)
 8001546:	2200      	movs	r2, #0
 8001548:	701a      	strb	r2, [r3, #0]
 800154a:	e01d      	b.n	8001588 <main+0x2b8>
            } else {
              // 다음 사이클 시작
              RS485_SendCommand("ST");
 800154c:	4822      	ldr	r0, [pc, #136]	@ (80015d8 <main+0x308>)
 800154e:	f000 fa73 	bl	8001a38 <RS485_SendCommand>
              HAL_Delay(delay);
 8001552:	edd7 7a04 	vldr	s15, [r7, #16]
 8001556:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800155a:	ee17 0a90 	vmov	r0, s15
 800155e:	f000 fdff 	bl	8002160 <HAL_Delay>
              RS485_SendCommand("CJ");    // 조그 모드 설정 적용
 8001562:	4823      	ldr	r0, [pc, #140]	@ (80015f0 <main+0x320>)
 8001564:	f000 fa68 	bl	8001a38 <RS485_SendCommand>
              sprintf(command, "CS%d", cpm_params.speed);
 8001568:	4b13      	ldr	r3, [pc, #76]	@ (80015b8 <main+0x2e8>)
 800156a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800156e:	461a      	mov	r2, r3
 8001570:	1d3b      	adds	r3, r7, #4
 8001572:	4921      	ldr	r1, [pc, #132]	@ (80015f8 <main+0x328>)
 8001574:	4618      	mov	r0, r3
 8001576:	f004 fef7 	bl	8006368 <siprintf>
              RS485_SendCommand(command);
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	4618      	mov	r0, r3
 800157e:	f000 fa5b 	bl	8001a38 <RS485_SendCommand>
              moving_forward = true;
 8001582:	4b1e      	ldr	r3, [pc, #120]	@ (80015fc <main+0x32c>)
 8001584:	2201      	movs	r2, #1
 8001586:	701a      	strb	r2, [r3, #0]
            }
          }

          // 루프 간 딜레이
          HAL_Delay(20);
 8001588:	2014      	movs	r0, #20
 800158a:	f000 fde9 	bl	8002160 <HAL_Delay>
        }
        else if(cpm_params.state == CPM_STATE_IDLE)
        {
          RS485_SendCommand("ST");
        }
        break;
 800158e:	e0a5      	b.n	80016dc <main+0x40c>
        else if(cpm_params.state == CPM_STATE_PAUSED)
 8001590:	4b09      	ldr	r3, [pc, #36]	@ (80015b8 <main+0x2e8>)
 8001592:	7a1b      	ldrb	r3, [r3, #8]
 8001594:	2b02      	cmp	r3, #2
 8001596:	d135      	bne.n	8001604 <main+0x334>
          RS485_SendCommand("ST");
 8001598:	480f      	ldr	r0, [pc, #60]	@ (80015d8 <main+0x308>)
 800159a:	f000 fa4d 	bl	8001a38 <RS485_SendCommand>
        break;
 800159e:	e09d      	b.n	80016dc <main+0x40c>
 80015a0:	bc72e276 	.word	0xbc72e276
 80015a4:	3ff95102 	.word	0x3ff95102
 80015a8:	20000262 	.word	0x20000262
 80015ac:	2000031c 	.word	0x2000031c
 80015b0:	2000028c 	.word	0x2000028c
 80015b4:	20000204 	.word	0x20000204
 80015b8:	20000258 	.word	0x20000258
 80015bc:	200002d4 	.word	0x200002d4
 80015c0:	08008710 	.word	0x08008710
 80015c4:	20000000 	.word	0x20000000
 80015c8:	43870000 	.word	0x43870000
 80015cc:	43b40000 	.word	0x43b40000
 80015d0:	43160000 	.word	0x43160000
 80015d4:	20000281 	.word	0x20000281
 80015d8:	08008730 	.word	0x08008730
 80015dc:	20000280 	.word	0x20000280
 80015e0:	08008734 	.word	0x08008734
 80015e4:	08008738 	.word	0x08008738
 80015e8:	08008740 	.word	0x08008740
 80015ec:	08008748 	.word	0x08008748
 80015f0:	0800874c 	.word	0x0800874c
 80015f4:	2000027c 	.word	0x2000027c
 80015f8:	08008750 	.word	0x08008750
 80015fc:	20000001 	.word	0x20000001
 8001600:	08008758 	.word	0x08008758
        else if(cpm_params.state == CPM_STATE_STOP)
 8001604:	4b36      	ldr	r3, [pc, #216]	@ (80016e0 <main+0x410>)
 8001606:	7a1b      	ldrb	r3, [r3, #8]
 8001608:	2b03      	cmp	r3, #3
 800160a:	d150      	bne.n	80016ae <main+0x3de>
          if(!stop)
 800160c:	4b35      	ldr	r3, [pc, #212]	@ (80016e4 <main+0x414>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	f083 0301 	eor.w	r3, r3, #1
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b00      	cmp	r3, #0
 8001618:	d02f      	beq.n	800167a <main+0x3aa>
            RS485_SendCommand("ST");
 800161a:	4833      	ldr	r0, [pc, #204]	@ (80016e8 <main+0x418>)
 800161c:	f000 fa0c 	bl	8001a38 <RS485_SendCommand>
            HAL_Delay(1000);
 8001620:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001624:	f000 fd9c 	bl	8002160 <HAL_Delay>
            float current_angle = Encoder_GetAngle();
 8001628:	f7ff fd18 	bl	800105c <Encoder_GetAngle>
 800162c:	ed87 0a05 	vstr	s0, [r7, #20]
            if (current_angle <= 0) {
 8001630:	edd7 7a05 	vldr	s15, [r7, #20]
 8001634:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800163c:	d806      	bhi.n	800164c <main+0x37c>
              moving_forward = true; // 기본값 설정
 800163e:	4b2b      	ldr	r3, [pc, #172]	@ (80016ec <main+0x41c>)
 8001640:	2201      	movs	r2, #1
 8001642:	701a      	strb	r2, [r3, #0]
              cpm_params.state = CPM_STATE_IDLE;
 8001644:	4b26      	ldr	r3, [pc, #152]	@ (80016e0 <main+0x410>)
 8001646:	2200      	movs	r2, #0
 8001648:	721a      	strb	r2, [r3, #8]
 800164a:	e012      	b.n	8001672 <main+0x3a2>
              RS485_SendCommand("JS1");
 800164c:	4828      	ldr	r0, [pc, #160]	@ (80016f0 <main+0x420>)
 800164e:	f000 f9f3 	bl	8001a38 <RS485_SendCommand>
              RS485_SendCommand("CJ");    // 조그 모드 설정 적용
 8001652:	4828      	ldr	r0, [pc, #160]	@ (80016f4 <main+0x424>)
 8001654:	f000 f9f0 	bl	8001a38 <RS485_SendCommand>
              if (current_angle > 0) {
 8001658:	edd7 7a05 	vldr	s15, [r7, #20]
 800165c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001664:	dd05      	ble.n	8001672 <main+0x3a2>
                RS485_SendCommand("CS-2");  // 0도 방향으로 천천히 이동
 8001666:	4824      	ldr	r0, [pc, #144]	@ (80016f8 <main+0x428>)
 8001668:	f000 f9e6 	bl	8001a38 <RS485_SendCommand>
                moving_forward = false;     // 후진 상태로 설정
 800166c:	4b1f      	ldr	r3, [pc, #124]	@ (80016ec <main+0x41c>)
 800166e:	2200      	movs	r2, #0
 8001670:	701a      	strb	r2, [r3, #0]
            stop = true;  // 초기화 완료 표시
 8001672:	4b1c      	ldr	r3, [pc, #112]	@ (80016e4 <main+0x414>)
 8001674:	2201      	movs	r2, #1
 8001676:	701a      	strb	r2, [r3, #0]
        break;
 8001678:	e030      	b.n	80016dc <main+0x40c>
          else if (stop) {
 800167a:	4b1a      	ldr	r3, [pc, #104]	@ (80016e4 <main+0x414>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d02c      	beq.n	80016dc <main+0x40c>
            float current_angle = Encoder_GetAngle();
 8001682:	f7ff fceb 	bl	800105c <Encoder_GetAngle>
 8001686:	ed87 0a06 	vstr	s0, [r7, #24]
            if (current_angle <= 0) {
 800168a:	edd7 7a06 	vldr	s15, [r7, #24]
 800168e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001696:	d900      	bls.n	800169a <main+0x3ca>
        break;
 8001698:	e020      	b.n	80016dc <main+0x40c>
              RS485_SendCommand("ST");
 800169a:	4813      	ldr	r0, [pc, #76]	@ (80016e8 <main+0x418>)
 800169c:	f000 f9cc 	bl	8001a38 <RS485_SendCommand>
              moving_forward = true;  // 기본 상태로 복원
 80016a0:	4b12      	ldr	r3, [pc, #72]	@ (80016ec <main+0x41c>)
 80016a2:	2201      	movs	r2, #1
 80016a4:	701a      	strb	r2, [r3, #0]
              cpm_params.state = CPM_STATE_IDLE;
 80016a6:	4b0e      	ldr	r3, [pc, #56]	@ (80016e0 <main+0x410>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	721a      	strb	r2, [r3, #8]
        break;
 80016ac:	e016      	b.n	80016dc <main+0x40c>
        else if(cpm_params.state == CPM_STATE_EMERGENCY_STOP)
 80016ae:	4b0c      	ldr	r3, [pc, #48]	@ (80016e0 <main+0x410>)
 80016b0:	7a1b      	ldrb	r3, [r3, #8]
 80016b2:	2b04      	cmp	r3, #4
 80016b4:	d106      	bne.n	80016c4 <main+0x3f4>
          RS485_SendCommand("ST");
 80016b6:	480c      	ldr	r0, [pc, #48]	@ (80016e8 <main+0x418>)
 80016b8:	f000 f9be 	bl	8001a38 <RS485_SendCommand>
          RS485_SendCommand("MD");
 80016bc:	480f      	ldr	r0, [pc, #60]	@ (80016fc <main+0x42c>)
 80016be:	f000 f9bb 	bl	8001a38 <RS485_SendCommand>
        break;
 80016c2:	e00b      	b.n	80016dc <main+0x40c>
        else if(cpm_params.state == CPM_STATE_IDLE)
 80016c4:	4b06      	ldr	r3, [pc, #24]	@ (80016e0 <main+0x410>)
 80016c6:	7a1b      	ldrb	r3, [r3, #8]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d107      	bne.n	80016dc <main+0x40c>
          RS485_SendCommand("ST");
 80016cc:	4806      	ldr	r0, [pc, #24]	@ (80016e8 <main+0x418>)
 80016ce:	f000 f9b3 	bl	8001a38 <RS485_SendCommand>
        break;
 80016d2:	e003      	b.n	80016dc <main+0x40c>

      case CPM_PASSIVE:
        // PASSIVE 모드 구현 예정
        break;
 80016d4:	bf00      	nop
 80016d6:	e62d      	b.n	8001334 <main+0x64>
        break;
 80016d8:	bf00      	nop
 80016da:	e62b      	b.n	8001334 <main+0x64>
        break;
 80016dc:	bf00      	nop
  {
 80016de:	e629      	b.n	8001334 <main+0x64>
 80016e0:	20000258 	.word	0x20000258
 80016e4:	20000282 	.word	0x20000282
 80016e8:	08008730 	.word	0x08008730
 80016ec:	20000001 	.word	0x20000001
 80016f0:	08008748 	.word	0x08008748
 80016f4:	0800874c 	.word	0x0800874c
 80016f8:	08008760 	.word	0x08008760
 80016fc:	08008768 	.word	0x08008768

08001700 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b094      	sub	sp, #80	@ 0x50
 8001704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001706:	f107 0320 	add.w	r3, r7, #32
 800170a:	2230      	movs	r2, #48	@ 0x30
 800170c:	2100      	movs	r1, #0
 800170e:	4618      	mov	r0, r3
 8001710:	f004 ff22 	bl	8006558 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001714:	f107 030c 	add.w	r3, r7, #12
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
 8001722:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001724:	2300      	movs	r3, #0
 8001726:	60bb      	str	r3, [r7, #8]
 8001728:	4b27      	ldr	r3, [pc, #156]	@ (80017c8 <SystemClock_Config+0xc8>)
 800172a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172c:	4a26      	ldr	r2, [pc, #152]	@ (80017c8 <SystemClock_Config+0xc8>)
 800172e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001732:	6413      	str	r3, [r2, #64]	@ 0x40
 8001734:	4b24      	ldr	r3, [pc, #144]	@ (80017c8 <SystemClock_Config+0xc8>)
 8001736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001738:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800173c:	60bb      	str	r3, [r7, #8]
 800173e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001740:	2300      	movs	r3, #0
 8001742:	607b      	str	r3, [r7, #4]
 8001744:	4b21      	ldr	r3, [pc, #132]	@ (80017cc <SystemClock_Config+0xcc>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a20      	ldr	r2, [pc, #128]	@ (80017cc <SystemClock_Config+0xcc>)
 800174a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800174e:	6013      	str	r3, [r2, #0]
 8001750:	4b1e      	ldr	r3, [pc, #120]	@ (80017cc <SystemClock_Config+0xcc>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001758:	607b      	str	r3, [r7, #4]
 800175a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800175c:	2301      	movs	r3, #1
 800175e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001760:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001764:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001766:	2302      	movs	r3, #2
 8001768:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800176a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800176e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001770:	2304      	movs	r3, #4
 8001772:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001774:	2364      	movs	r3, #100	@ 0x64
 8001776:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001778:	2302      	movs	r3, #2
 800177a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800177c:	2304      	movs	r3, #4
 800177e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001780:	f107 0320 	add.w	r3, r7, #32
 8001784:	4618      	mov	r0, r3
 8001786:	f002 f84b 	bl	8003820 <HAL_RCC_OscConfig>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001790:	f000 f93c 	bl	8001a0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001794:	230f      	movs	r3, #15
 8001796:	60fb      	str	r3, [r7, #12]
      |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001798:	2302      	movs	r3, #2
 800179a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017a6:	2300      	movs	r3, #0
 80017a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80017aa:	f107 030c 	add.w	r3, r7, #12
 80017ae:	2103      	movs	r1, #3
 80017b0:	4618      	mov	r0, r3
 80017b2:	f002 faad 	bl	8003d10 <HAL_RCC_ClockConfig>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80017bc:	f000 f926 	bl	8001a0c <Error_Handler>
  }
}
 80017c0:	bf00      	nop
 80017c2:	3750      	adds	r7, #80	@ 0x50
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40023800 	.word	0x40023800
 80017cc:	40007000 	.word	0x40007000

080017d0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  //dwin hmi lcd
  if (huart->Instance == USART2)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a82      	ldr	r2, [pc, #520]	@ (80019e8 <HAL_UART_RxCpltCallback+0x218>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	f040 80fd 	bne.w	80019de <HAL_UART_RxCpltCallback+0x20e>
  {
    switch(dataIndex)
 80017e4:	4b81      	ldr	r3, [pc, #516]	@ (80019ec <HAL_UART_RxCpltCallback+0x21c>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d002      	beq.n	80017f2 <HAL_UART_RxCpltCallback+0x22>
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d011      	beq.n	8001814 <HAL_UART_RxCpltCallback+0x44>
 80017f0:	e024      	b.n	800183c <HAL_UART_RxCpltCallback+0x6c>
    {
      case 0:  // 첫 바이트
        if(rxData == START_BYTE1)
 80017f2:	4b7f      	ldr	r3, [pc, #508]	@ (80019f0 <HAL_UART_RxCpltCallback+0x220>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b5a      	cmp	r3, #90	@ 0x5a
 80017f8:	f040 80e9 	bne.w	80019ce <HAL_UART_RxCpltCallback+0x1fe>
        {
          rxBuffer[dataIndex++] = rxData;
 80017fc:	4b7b      	ldr	r3, [pc, #492]	@ (80019ec <HAL_UART_RxCpltCallback+0x21c>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	1c5a      	adds	r2, r3, #1
 8001802:	b2d1      	uxtb	r1, r2
 8001804:	4a79      	ldr	r2, [pc, #484]	@ (80019ec <HAL_UART_RxCpltCallback+0x21c>)
 8001806:	7011      	strb	r1, [r2, #0]
 8001808:	461a      	mov	r2, r3
 800180a:	4b79      	ldr	r3, [pc, #484]	@ (80019f0 <HAL_UART_RxCpltCallback+0x220>)
 800180c:	7819      	ldrb	r1, [r3, #0]
 800180e:	4b79      	ldr	r3, [pc, #484]	@ (80019f4 <HAL_UART_RxCpltCallback+0x224>)
 8001810:	5499      	strb	r1, [r3, r2]
        }
        break;
 8001812:	e0dc      	b.n	80019ce <HAL_UART_RxCpltCallback+0x1fe>

      case 1:  // 두번째 바이트
        if(rxData == START_BYTE2)
 8001814:	4b76      	ldr	r3, [pc, #472]	@ (80019f0 <HAL_UART_RxCpltCallback+0x220>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2ba5      	cmp	r3, #165	@ 0xa5
 800181a:	d10b      	bne.n	8001834 <HAL_UART_RxCpltCallback+0x64>
        {
          rxBuffer[dataIndex++] = rxData;
 800181c:	4b73      	ldr	r3, [pc, #460]	@ (80019ec <HAL_UART_RxCpltCallback+0x21c>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	1c5a      	adds	r2, r3, #1
 8001822:	b2d1      	uxtb	r1, r2
 8001824:	4a71      	ldr	r2, [pc, #452]	@ (80019ec <HAL_UART_RxCpltCallback+0x21c>)
 8001826:	7011      	strb	r1, [r2, #0]
 8001828:	461a      	mov	r2, r3
 800182a:	4b71      	ldr	r3, [pc, #452]	@ (80019f0 <HAL_UART_RxCpltCallback+0x220>)
 800182c:	7819      	ldrb	r1, [r3, #0]
 800182e:	4b71      	ldr	r3, [pc, #452]	@ (80019f4 <HAL_UART_RxCpltCallback+0x224>)
 8001830:	5499      	strb	r1, [r3, r2]
        }
        else
        {
          dataIndex = 0;
        }
        break;
 8001832:	e0cf      	b.n	80019d4 <HAL_UART_RxCpltCallback+0x204>
          dataIndex = 0;
 8001834:	4b6d      	ldr	r3, [pc, #436]	@ (80019ec <HAL_UART_RxCpltCallback+0x21c>)
 8001836:	2200      	movs	r2, #0
 8001838:	701a      	strb	r2, [r3, #0]
        break;
 800183a:	e0cb      	b.n	80019d4 <HAL_UART_RxCpltCallback+0x204>

      default:  // 나머지 데이터
        rxBuffer[dataIndex++] = rxData;
 800183c:	4b6b      	ldr	r3, [pc, #428]	@ (80019ec <HAL_UART_RxCpltCallback+0x21c>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	1c5a      	adds	r2, r3, #1
 8001842:	b2d1      	uxtb	r1, r2
 8001844:	4a69      	ldr	r2, [pc, #420]	@ (80019ec <HAL_UART_RxCpltCallback+0x21c>)
 8001846:	7011      	strb	r1, [r2, #0]
 8001848:	461a      	mov	r2, r3
 800184a:	4b69      	ldr	r3, [pc, #420]	@ (80019f0 <HAL_UART_RxCpltCallback+0x220>)
 800184c:	7819      	ldrb	r1, [r3, #0]
 800184e:	4b69      	ldr	r3, [pc, #420]	@ (80019f4 <HAL_UART_RxCpltCallback+0x224>)
 8001850:	5499      	strb	r1, [r3, r2]
        if(dataIndex >= DATA_LENGTH)
 8001852:	4b66      	ldr	r3, [pc, #408]	@ (80019ec <HAL_UART_RxCpltCallback+0x21c>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	2b08      	cmp	r3, #8
 8001858:	f240 80bb 	bls.w	80019d2 <HAL_UART_RxCpltCallback+0x202>
        {
          protocolData.startByte1 = rxBuffer[0];
 800185c:	4b65      	ldr	r3, [pc, #404]	@ (80019f4 <HAL_UART_RxCpltCallback+0x224>)
 800185e:	781a      	ldrb	r2, [r3, #0]
 8001860:	4b65      	ldr	r3, [pc, #404]	@ (80019f8 <HAL_UART_RxCpltCallback+0x228>)
 8001862:	701a      	strb	r2, [r3, #0]
          protocolData.startByte2 = rxBuffer[1];
 8001864:	4b63      	ldr	r3, [pc, #396]	@ (80019f4 <HAL_UART_RxCpltCallback+0x224>)
 8001866:	785a      	ldrb	r2, [r3, #1]
 8001868:	4b63      	ldr	r3, [pc, #396]	@ (80019f8 <HAL_UART_RxCpltCallback+0x228>)
 800186a:	705a      	strb	r2, [r3, #1]
          protocolData.dataLength = rxBuffer[2];
 800186c:	4b61      	ldr	r3, [pc, #388]	@ (80019f4 <HAL_UART_RxCpltCallback+0x224>)
 800186e:	789a      	ldrb	r2, [r3, #2]
 8001870:	4b61      	ldr	r3, [pc, #388]	@ (80019f8 <HAL_UART_RxCpltCallback+0x228>)
 8001872:	709a      	strb	r2, [r3, #2]
          protocolData.command = rxBuffer[3];
 8001874:	4b5f      	ldr	r3, [pc, #380]	@ (80019f4 <HAL_UART_RxCpltCallback+0x224>)
 8001876:	78da      	ldrb	r2, [r3, #3]
 8001878:	4b5f      	ldr	r3, [pc, #380]	@ (80019f8 <HAL_UART_RxCpltCallback+0x228>)
 800187a:	70da      	strb	r2, [r3, #3]
          protocolData.objNum1 = rxBuffer[4];
 800187c:	4b5d      	ldr	r3, [pc, #372]	@ (80019f4 <HAL_UART_RxCpltCallback+0x224>)
 800187e:	791a      	ldrb	r2, [r3, #4]
 8001880:	4b5d      	ldr	r3, [pc, #372]	@ (80019f8 <HAL_UART_RxCpltCallback+0x228>)
 8001882:	711a      	strb	r2, [r3, #4]
          protocolData.objNum2 = rxBuffer[5];
 8001884:	4b5b      	ldr	r3, [pc, #364]	@ (80019f4 <HAL_UART_RxCpltCallback+0x224>)
 8001886:	795a      	ldrb	r2, [r3, #5]
 8001888:	4b5b      	ldr	r3, [pc, #364]	@ (80019f8 <HAL_UART_RxCpltCallback+0x228>)
 800188a:	715a      	strb	r2, [r3, #5]
          protocolData.dataByte = rxBuffer[6];
 800188c:	4b59      	ldr	r3, [pc, #356]	@ (80019f4 <HAL_UART_RxCpltCallback+0x224>)
 800188e:	799a      	ldrb	r2, [r3, #6]
 8001890:	4b59      	ldr	r3, [pc, #356]	@ (80019f8 <HAL_UART_RxCpltCallback+0x228>)
 8001892:	719a      	strb	r2, [r3, #6]
          protocolData.data1 = rxBuffer[7];
 8001894:	4b57      	ldr	r3, [pc, #348]	@ (80019f4 <HAL_UART_RxCpltCallback+0x224>)
 8001896:	79da      	ldrb	r2, [r3, #7]
 8001898:	4b57      	ldr	r3, [pc, #348]	@ (80019f8 <HAL_UART_RxCpltCallback+0x228>)
 800189a:	71da      	strb	r2, [r3, #7]
          protocolData.data2 = rxBuffer[8];
 800189c:	4b55      	ldr	r3, [pc, #340]	@ (80019f4 <HAL_UART_RxCpltCallback+0x224>)
 800189e:	7a1a      	ldrb	r2, [r3, #8]
 80018a0:	4b55      	ldr	r3, [pc, #340]	@ (80019f8 <HAL_UART_RxCpltCallback+0x228>)
 80018a2:	721a      	strb	r2, [r3, #8]

          // objNum1과 objNum2를 조합하여 파라미터 식별
          uint16_t param_id = (protocolData.objNum1 << 8) | protocolData.objNum2;
 80018a4:	4b54      	ldr	r3, [pc, #336]	@ (80019f8 <HAL_UART_RxCpltCallback+0x228>)
 80018a6:	791b      	ldrb	r3, [r3, #4]
 80018a8:	021b      	lsls	r3, r3, #8
 80018aa:	b21a      	sxth	r2, r3
 80018ac:	4b52      	ldr	r3, [pc, #328]	@ (80019f8 <HAL_UART_RxCpltCallback+0x228>)
 80018ae:	795b      	ldrb	r3, [r3, #5]
 80018b0:	b21b      	sxth	r3, r3
 80018b2:	4313      	orrs	r3, r2
 80018b4:	b21b      	sxth	r3, r3
 80018b6:	81fb      	strh	r3, [r7, #14]

          // 파라미터 업데이트
          switch(param_id)
 80018b8:	89fb      	ldrh	r3, [r7, #14]
 80018ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80018be:	d06a      	beq.n	8001996 <HAL_UART_RxCpltCallback+0x1c6>
 80018c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80018c4:	dc7f      	bgt.n	80019c6 <HAL_UART_RxCpltCallback+0x1f6>
 80018c6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80018ca:	4293      	cmp	r3, r2
 80018cc:	dc12      	bgt.n	80018f4 <HAL_UART_RxCpltCallback+0x124>
 80018ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80018d2:	db78      	blt.n	80019c6 <HAL_UART_RxCpltCallback+0x1f6>
 80018d4:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 80018d8:	2b03      	cmp	r3, #3
 80018da:	d874      	bhi.n	80019c6 <HAL_UART_RxCpltCallback+0x1f6>
 80018dc:	a201      	add	r2, pc, #4	@ (adr r2, 80018e4 <HAL_UART_RxCpltCallback+0x114>)
 80018de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018e2:	bf00      	nop
 80018e4:	080018fd 	.word	0x080018fd
 80018e8:	08001919 	.word	0x08001919
 80018ec:	08001925 	.word	0x08001925
 80018f0:	0800192f 	.word	0x0800192f
 80018f4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80018f8:	d01f      	beq.n	800193a <HAL_UART_RxCpltCallback+0x16a>
 80018fa:	e064      	b.n	80019c6 <HAL_UART_RxCpltCallback+0x1f6>
          {
            case 0x1000:  // 속도 (1-10)
              cpm_params.speed = (float)protocolData.data2;
 80018fc:	4b3e      	ldr	r3, [pc, #248]	@ (80019f8 <HAL_UART_RxCpltCallback+0x228>)
 80018fe:	7a1b      	ldrb	r3, [r3, #8]
 8001900:	ee07 3a90 	vmov	s15, r3
 8001904:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001908:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800190c:	ee17 3a90 	vmov	r3, s15
 8001910:	b21a      	sxth	r2, r3
 8001912:	4b3a      	ldr	r3, [pc, #232]	@ (80019fc <HAL_UART_RxCpltCallback+0x22c>)
 8001914:	801a      	strh	r2, [r3, #0]
              // 실행 중에는 값만 저장하고 업데이트 플래그는 설정하지 않음
              break;
 8001916:	e056      	b.n	80019c6 <HAL_UART_RxCpltCallback+0x1f6>

            case 0x1001:  // 각도 (10-120)
              cpm_params.angle = (short)protocolData.data2;
 8001918:	4b37      	ldr	r3, [pc, #220]	@ (80019f8 <HAL_UART_RxCpltCallback+0x228>)
 800191a:	7a1b      	ldrb	r3, [r3, #8]
 800191c:	b21a      	sxth	r2, r3
 800191e:	4b37      	ldr	r3, [pc, #220]	@ (80019fc <HAL_UART_RxCpltCallback+0x22c>)
 8001920:	805a      	strh	r2, [r3, #2]
              // 실행 중에는 값만 저장하고 업데이트 플래그는 설정하지 않음
              break;
 8001922:	e050      	b.n	80019c6 <HAL_UART_RxCpltCallback+0x1f6>

            case 0x1002:  // 반복 (10-100)
              cpm_params.repeat = protocolData.data2;
 8001924:	4b34      	ldr	r3, [pc, #208]	@ (80019f8 <HAL_UART_RxCpltCallback+0x228>)
 8001926:	7a1a      	ldrb	r2, [r3, #8]
 8001928:	4b34      	ldr	r3, [pc, #208]	@ (80019fc <HAL_UART_RxCpltCallback+0x22c>)
 800192a:	711a      	strb	r2, [r3, #4]
              // 실행 중에는 값만 저장하고 업데이트 플래그는 설정하지 않음
              break;
 800192c:	e04b      	b.n	80019c6 <HAL_UART_RxCpltCallback+0x1f6>

            case 0x1003:  // 딜레이 (1-10)
              cpm_params.delay = protocolData.data2;
 800192e:	4b32      	ldr	r3, [pc, #200]	@ (80019f8 <HAL_UART_RxCpltCallback+0x228>)
 8001930:	7a1b      	ldrb	r3, [r3, #8]
 8001932:	b21a      	sxth	r2, r3
 8001934:	4b31      	ldr	r3, [pc, #196]	@ (80019fc <HAL_UART_RxCpltCallback+0x22c>)
 8001936:	80da      	strh	r2, [r3, #6]
              // 실행 중에는 값만 저장하고 업데이트 플래그는 설정하지 않음
              break;
 8001938:	e045      	b.n	80019c6 <HAL_UART_RxCpltCallback+0x1f6>



            case 0x3000:
              // 상호작용 버튼
              switch(protocolData.data2)
 800193a:	4b2f      	ldr	r3, [pc, #188]	@ (80019f8 <HAL_UART_RxCpltCallback+0x228>)
 800193c:	7a1b      	ldrb	r3, [r3, #8]
 800193e:	3b01      	subs	r3, #1
 8001940:	2b04      	cmp	r3, #4
 8001942:	d83d      	bhi.n	80019c0 <HAL_UART_RxCpltCallback+0x1f0>
 8001944:	a201      	add	r2, pc, #4	@ (adr r2, 800194c <HAL_UART_RxCpltCallback+0x17c>)
 8001946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800194a:	bf00      	nop
 800194c:	08001961 	.word	0x08001961
 8001950:	0800196f 	.word	0x0800196f
 8001954:	08001977 	.word	0x08001977
 8001958:	08001985 	.word	0x08001985
 800195c:	0800198d 	.word	0x0800198d
              {
                case 0x01:  // 시작
                  cpm_params.state = CPM_STATE_RUNNING;
 8001960:	4b26      	ldr	r3, [pc, #152]	@ (80019fc <HAL_UART_RxCpltCallback+0x22c>)
 8001962:	2201      	movs	r2, #1
 8001964:	721a      	strb	r2, [r3, #8]
                  params_updated = true;  // 시작 버튼 누를 때만 파라미터 적용
 8001966:	4b26      	ldr	r3, [pc, #152]	@ (8001a00 <HAL_UART_RxCpltCallback+0x230>)
 8001968:	2201      	movs	r2, #1
 800196a:	701a      	strb	r2, [r3, #0]
                  break;
 800196c:	e012      	b.n	8001994 <HAL_UART_RxCpltCallback+0x1c4>

                case 0x02:  // 일시정지
                  cpm_params.state = CPM_STATE_PAUSED;
 800196e:	4b23      	ldr	r3, [pc, #140]	@ (80019fc <HAL_UART_RxCpltCallback+0x22c>)
 8001970:	2202      	movs	r2, #2
 8001972:	721a      	strb	r2, [r3, #8]
                  break;
 8001974:	e00e      	b.n	8001994 <HAL_UART_RxCpltCallback+0x1c4>

                case 0x03:  // 정 지
                  cpm_params.state = CPM_STATE_STOP;
 8001976:	4b21      	ldr	r3, [pc, #132]	@ (80019fc <HAL_UART_RxCpltCallback+0x22c>)
 8001978:	2203      	movs	r2, #3
 800197a:	721a      	strb	r2, [r3, #8]
                  stop = false;
 800197c:	4b21      	ldr	r3, [pc, #132]	@ (8001a04 <HAL_UART_RxCpltCallback+0x234>)
 800197e:	2200      	movs	r2, #0
 8001980:	701a      	strb	r2, [r3, #0]

                  break;
 8001982:	e007      	b.n	8001994 <HAL_UART_RxCpltCallback+0x1c4>

                case 0x04:  // 0점(초기화)
                  cpm_params.state = CPM_STATE_IDLE;
 8001984:	4b1d      	ldr	r3, [pc, #116]	@ (80019fc <HAL_UART_RxCpltCallback+0x22c>)
 8001986:	2200      	movs	r2, #0
 8001988:	721a      	strb	r2, [r3, #8]

                  break;
 800198a:	e003      	b.n	8001994 <HAL_UART_RxCpltCallback+0x1c4>

                case 0x05:  // 비상정지
                  cpm_params.state = CPM_STATE_EMERGENCY_STOP;
 800198c:	4b1b      	ldr	r3, [pc, #108]	@ (80019fc <HAL_UART_RxCpltCallback+0x22c>)
 800198e:	2204      	movs	r2, #4
 8001990:	721a      	strb	r2, [r3, #8]

                  break;
 8001992:	bf00      	nop

              }
              break;
 8001994:	e014      	b.n	80019c0 <HAL_UART_RxCpltCallback+0x1f0>

                case 0x4000:  // 모드 선택
                  switch(protocolData.data2)
 8001996:	4b18      	ldr	r3, [pc, #96]	@ (80019f8 <HAL_UART_RxCpltCallback+0x228>)
 8001998:	7a1b      	ldrb	r3, [r3, #8]
 800199a:	2b03      	cmp	r3, #3
 800199c:	d00e      	beq.n	80019bc <HAL_UART_RxCpltCallback+0x1ec>
 800199e:	2b03      	cmp	r3, #3
 80019a0:	dc10      	bgt.n	80019c4 <HAL_UART_RxCpltCallback+0x1f4>
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d002      	beq.n	80019ac <HAL_UART_RxCpltCallback+0x1dc>
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d004      	beq.n	80019b4 <HAL_UART_RxCpltCallback+0x1e4>

                    case 0x03:  // 힘측정 모드
                      //cpm_mode = CPM_FORCE_MEASURE;
                      break;
                  }
                  break;
 80019aa:	e00b      	b.n	80019c4 <HAL_UART_RxCpltCallback+0x1f4>
                      cpm_mode = CPM_ACTIVE;
 80019ac:	4b16      	ldr	r3, [pc, #88]	@ (8001a08 <HAL_UART_RxCpltCallback+0x238>)
 80019ae:	2201      	movs	r2, #1
 80019b0:	701a      	strb	r2, [r3, #0]
                      break;
 80019b2:	e004      	b.n	80019be <HAL_UART_RxCpltCallback+0x1ee>
                      cpm_mode = CPM_PASSIVE;
 80019b4:	4b14      	ldr	r3, [pc, #80]	@ (8001a08 <HAL_UART_RxCpltCallback+0x238>)
 80019b6:	2202      	movs	r2, #2
 80019b8:	701a      	strb	r2, [r3, #0]
                      break;
 80019ba:	e000      	b.n	80019be <HAL_UART_RxCpltCallback+0x1ee>
                      break;
 80019bc:	bf00      	nop
                  break;
 80019be:	e001      	b.n	80019c4 <HAL_UART_RxCpltCallback+0x1f4>
              break;
 80019c0:	bf00      	nop
 80019c2:	e000      	b.n	80019c6 <HAL_UART_RxCpltCallback+0x1f6>
                  break;
 80019c4:	bf00      	nop


          }

          dataIndex = 0;
 80019c6:	4b09      	ldr	r3, [pc, #36]	@ (80019ec <HAL_UART_RxCpltCallback+0x21c>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	701a      	strb	r2, [r3, #0]
        }
        break;
 80019cc:	e001      	b.n	80019d2 <HAL_UART_RxCpltCallback+0x202>
        break;
 80019ce:	bf00      	nop
 80019d0:	e000      	b.n	80019d4 <HAL_UART_RxCpltCallback+0x204>
        break;
 80019d2:	bf00      	nop
    }
    HAL_UART_Receive_IT(huart, &rxData, 1);
 80019d4:	2201      	movs	r2, #1
 80019d6:	4906      	ldr	r1, [pc, #24]	@ (80019f0 <HAL_UART_RxCpltCallback+0x220>)
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f003 f81e 	bl	8004a1a <HAL_UART_Receive_IT>
  }
}
 80019de:	bf00      	nop
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40004400 	.word	0x40004400
 80019ec:	2000026d 	.word	0x2000026d
 80019f0:	20000262 	.word	0x20000262
 80019f4:	20000264 	.word	0x20000264
 80019f8:	20000270 	.word	0x20000270
 80019fc:	20000258 	.word	0x20000258
 8001a00:	20000281 	.word	0x20000281
 8001a04:	20000282 	.word	0x20000282
 8001a08:	20000000 	.word	0x20000000

08001a0c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a10:	b672      	cpsid	i
}
 8001a12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a14:	bf00      	nop
 8001a16:	e7fd      	b.n	8001a14 <Error_Handler+0x8>

08001a18 <RS485_MotorInit>:
  * @brief 서보 모터 초기화 및 설정
  * @param huart UART 핸들 포인터
  * @retval None
  */
void RS485_MotorInit(UART_HandleTypeDef *huart)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
    _huart = huart;
 8001a20:	4a04      	ldr	r2, [pc, #16]	@ (8001a34 <RS485_MotorInit+0x1c>)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6013      	str	r3, [r2, #0]
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	20000284 	.word	0x20000284

08001a38 <RS485_SendCommand>:
  * @brief RS485를 통해 명령 전송
  * @param cmd 전송할 명령
  * @retval None
  */
void RS485_SendCommand(const char *cmd)
{
 8001a38:	b590      	push	{r4, r7, lr}
 8001a3a:	b08b      	sub	sp, #44	@ 0x2c
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
    char buffer[32];
    sprintf(buffer, "%s\r", cmd);
 8001a40:	f107 0308 	add.w	r3, r7, #8
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	490d      	ldr	r1, [pc, #52]	@ (8001a7c <RS485_SendCommand+0x44>)
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f004 fc8d 	bl	8006368 <siprintf>
    HAL_UART_Transmit(_huart, (uint8_t*)buffer, strlen(buffer), 100);
 8001a4e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a80 <RS485_SendCommand+0x48>)
 8001a50:	681c      	ldr	r4, [r3, #0]
 8001a52:	f107 0308 	add.w	r3, r7, #8
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7fe fc12 	bl	8000280 <strlen>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	f107 0108 	add.w	r1, r7, #8
 8001a64:	2364      	movs	r3, #100	@ 0x64
 8001a66:	4620      	mov	r0, r4
 8001a68:	f002 ff4c 	bl	8004904 <HAL_UART_Transmit>
    HAL_Delay(20);
 8001a6c:	2014      	movs	r0, #20
 8001a6e:	f000 fb77 	bl	8002160 <HAL_Delay>
}
 8001a72:	bf00      	nop
 8001a74:	372c      	adds	r7, #44	@ 0x2c
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd90      	pop	{r4, r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	08008778 	.word	0x08008778
 8001a80:	20000284 	.word	0x20000284

08001a84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	607b      	str	r3, [r7, #4]
 8001a8e:	4b10      	ldr	r3, [pc, #64]	@ (8001ad0 <HAL_MspInit+0x4c>)
 8001a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a92:	4a0f      	ldr	r2, [pc, #60]	@ (8001ad0 <HAL_MspInit+0x4c>)
 8001a94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a98:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ad0 <HAL_MspInit+0x4c>)
 8001a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001aa2:	607b      	str	r3, [r7, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	603b      	str	r3, [r7, #0]
 8001aaa:	4b09      	ldr	r3, [pc, #36]	@ (8001ad0 <HAL_MspInit+0x4c>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aae:	4a08      	ldr	r2, [pc, #32]	@ (8001ad0 <HAL_MspInit+0x4c>)
 8001ab0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ab4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ab6:	4b06      	ldr	r3, [pc, #24]	@ (8001ad0 <HAL_MspInit+0x4c>)
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001abe:	603b      	str	r3, [r7, #0]
 8001ac0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	40023800 	.word	0x40023800

08001ad4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ad8:	bf00      	nop
 8001ada:	e7fd      	b.n	8001ad8 <NMI_Handler+0x4>

08001adc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ae0:	bf00      	nop
 8001ae2:	e7fd      	b.n	8001ae0 <HardFault_Handler+0x4>

08001ae4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ae8:	bf00      	nop
 8001aea:	e7fd      	b.n	8001ae8 <MemManage_Handler+0x4>

08001aec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001af0:	bf00      	nop
 8001af2:	e7fd      	b.n	8001af0 <BusFault_Handler+0x4>

08001af4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001af8:	bf00      	nop
 8001afa:	e7fd      	b.n	8001af8 <UsageFault_Handler+0x4>

08001afc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b2a:	f000 faf9 	bl	8002120 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
	...

08001b34 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b38:	4802      	ldr	r0, [pc, #8]	@ (8001b44 <TIM3_IRQHandler+0x10>)
 8001b3a:	f002 fc3d 	bl	80043b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	2000028c 	.word	0x2000028c

08001b48 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b4c:	4802      	ldr	r0, [pc, #8]	@ (8001b58 <USART1_IRQHandler+0x10>)
 8001b4e:	f002 ff89 	bl	8004a64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	200002d4 	.word	0x200002d4

08001b5c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b60:	4802      	ldr	r0, [pc, #8]	@ (8001b6c <USART2_IRQHandler+0x10>)
 8001b62:	f002 ff7f 	bl	8004a64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	2000031c 	.word	0x2000031c

08001b70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return 1;
 8001b74:	2301      	movs	r3, #1
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <_kill>:

int _kill(int pid, int sig)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b8a:	f004 fd37 	bl	80065fc <__errno>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2216      	movs	r2, #22
 8001b92:	601a      	str	r2, [r3, #0]
  return -1;
 8001b94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <_exit>:

void _exit (int status)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ba8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f7ff ffe7 	bl	8001b80 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bb2:	bf00      	nop
 8001bb4:	e7fd      	b.n	8001bb2 <_exit+0x12>

08001bb6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b086      	sub	sp, #24
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	60f8      	str	r0, [r7, #12]
 8001bbe:	60b9      	str	r1, [r7, #8]
 8001bc0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	617b      	str	r3, [r7, #20]
 8001bc6:	e00a      	b.n	8001bde <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bc8:	f3af 8000 	nop.w
 8001bcc:	4601      	mov	r1, r0
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	1c5a      	adds	r2, r3, #1
 8001bd2:	60ba      	str	r2, [r7, #8]
 8001bd4:	b2ca      	uxtb	r2, r1
 8001bd6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	617b      	str	r3, [r7, #20]
 8001bde:	697a      	ldr	r2, [r7, #20]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	dbf0      	blt.n	8001bc8 <_read+0x12>
  }

  return len;
 8001be6:	687b      	ldr	r3, [r7, #4]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3718      	adds	r7, #24
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	617b      	str	r3, [r7, #20]
 8001c00:	e009      	b.n	8001c16 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	1c5a      	adds	r2, r3, #1
 8001c06:	60ba      	str	r2, [r7, #8]
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff fb4c 	bl	80012a8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	3301      	adds	r3, #1
 8001c14:	617b      	str	r3, [r7, #20]
 8001c16:	697a      	ldr	r2, [r7, #20]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	dbf1      	blt.n	8001c02 <_write+0x12>
  }
  return len;
 8001c1e:	687b      	ldr	r3, [r7, #4]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3718      	adds	r7, #24
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <_close>:

int _close(int file)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c50:	605a      	str	r2, [r3, #4]
  return 0;
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <_isatty>:

int _isatty(int file)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c68:	2301      	movs	r3, #1
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b085      	sub	sp, #20
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	60f8      	str	r0, [r7, #12]
 8001c7e:	60b9      	str	r1, [r7, #8]
 8001c80:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3714      	adds	r7, #20
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c98:	4a14      	ldr	r2, [pc, #80]	@ (8001cec <_sbrk+0x5c>)
 8001c9a:	4b15      	ldr	r3, [pc, #84]	@ (8001cf0 <_sbrk+0x60>)
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ca4:	4b13      	ldr	r3, [pc, #76]	@ (8001cf4 <_sbrk+0x64>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d102      	bne.n	8001cb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cac:	4b11      	ldr	r3, [pc, #68]	@ (8001cf4 <_sbrk+0x64>)
 8001cae:	4a12      	ldr	r2, [pc, #72]	@ (8001cf8 <_sbrk+0x68>)
 8001cb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cb2:	4b10      	ldr	r3, [pc, #64]	@ (8001cf4 <_sbrk+0x64>)
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4413      	add	r3, r2
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d207      	bcs.n	8001cd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cc0:	f004 fc9c 	bl	80065fc <__errno>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	220c      	movs	r2, #12
 8001cc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cca:	f04f 33ff 	mov.w	r3, #4294967295
 8001cce:	e009      	b.n	8001ce4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cd0:	4b08      	ldr	r3, [pc, #32]	@ (8001cf4 <_sbrk+0x64>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cd6:	4b07      	ldr	r3, [pc, #28]	@ (8001cf4 <_sbrk+0x64>)
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4413      	add	r3, r2
 8001cde:	4a05      	ldr	r2, [pc, #20]	@ (8001cf4 <_sbrk+0x64>)
 8001ce0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3718      	adds	r7, #24
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	20020000 	.word	0x20020000
 8001cf0:	00000400 	.word	0x00000400
 8001cf4:	20000288 	.word	0x20000288
 8001cf8:	200004b8 	.word	0x200004b8

08001cfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d00:	4b06      	ldr	r3, [pc, #24]	@ (8001d1c <SystemInit+0x20>)
 8001d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d06:	4a05      	ldr	r2, [pc, #20]	@ (8001d1c <SystemInit+0x20>)
 8001d08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d10:	bf00      	nop
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b08c      	sub	sp, #48	@ 0x30
 8001d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d26:	f107 030c 	add.w	r3, r7, #12
 8001d2a:	2224      	movs	r2, #36	@ 0x24
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f004 fc12 	bl	8006558 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d34:	1d3b      	adds	r3, r7, #4
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d3c:	4b20      	ldr	r3, [pc, #128]	@ (8001dc0 <MX_TIM3_Init+0xa0>)
 8001d3e:	4a21      	ldr	r2, [pc, #132]	@ (8001dc4 <MX_TIM3_Init+0xa4>)
 8001d40:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001d42:	4b1f      	ldr	r3, [pc, #124]	@ (8001dc0 <MX_TIM3_Init+0xa0>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d48:	4b1d      	ldr	r3, [pc, #116]	@ (8001dc0 <MX_TIM3_Init+0xa0>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8001d4e:	4b1c      	ldr	r3, [pc, #112]	@ (8001dc0 <MX_TIM3_Init+0xa0>)
 8001d50:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001d54:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d56:	4b1a      	ldr	r3, [pc, #104]	@ (8001dc0 <MX_TIM3_Init+0xa0>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d5c:	4b18      	ldr	r3, [pc, #96]	@ (8001dc0 <MX_TIM3_Init+0xa0>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d62:	2303      	movs	r3, #3
 8001d64:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d66:	2300      	movs	r3, #0
 8001d68:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001d72:	230a      	movs	r3, #10
 8001d74:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d76:	2300      	movs	r3, #0
 8001d78:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001d82:	2300      	movs	r3, #0
 8001d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001d86:	f107 030c 	add.w	r3, r7, #12
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	480c      	ldr	r0, [pc, #48]	@ (8001dc0 <MX_TIM3_Init+0xa0>)
 8001d8e:	f002 f9df 	bl	8004150 <HAL_TIM_Encoder_Init>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001d98:	f7ff fe38 	bl	8001a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001da0:	2300      	movs	r3, #0
 8001da2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001da4:	1d3b      	adds	r3, r7, #4
 8001da6:	4619      	mov	r1, r3
 8001da8:	4805      	ldr	r0, [pc, #20]	@ (8001dc0 <MX_TIM3_Init+0xa0>)
 8001daa:	f002 fcd9 	bl	8004760 <HAL_TIMEx_MasterConfigSynchronization>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001db4:	f7ff fe2a 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001db8:	bf00      	nop
 8001dba:	3730      	adds	r7, #48	@ 0x30
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	2000028c 	.word	0x2000028c
 8001dc4:	40000400 	.word	0x40000400

08001dc8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08a      	sub	sp, #40	@ 0x28
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd0:	f107 0314 	add.w	r3, r7, #20
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	60da      	str	r2, [r3, #12]
 8001dde:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a1d      	ldr	r2, [pc, #116]	@ (8001e5c <HAL_TIM_Encoder_MspInit+0x94>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d133      	bne.n	8001e52 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	613b      	str	r3, [r7, #16]
 8001dee:	4b1c      	ldr	r3, [pc, #112]	@ (8001e60 <HAL_TIM_Encoder_MspInit+0x98>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df2:	4a1b      	ldr	r2, [pc, #108]	@ (8001e60 <HAL_TIM_Encoder_MspInit+0x98>)
 8001df4:	f043 0302 	orr.w	r3, r3, #2
 8001df8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dfa:	4b19      	ldr	r3, [pc, #100]	@ (8001e60 <HAL_TIM_Encoder_MspInit+0x98>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	613b      	str	r3, [r7, #16]
 8001e04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	60fb      	str	r3, [r7, #12]
 8001e0a:	4b15      	ldr	r3, [pc, #84]	@ (8001e60 <HAL_TIM_Encoder_MspInit+0x98>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0e:	4a14      	ldr	r2, [pc, #80]	@ (8001e60 <HAL_TIM_Encoder_MspInit+0x98>)
 8001e10:	f043 0301 	orr.w	r3, r3, #1
 8001e14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e16:	4b12      	ldr	r3, [pc, #72]	@ (8001e60 <HAL_TIM_Encoder_MspInit+0x98>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e22:	23c0      	movs	r3, #192	@ 0xc0
 8001e24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e26:	2302      	movs	r3, #2
 8001e28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e32:	2302      	movs	r3, #2
 8001e34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e36:	f107 0314 	add.w	r3, r7, #20
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4809      	ldr	r0, [pc, #36]	@ (8001e64 <HAL_TIM_Encoder_MspInit+0x9c>)
 8001e3e:	f000 fb57 	bl	80024f0 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001e42:	2200      	movs	r2, #0
 8001e44:	2100      	movs	r1, #0
 8001e46:	201d      	movs	r0, #29
 8001e48:	f000 fa89 	bl	800235e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e4c:	201d      	movs	r0, #29
 8001e4e:	f000 faa2 	bl	8002396 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001e52:	bf00      	nop
 8001e54:	3728      	adds	r7, #40	@ 0x28
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40000400 	.word	0x40000400
 8001e60:	40023800 	.word	0x40023800
 8001e64:	40020000 	.word	0x40020000

08001e68 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e6c:	4b11      	ldr	r3, [pc, #68]	@ (8001eb4 <MX_USART1_UART_Init+0x4c>)
 8001e6e:	4a12      	ldr	r2, [pc, #72]	@ (8001eb8 <MX_USART1_UART_Init+0x50>)
 8001e70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001e72:	4b10      	ldr	r3, [pc, #64]	@ (8001eb4 <MX_USART1_UART_Init+0x4c>)
 8001e74:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001e78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb4 <MX_USART1_UART_Init+0x4c>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e80:	4b0c      	ldr	r3, [pc, #48]	@ (8001eb4 <MX_USART1_UART_Init+0x4c>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e86:	4b0b      	ldr	r3, [pc, #44]	@ (8001eb4 <MX_USART1_UART_Init+0x4c>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e8c:	4b09      	ldr	r3, [pc, #36]	@ (8001eb4 <MX_USART1_UART_Init+0x4c>)
 8001e8e:	220c      	movs	r2, #12
 8001e90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e92:	4b08      	ldr	r3, [pc, #32]	@ (8001eb4 <MX_USART1_UART_Init+0x4c>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e98:	4b06      	ldr	r3, [pc, #24]	@ (8001eb4 <MX_USART1_UART_Init+0x4c>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e9e:	4805      	ldr	r0, [pc, #20]	@ (8001eb4 <MX_USART1_UART_Init+0x4c>)
 8001ea0:	f002 fce0 	bl	8004864 <HAL_UART_Init>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001eaa:	f7ff fdaf 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001eae:	bf00      	nop
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	200002d4 	.word	0x200002d4
 8001eb8:	40011000 	.word	0x40011000

08001ebc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ec0:	4b11      	ldr	r3, [pc, #68]	@ (8001f08 <MX_USART2_UART_Init+0x4c>)
 8001ec2:	4a12      	ldr	r2, [pc, #72]	@ (8001f0c <MX_USART2_UART_Init+0x50>)
 8001ec4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ec6:	4b10      	ldr	r3, [pc, #64]	@ (8001f08 <MX_USART2_UART_Init+0x4c>)
 8001ec8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ecc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ece:	4b0e      	ldr	r3, [pc, #56]	@ (8001f08 <MX_USART2_UART_Init+0x4c>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8001f08 <MX_USART2_UART_Init+0x4c>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001eda:	4b0b      	ldr	r3, [pc, #44]	@ (8001f08 <MX_USART2_UART_Init+0x4c>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ee0:	4b09      	ldr	r3, [pc, #36]	@ (8001f08 <MX_USART2_UART_Init+0x4c>)
 8001ee2:	220c      	movs	r2, #12
 8001ee4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ee6:	4b08      	ldr	r3, [pc, #32]	@ (8001f08 <MX_USART2_UART_Init+0x4c>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001eec:	4b06      	ldr	r3, [pc, #24]	@ (8001f08 <MX_USART2_UART_Init+0x4c>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ef2:	4805      	ldr	r0, [pc, #20]	@ (8001f08 <MX_USART2_UART_Init+0x4c>)
 8001ef4:	f002 fcb6 	bl	8004864 <HAL_UART_Init>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001efe:	f7ff fd85 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	2000031c 	.word	0x2000031c
 8001f0c:	40004400 	.word	0x40004400

08001f10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08c      	sub	sp, #48	@ 0x30
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f18:	f107 031c 	add.w	r3, r7, #28
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	609a      	str	r2, [r3, #8]
 8001f24:	60da      	str	r2, [r3, #12]
 8001f26:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a3a      	ldr	r2, [pc, #232]	@ (8002018 <HAL_UART_MspInit+0x108>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d135      	bne.n	8001f9e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	61bb      	str	r3, [r7, #24]
 8001f36:	4b39      	ldr	r3, [pc, #228]	@ (800201c <HAL_UART_MspInit+0x10c>)
 8001f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f3a:	4a38      	ldr	r2, [pc, #224]	@ (800201c <HAL_UART_MspInit+0x10c>)
 8001f3c:	f043 0310 	orr.w	r3, r3, #16
 8001f40:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f42:	4b36      	ldr	r3, [pc, #216]	@ (800201c <HAL_UART_MspInit+0x10c>)
 8001f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f46:	f003 0310 	and.w	r3, r3, #16
 8001f4a:	61bb      	str	r3, [r7, #24]
 8001f4c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	617b      	str	r3, [r7, #20]
 8001f52:	4b32      	ldr	r3, [pc, #200]	@ (800201c <HAL_UART_MspInit+0x10c>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f56:	4a31      	ldr	r2, [pc, #196]	@ (800201c <HAL_UART_MspInit+0x10c>)
 8001f58:	f043 0301 	orr.w	r3, r3, #1
 8001f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f5e:	4b2f      	ldr	r3, [pc, #188]	@ (800201c <HAL_UART_MspInit+0x10c>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	617b      	str	r3, [r7, #20]
 8001f68:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001f6a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f70:	2302      	movs	r3, #2
 8001f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f7c:	2307      	movs	r3, #7
 8001f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f80:	f107 031c 	add.w	r3, r7, #28
 8001f84:	4619      	mov	r1, r3
 8001f86:	4826      	ldr	r0, [pc, #152]	@ (8002020 <HAL_UART_MspInit+0x110>)
 8001f88:	f000 fab2 	bl	80024f0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	2100      	movs	r1, #0
 8001f90:	2025      	movs	r0, #37	@ 0x25
 8001f92:	f000 f9e4 	bl	800235e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f96:	2025      	movs	r0, #37	@ 0x25
 8001f98:	f000 f9fd 	bl	8002396 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001f9c:	e038      	b.n	8002010 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a20      	ldr	r2, [pc, #128]	@ (8002024 <HAL_UART_MspInit+0x114>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d133      	bne.n	8002010 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fa8:	2300      	movs	r3, #0
 8001faa:	613b      	str	r3, [r7, #16]
 8001fac:	4b1b      	ldr	r3, [pc, #108]	@ (800201c <HAL_UART_MspInit+0x10c>)
 8001fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb0:	4a1a      	ldr	r2, [pc, #104]	@ (800201c <HAL_UART_MspInit+0x10c>)
 8001fb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fb6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fb8:	4b18      	ldr	r3, [pc, #96]	@ (800201c <HAL_UART_MspInit+0x10c>)
 8001fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fc0:	613b      	str	r3, [r7, #16]
 8001fc2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	4b14      	ldr	r3, [pc, #80]	@ (800201c <HAL_UART_MspInit+0x10c>)
 8001fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fcc:	4a13      	ldr	r2, [pc, #76]	@ (800201c <HAL_UART_MspInit+0x10c>)
 8001fce:	f043 0301 	orr.w	r3, r3, #1
 8001fd2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fd4:	4b11      	ldr	r3, [pc, #68]	@ (800201c <HAL_UART_MspInit+0x10c>)
 8001fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	60fb      	str	r3, [r7, #12]
 8001fde:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001fe0:	230c      	movs	r3, #12
 8001fe2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fec:	2303      	movs	r3, #3
 8001fee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ff0:	2307      	movs	r3, #7
 8001ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff4:	f107 031c 	add.w	r3, r7, #28
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4809      	ldr	r0, [pc, #36]	@ (8002020 <HAL_UART_MspInit+0x110>)
 8001ffc:	f000 fa78 	bl	80024f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002000:	2200      	movs	r2, #0
 8002002:	2100      	movs	r1, #0
 8002004:	2026      	movs	r0, #38	@ 0x26
 8002006:	f000 f9aa 	bl	800235e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800200a:	2026      	movs	r0, #38	@ 0x26
 800200c:	f000 f9c3 	bl	8002396 <HAL_NVIC_EnableIRQ>
}
 8002010:	bf00      	nop
 8002012:	3730      	adds	r7, #48	@ 0x30
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40011000 	.word	0x40011000
 800201c:	40023800 	.word	0x40023800
 8002020:	40020000 	.word	0x40020000
 8002024:	40004400 	.word	0x40004400

08002028 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002028:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002060 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800202c:	f7ff fe66 	bl	8001cfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002030:	480c      	ldr	r0, [pc, #48]	@ (8002064 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002032:	490d      	ldr	r1, [pc, #52]	@ (8002068 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002034:	4a0d      	ldr	r2, [pc, #52]	@ (800206c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002036:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002038:	e002      	b.n	8002040 <LoopCopyDataInit>

0800203a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800203a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800203c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800203e:	3304      	adds	r3, #4

08002040 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002040:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002042:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002044:	d3f9      	bcc.n	800203a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002046:	4a0a      	ldr	r2, [pc, #40]	@ (8002070 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002048:	4c0a      	ldr	r4, [pc, #40]	@ (8002074 <LoopFillZerobss+0x22>)
  movs r3, #0
 800204a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800204c:	e001      	b.n	8002052 <LoopFillZerobss>

0800204e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800204e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002050:	3204      	adds	r2, #4

08002052 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002052:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002054:	d3fb      	bcc.n	800204e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002056:	f004 fad7 	bl	8006608 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800205a:	f7ff f939 	bl	80012d0 <main>
  bx  lr    
 800205e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002060:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002064:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002068:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800206c:	08008b18 	.word	0x08008b18
  ldr r2, =_sbss
 8002070:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002074:	200004b4 	.word	0x200004b4

08002078 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002078:	e7fe      	b.n	8002078 <ADC_IRQHandler>
	...

0800207c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002080:	4b0e      	ldr	r3, [pc, #56]	@ (80020bc <HAL_Init+0x40>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a0d      	ldr	r2, [pc, #52]	@ (80020bc <HAL_Init+0x40>)
 8002086:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800208a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800208c:	4b0b      	ldr	r3, [pc, #44]	@ (80020bc <HAL_Init+0x40>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a0a      	ldr	r2, [pc, #40]	@ (80020bc <HAL_Init+0x40>)
 8002092:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002096:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002098:	4b08      	ldr	r3, [pc, #32]	@ (80020bc <HAL_Init+0x40>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a07      	ldr	r2, [pc, #28]	@ (80020bc <HAL_Init+0x40>)
 800209e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020a4:	2003      	movs	r0, #3
 80020a6:	f000 f94f 	bl	8002348 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020aa:	200f      	movs	r0, #15
 80020ac:	f000 f808 	bl	80020c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020b0:	f7ff fce8 	bl	8001a84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	40023c00 	.word	0x40023c00

080020c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020c8:	4b12      	ldr	r3, [pc, #72]	@ (8002114 <HAL_InitTick+0x54>)
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	4b12      	ldr	r3, [pc, #72]	@ (8002118 <HAL_InitTick+0x58>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	4619      	mov	r1, r3
 80020d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80020da:	fbb2 f3f3 	udiv	r3, r2, r3
 80020de:	4618      	mov	r0, r3
 80020e0:	f000 f967 	bl	80023b2 <HAL_SYSTICK_Config>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e00e      	b.n	800210c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2b0f      	cmp	r3, #15
 80020f2:	d80a      	bhi.n	800210a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020f4:	2200      	movs	r2, #0
 80020f6:	6879      	ldr	r1, [r7, #4]
 80020f8:	f04f 30ff 	mov.w	r0, #4294967295
 80020fc:	f000 f92f 	bl	800235e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002100:	4a06      	ldr	r2, [pc, #24]	@ (800211c <HAL_InitTick+0x5c>)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002106:	2300      	movs	r3, #0
 8002108:	e000      	b.n	800210c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
}
 800210c:	4618      	mov	r0, r3
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	20000004 	.word	0x20000004
 8002118:	2000000c 	.word	0x2000000c
 800211c:	20000008 	.word	0x20000008

08002120 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002124:	4b06      	ldr	r3, [pc, #24]	@ (8002140 <HAL_IncTick+0x20>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	461a      	mov	r2, r3
 800212a:	4b06      	ldr	r3, [pc, #24]	@ (8002144 <HAL_IncTick+0x24>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4413      	add	r3, r2
 8002130:	4a04      	ldr	r2, [pc, #16]	@ (8002144 <HAL_IncTick+0x24>)
 8002132:	6013      	str	r3, [r2, #0]
}
 8002134:	bf00      	nop
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	2000000c 	.word	0x2000000c
 8002144:	20000364 	.word	0x20000364

08002148 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  return uwTick;
 800214c:	4b03      	ldr	r3, [pc, #12]	@ (800215c <HAL_GetTick+0x14>)
 800214e:	681b      	ldr	r3, [r3, #0]
}
 8002150:	4618      	mov	r0, r3
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	20000364 	.word	0x20000364

08002160 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002168:	f7ff ffee 	bl	8002148 <HAL_GetTick>
 800216c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002178:	d005      	beq.n	8002186 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800217a:	4b0a      	ldr	r3, [pc, #40]	@ (80021a4 <HAL_Delay+0x44>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	461a      	mov	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	4413      	add	r3, r2
 8002184:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002186:	bf00      	nop
 8002188:	f7ff ffde 	bl	8002148 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	429a      	cmp	r2, r3
 8002196:	d8f7      	bhi.n	8002188 <HAL_Delay+0x28>
  {
  }
}
 8002198:	bf00      	nop
 800219a:	bf00      	nop
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	2000000c 	.word	0x2000000c

080021a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021b8:	4b0c      	ldr	r3, [pc, #48]	@ (80021ec <__NVIC_SetPriorityGrouping+0x44>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021be:	68ba      	ldr	r2, [r7, #8]
 80021c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021c4:	4013      	ands	r3, r2
 80021c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021da:	4a04      	ldr	r2, [pc, #16]	@ (80021ec <__NVIC_SetPriorityGrouping+0x44>)
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	60d3      	str	r3, [r2, #12]
}
 80021e0:	bf00      	nop
 80021e2:	3714      	adds	r7, #20
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr
 80021ec:	e000ed00 	.word	0xe000ed00

080021f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021f4:	4b04      	ldr	r3, [pc, #16]	@ (8002208 <__NVIC_GetPriorityGrouping+0x18>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	0a1b      	lsrs	r3, r3, #8
 80021fa:	f003 0307 	and.w	r3, r3, #7
}
 80021fe:	4618      	mov	r0, r3
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr
 8002208:	e000ed00 	.word	0xe000ed00

0800220c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221a:	2b00      	cmp	r3, #0
 800221c:	db0b      	blt.n	8002236 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800221e:	79fb      	ldrb	r3, [r7, #7]
 8002220:	f003 021f 	and.w	r2, r3, #31
 8002224:	4907      	ldr	r1, [pc, #28]	@ (8002244 <__NVIC_EnableIRQ+0x38>)
 8002226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222a:	095b      	lsrs	r3, r3, #5
 800222c:	2001      	movs	r0, #1
 800222e:	fa00 f202 	lsl.w	r2, r0, r2
 8002232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	e000e100 	.word	0xe000e100

08002248 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	6039      	str	r1, [r7, #0]
 8002252:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002258:	2b00      	cmp	r3, #0
 800225a:	db0a      	blt.n	8002272 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	b2da      	uxtb	r2, r3
 8002260:	490c      	ldr	r1, [pc, #48]	@ (8002294 <__NVIC_SetPriority+0x4c>)
 8002262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002266:	0112      	lsls	r2, r2, #4
 8002268:	b2d2      	uxtb	r2, r2
 800226a:	440b      	add	r3, r1
 800226c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002270:	e00a      	b.n	8002288 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	b2da      	uxtb	r2, r3
 8002276:	4908      	ldr	r1, [pc, #32]	@ (8002298 <__NVIC_SetPriority+0x50>)
 8002278:	79fb      	ldrb	r3, [r7, #7]
 800227a:	f003 030f 	and.w	r3, r3, #15
 800227e:	3b04      	subs	r3, #4
 8002280:	0112      	lsls	r2, r2, #4
 8002282:	b2d2      	uxtb	r2, r2
 8002284:	440b      	add	r3, r1
 8002286:	761a      	strb	r2, [r3, #24]
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr
 8002294:	e000e100 	.word	0xe000e100
 8002298:	e000ed00 	.word	0xe000ed00

0800229c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800229c:	b480      	push	{r7}
 800229e:	b089      	sub	sp, #36	@ 0x24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f003 0307 	and.w	r3, r3, #7
 80022ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	f1c3 0307 	rsb	r3, r3, #7
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	bf28      	it	cs
 80022ba:	2304      	movcs	r3, #4
 80022bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	3304      	adds	r3, #4
 80022c2:	2b06      	cmp	r3, #6
 80022c4:	d902      	bls.n	80022cc <NVIC_EncodePriority+0x30>
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	3b03      	subs	r3, #3
 80022ca:	e000      	b.n	80022ce <NVIC_EncodePriority+0x32>
 80022cc:	2300      	movs	r3, #0
 80022ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d0:	f04f 32ff 	mov.w	r2, #4294967295
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	43da      	mvns	r2, r3
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	401a      	ands	r2, r3
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022e4:	f04f 31ff 	mov.w	r1, #4294967295
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	fa01 f303 	lsl.w	r3, r1, r3
 80022ee:	43d9      	mvns	r1, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f4:	4313      	orrs	r3, r2
         );
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3724      	adds	r7, #36	@ 0x24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
	...

08002304 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	3b01      	subs	r3, #1
 8002310:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002314:	d301      	bcc.n	800231a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002316:	2301      	movs	r3, #1
 8002318:	e00f      	b.n	800233a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800231a:	4a0a      	ldr	r2, [pc, #40]	@ (8002344 <SysTick_Config+0x40>)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	3b01      	subs	r3, #1
 8002320:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002322:	210f      	movs	r1, #15
 8002324:	f04f 30ff 	mov.w	r0, #4294967295
 8002328:	f7ff ff8e 	bl	8002248 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800232c:	4b05      	ldr	r3, [pc, #20]	@ (8002344 <SysTick_Config+0x40>)
 800232e:	2200      	movs	r2, #0
 8002330:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002332:	4b04      	ldr	r3, [pc, #16]	@ (8002344 <SysTick_Config+0x40>)
 8002334:	2207      	movs	r2, #7
 8002336:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	e000e010 	.word	0xe000e010

08002348 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f7ff ff29 	bl	80021a8 <__NVIC_SetPriorityGrouping>
}
 8002356:	bf00      	nop
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800235e:	b580      	push	{r7, lr}
 8002360:	b086      	sub	sp, #24
 8002362:	af00      	add	r7, sp, #0
 8002364:	4603      	mov	r3, r0
 8002366:	60b9      	str	r1, [r7, #8]
 8002368:	607a      	str	r2, [r7, #4]
 800236a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800236c:	2300      	movs	r3, #0
 800236e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002370:	f7ff ff3e 	bl	80021f0 <__NVIC_GetPriorityGrouping>
 8002374:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	68b9      	ldr	r1, [r7, #8]
 800237a:	6978      	ldr	r0, [r7, #20]
 800237c:	f7ff ff8e 	bl	800229c <NVIC_EncodePriority>
 8002380:	4602      	mov	r2, r0
 8002382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002386:	4611      	mov	r1, r2
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff ff5d 	bl	8002248 <__NVIC_SetPriority>
}
 800238e:	bf00      	nop
 8002390:	3718      	adds	r7, #24
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b082      	sub	sp, #8
 800239a:	af00      	add	r7, sp, #0
 800239c:	4603      	mov	r3, r0
 800239e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff ff31 	bl	800220c <__NVIC_EnableIRQ>
}
 80023aa:	bf00      	nop
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b082      	sub	sp, #8
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7ff ffa2 	bl	8002304 <SysTick_Config>
 80023c0:	4603      	mov	r3, r0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b084      	sub	sp, #16
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80023d8:	f7ff feb6 	bl	8002148 <HAL_GetTick>
 80023dc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d008      	beq.n	80023fc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2280      	movs	r2, #128	@ 0x80
 80023ee:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e052      	b.n	80024a2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 0216 	bic.w	r2, r2, #22
 800240a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	695a      	ldr	r2, [r3, #20]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800241a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002420:	2b00      	cmp	r3, #0
 8002422:	d103      	bne.n	800242c <HAL_DMA_Abort+0x62>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002428:	2b00      	cmp	r3, #0
 800242a:	d007      	beq.n	800243c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f022 0208 	bic.w	r2, r2, #8
 800243a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f022 0201 	bic.w	r2, r2, #1
 800244a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800244c:	e013      	b.n	8002476 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800244e:	f7ff fe7b 	bl	8002148 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b05      	cmp	r3, #5
 800245a:	d90c      	bls.n	8002476 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2220      	movs	r2, #32
 8002460:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2203      	movs	r2, #3
 8002466:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e015      	b.n	80024a2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1e4      	bne.n	800244e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002488:	223f      	movs	r2, #63	@ 0x3f
 800248a:	409a      	lsls	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b083      	sub	sp, #12
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d004      	beq.n	80024c8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2280      	movs	r2, #128	@ 0x80
 80024c2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e00c      	b.n	80024e2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2205      	movs	r2, #5
 80024cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f022 0201 	bic.w	r2, r2, #1
 80024de:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
	...

080024f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b089      	sub	sp, #36	@ 0x24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024fe:	2300      	movs	r3, #0
 8002500:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002502:	2300      	movs	r3, #0
 8002504:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002506:	2300      	movs	r3, #0
 8002508:	61fb      	str	r3, [r7, #28]
 800250a:	e159      	b.n	80027c0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800250c:	2201      	movs	r2, #1
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	697a      	ldr	r2, [r7, #20]
 800251c:	4013      	ands	r3, r2
 800251e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	429a      	cmp	r2, r3
 8002526:	f040 8148 	bne.w	80027ba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f003 0303 	and.w	r3, r3, #3
 8002532:	2b01      	cmp	r3, #1
 8002534:	d005      	beq.n	8002542 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800253e:	2b02      	cmp	r3, #2
 8002540:	d130      	bne.n	80025a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	2203      	movs	r2, #3
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	43db      	mvns	r3, r3
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	4013      	ands	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	68da      	ldr	r2, [r3, #12]
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4313      	orrs	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002578:	2201      	movs	r2, #1
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	43db      	mvns	r3, r3
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4013      	ands	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	091b      	lsrs	r3, r3, #4
 800258e:	f003 0201 	and.w	r2, r3, #1
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4313      	orrs	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 0303 	and.w	r3, r3, #3
 80025ac:	2b03      	cmp	r3, #3
 80025ae:	d017      	beq.n	80025e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	2203      	movs	r2, #3
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	43db      	mvns	r3, r3
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	4013      	ands	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	689a      	ldr	r2, [r3, #8]
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f003 0303 	and.w	r3, r3, #3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d123      	bne.n	8002634 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	08da      	lsrs	r2, r3, #3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	3208      	adds	r2, #8
 80025f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	f003 0307 	and.w	r3, r3, #7
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	220f      	movs	r2, #15
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	43db      	mvns	r3, r3
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	4013      	ands	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	691a      	ldr	r2, [r3, #16]
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	4313      	orrs	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	08da      	lsrs	r2, r3, #3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	3208      	adds	r2, #8
 800262e:	69b9      	ldr	r1, [r7, #24]
 8002630:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	2203      	movs	r2, #3
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	43db      	mvns	r3, r3
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	4013      	ands	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f003 0203 	and.w	r2, r3, #3
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	4313      	orrs	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002670:	2b00      	cmp	r3, #0
 8002672:	f000 80a2 	beq.w	80027ba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002676:	2300      	movs	r3, #0
 8002678:	60fb      	str	r3, [r7, #12]
 800267a:	4b57      	ldr	r3, [pc, #348]	@ (80027d8 <HAL_GPIO_Init+0x2e8>)
 800267c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800267e:	4a56      	ldr	r2, [pc, #344]	@ (80027d8 <HAL_GPIO_Init+0x2e8>)
 8002680:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002684:	6453      	str	r3, [r2, #68]	@ 0x44
 8002686:	4b54      	ldr	r3, [pc, #336]	@ (80027d8 <HAL_GPIO_Init+0x2e8>)
 8002688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800268a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800268e:	60fb      	str	r3, [r7, #12]
 8002690:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002692:	4a52      	ldr	r2, [pc, #328]	@ (80027dc <HAL_GPIO_Init+0x2ec>)
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	089b      	lsrs	r3, r3, #2
 8002698:	3302      	adds	r3, #2
 800269a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800269e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	f003 0303 	and.w	r3, r3, #3
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	220f      	movs	r2, #15
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	43db      	mvns	r3, r3
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	4013      	ands	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a49      	ldr	r2, [pc, #292]	@ (80027e0 <HAL_GPIO_Init+0x2f0>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d019      	beq.n	80026f2 <HAL_GPIO_Init+0x202>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a48      	ldr	r2, [pc, #288]	@ (80027e4 <HAL_GPIO_Init+0x2f4>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d013      	beq.n	80026ee <HAL_GPIO_Init+0x1fe>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a47      	ldr	r2, [pc, #284]	@ (80027e8 <HAL_GPIO_Init+0x2f8>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d00d      	beq.n	80026ea <HAL_GPIO_Init+0x1fa>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a46      	ldr	r2, [pc, #280]	@ (80027ec <HAL_GPIO_Init+0x2fc>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d007      	beq.n	80026e6 <HAL_GPIO_Init+0x1f6>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a45      	ldr	r2, [pc, #276]	@ (80027f0 <HAL_GPIO_Init+0x300>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d101      	bne.n	80026e2 <HAL_GPIO_Init+0x1f2>
 80026de:	2304      	movs	r3, #4
 80026e0:	e008      	b.n	80026f4 <HAL_GPIO_Init+0x204>
 80026e2:	2307      	movs	r3, #7
 80026e4:	e006      	b.n	80026f4 <HAL_GPIO_Init+0x204>
 80026e6:	2303      	movs	r3, #3
 80026e8:	e004      	b.n	80026f4 <HAL_GPIO_Init+0x204>
 80026ea:	2302      	movs	r3, #2
 80026ec:	e002      	b.n	80026f4 <HAL_GPIO_Init+0x204>
 80026ee:	2301      	movs	r3, #1
 80026f0:	e000      	b.n	80026f4 <HAL_GPIO_Init+0x204>
 80026f2:	2300      	movs	r3, #0
 80026f4:	69fa      	ldr	r2, [r7, #28]
 80026f6:	f002 0203 	and.w	r2, r2, #3
 80026fa:	0092      	lsls	r2, r2, #2
 80026fc:	4093      	lsls	r3, r2
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4313      	orrs	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002704:	4935      	ldr	r1, [pc, #212]	@ (80027dc <HAL_GPIO_Init+0x2ec>)
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	089b      	lsrs	r3, r3, #2
 800270a:	3302      	adds	r3, #2
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002712:	4b38      	ldr	r3, [pc, #224]	@ (80027f4 <HAL_GPIO_Init+0x304>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	43db      	mvns	r3, r3
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	4013      	ands	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	4313      	orrs	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002736:	4a2f      	ldr	r2, [pc, #188]	@ (80027f4 <HAL_GPIO_Init+0x304>)
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800273c:	4b2d      	ldr	r3, [pc, #180]	@ (80027f4 <HAL_GPIO_Init+0x304>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	43db      	mvns	r3, r3
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4013      	ands	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d003      	beq.n	8002760 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	4313      	orrs	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002760:	4a24      	ldr	r2, [pc, #144]	@ (80027f4 <HAL_GPIO_Init+0x304>)
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002766:	4b23      	ldr	r3, [pc, #140]	@ (80027f4 <HAL_GPIO_Init+0x304>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	43db      	mvns	r3, r3
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	4013      	ands	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	4313      	orrs	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800278a:	4a1a      	ldr	r2, [pc, #104]	@ (80027f4 <HAL_GPIO_Init+0x304>)
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002790:	4b18      	ldr	r3, [pc, #96]	@ (80027f4 <HAL_GPIO_Init+0x304>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	43db      	mvns	r3, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4013      	ands	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d003      	beq.n	80027b4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027b4:	4a0f      	ldr	r2, [pc, #60]	@ (80027f4 <HAL_GPIO_Init+0x304>)
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	3301      	adds	r3, #1
 80027be:	61fb      	str	r3, [r7, #28]
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	2b0f      	cmp	r3, #15
 80027c4:	f67f aea2 	bls.w	800250c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027c8:	bf00      	nop
 80027ca:	bf00      	nop
 80027cc:	3724      	adds	r7, #36	@ 0x24
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	40023800 	.word	0x40023800
 80027dc:	40013800 	.word	0x40013800
 80027e0:	40020000 	.word	0x40020000
 80027e4:	40020400 	.word	0x40020400
 80027e8:	40020800 	.word	0x40020800
 80027ec:	40020c00 	.word	0x40020c00
 80027f0:	40021000 	.word	0x40021000
 80027f4:	40013c00 	.word	0x40013c00

080027f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	460b      	mov	r3, r1
 8002802:	807b      	strh	r3, [r7, #2]
 8002804:	4613      	mov	r3, r2
 8002806:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002808:	787b      	ldrb	r3, [r7, #1]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d003      	beq.n	8002816 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800280e:	887a      	ldrh	r2, [r7, #2]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002814:	e003      	b.n	800281e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002816:	887b      	ldrh	r3, [r7, #2]
 8002818:	041a      	lsls	r2, r3, #16
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	619a      	str	r2, [r3, #24]
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
	...

0800282c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e12b      	b.n	8002a96 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d106      	bne.n	8002858 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f7fe fce0 	bl	8001218 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2224      	movs	r2, #36	@ 0x24
 800285c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 0201 	bic.w	r2, r2, #1
 800286e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800287e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800288e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002890:	f001 fc36 	bl	8004100 <HAL_RCC_GetPCLK1Freq>
 8002894:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	4a81      	ldr	r2, [pc, #516]	@ (8002aa0 <HAL_I2C_Init+0x274>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d807      	bhi.n	80028b0 <HAL_I2C_Init+0x84>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	4a80      	ldr	r2, [pc, #512]	@ (8002aa4 <HAL_I2C_Init+0x278>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	bf94      	ite	ls
 80028a8:	2301      	movls	r3, #1
 80028aa:	2300      	movhi	r3, #0
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	e006      	b.n	80028be <HAL_I2C_Init+0x92>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	4a7d      	ldr	r2, [pc, #500]	@ (8002aa8 <HAL_I2C_Init+0x27c>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	bf94      	ite	ls
 80028b8:	2301      	movls	r3, #1
 80028ba:	2300      	movhi	r3, #0
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e0e7      	b.n	8002a96 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	4a78      	ldr	r2, [pc, #480]	@ (8002aac <HAL_I2C_Init+0x280>)
 80028ca:	fba2 2303 	umull	r2, r3, r2, r3
 80028ce:	0c9b      	lsrs	r3, r3, #18
 80028d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68ba      	ldr	r2, [r7, #8]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	4a6a      	ldr	r2, [pc, #424]	@ (8002aa0 <HAL_I2C_Init+0x274>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d802      	bhi.n	8002900 <HAL_I2C_Init+0xd4>
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	3301      	adds	r3, #1
 80028fe:	e009      	b.n	8002914 <HAL_I2C_Init+0xe8>
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002906:	fb02 f303 	mul.w	r3, r2, r3
 800290a:	4a69      	ldr	r2, [pc, #420]	@ (8002ab0 <HAL_I2C_Init+0x284>)
 800290c:	fba2 2303 	umull	r2, r3, r2, r3
 8002910:	099b      	lsrs	r3, r3, #6
 8002912:	3301      	adds	r3, #1
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	6812      	ldr	r2, [r2, #0]
 8002918:	430b      	orrs	r3, r1
 800291a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002926:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	495c      	ldr	r1, [pc, #368]	@ (8002aa0 <HAL_I2C_Init+0x274>)
 8002930:	428b      	cmp	r3, r1
 8002932:	d819      	bhi.n	8002968 <HAL_I2C_Init+0x13c>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	1e59      	subs	r1, r3, #1
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002942:	1c59      	adds	r1, r3, #1
 8002944:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002948:	400b      	ands	r3, r1
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00a      	beq.n	8002964 <HAL_I2C_Init+0x138>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	1e59      	subs	r1, r3, #1
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	fbb1 f3f3 	udiv	r3, r1, r3
 800295c:	3301      	adds	r3, #1
 800295e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002962:	e051      	b.n	8002a08 <HAL_I2C_Init+0x1dc>
 8002964:	2304      	movs	r3, #4
 8002966:	e04f      	b.n	8002a08 <HAL_I2C_Init+0x1dc>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d111      	bne.n	8002994 <HAL_I2C_Init+0x168>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	1e58      	subs	r0, r3, #1
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6859      	ldr	r1, [r3, #4]
 8002978:	460b      	mov	r3, r1
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	440b      	add	r3, r1
 800297e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002982:	3301      	adds	r3, #1
 8002984:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002988:	2b00      	cmp	r3, #0
 800298a:	bf0c      	ite	eq
 800298c:	2301      	moveq	r3, #1
 800298e:	2300      	movne	r3, #0
 8002990:	b2db      	uxtb	r3, r3
 8002992:	e012      	b.n	80029ba <HAL_I2C_Init+0x18e>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	1e58      	subs	r0, r3, #1
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6859      	ldr	r1, [r3, #4]
 800299c:	460b      	mov	r3, r1
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	440b      	add	r3, r1
 80029a2:	0099      	lsls	r1, r3, #2
 80029a4:	440b      	add	r3, r1
 80029a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80029aa:	3301      	adds	r3, #1
 80029ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	bf0c      	ite	eq
 80029b4:	2301      	moveq	r3, #1
 80029b6:	2300      	movne	r3, #0
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <HAL_I2C_Init+0x196>
 80029be:	2301      	movs	r3, #1
 80029c0:	e022      	b.n	8002a08 <HAL_I2C_Init+0x1dc>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d10e      	bne.n	80029e8 <HAL_I2C_Init+0x1bc>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	1e58      	subs	r0, r3, #1
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6859      	ldr	r1, [r3, #4]
 80029d2:	460b      	mov	r3, r1
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	440b      	add	r3, r1
 80029d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80029dc:	3301      	adds	r3, #1
 80029de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029e6:	e00f      	b.n	8002a08 <HAL_I2C_Init+0x1dc>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	1e58      	subs	r0, r3, #1
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6859      	ldr	r1, [r3, #4]
 80029f0:	460b      	mov	r3, r1
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	0099      	lsls	r1, r3, #2
 80029f8:	440b      	add	r3, r1
 80029fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80029fe:	3301      	adds	r3, #1
 8002a00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a04:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	6809      	ldr	r1, [r1, #0]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	69da      	ldr	r2, [r3, #28]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	431a      	orrs	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002a36:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	6911      	ldr	r1, [r2, #16]
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	68d2      	ldr	r2, [r2, #12]
 8002a42:	4311      	orrs	r1, r2
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	6812      	ldr	r2, [r2, #0]
 8002a48:	430b      	orrs	r3, r1
 8002a4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	695a      	ldr	r2, [r3, #20]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	430a      	orrs	r2, r1
 8002a66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f042 0201 	orr.w	r2, r2, #1
 8002a76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2220      	movs	r2, #32
 8002a82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	000186a0 	.word	0x000186a0
 8002aa4:	001e847f 	.word	0x001e847f
 8002aa8:	003d08ff 	.word	0x003d08ff
 8002aac:	431bde83 	.word	0x431bde83
 8002ab0:	10624dd3 	.word	0x10624dd3

08002ab4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b088      	sub	sp, #32
 8002ab8:	af02      	add	r7, sp, #8
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	607a      	str	r2, [r7, #4]
 8002abe:	461a      	mov	r2, r3
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	817b      	strh	r3, [r7, #10]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ac8:	f7ff fb3e 	bl	8002148 <HAL_GetTick>
 8002acc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b20      	cmp	r3, #32
 8002ad8:	f040 80e0 	bne.w	8002c9c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	9300      	str	r3, [sp, #0]
 8002ae0:	2319      	movs	r3, #25
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	4970      	ldr	r1, [pc, #448]	@ (8002ca8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	f000 fc64 	bl	80033b4 <I2C_WaitOnFlagUntilTimeout>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002af2:	2302      	movs	r3, #2
 8002af4:	e0d3      	b.n	8002c9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d101      	bne.n	8002b04 <HAL_I2C_Master_Transmit+0x50>
 8002b00:	2302      	movs	r3, #2
 8002b02:	e0cc      	b.n	8002c9e <HAL_I2C_Master_Transmit+0x1ea>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d007      	beq.n	8002b2a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f042 0201 	orr.w	r2, r2, #1
 8002b28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b38:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2221      	movs	r2, #33	@ 0x21
 8002b3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2210      	movs	r2, #16
 8002b46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	893a      	ldrh	r2, [r7, #8]
 8002b5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	4a50      	ldr	r2, [pc, #320]	@ (8002cac <HAL_I2C_Master_Transmit+0x1f8>)
 8002b6a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b6c:	8979      	ldrh	r1, [r7, #10]
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	6a3a      	ldr	r2, [r7, #32]
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f000 face 	bl	8003114 <I2C_MasterRequestWrite>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e08d      	b.n	8002c9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b82:	2300      	movs	r3, #0
 8002b84:	613b      	str	r3, [r7, #16]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	613b      	str	r3, [r7, #16]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	613b      	str	r3, [r7, #16]
 8002b96:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002b98:	e066      	b.n	8002c68 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b9a:	697a      	ldr	r2, [r7, #20]
 8002b9c:	6a39      	ldr	r1, [r7, #32]
 8002b9e:	68f8      	ldr	r0, [r7, #12]
 8002ba0:	f000 fd22 	bl	80035e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00d      	beq.n	8002bc6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	d107      	bne.n	8002bc2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bc0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e06b      	b.n	8002c9e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bca:	781a      	ldrb	r2, [r3, #0]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd6:	1c5a      	adds	r2, r3, #1
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	3b01      	subs	r3, #1
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	b29a      	uxth	r2, r3
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	695b      	ldr	r3, [r3, #20]
 8002bfc:	f003 0304 	and.w	r3, r3, #4
 8002c00:	2b04      	cmp	r3, #4
 8002c02:	d11b      	bne.n	8002c3c <HAL_I2C_Master_Transmit+0x188>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d017      	beq.n	8002c3c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c10:	781a      	ldrb	r2, [r3, #0]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1c:	1c5a      	adds	r2, r3, #1
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c34:	3b01      	subs	r3, #1
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c3c:	697a      	ldr	r2, [r7, #20]
 8002c3e:	6a39      	ldr	r1, [r7, #32]
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f000 fd19 	bl	8003678 <I2C_WaitOnBTFFlagUntilTimeout>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00d      	beq.n	8002c68 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c50:	2b04      	cmp	r3, #4
 8002c52:	d107      	bne.n	8002c64 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c62:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e01a      	b.n	8002c9e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d194      	bne.n	8002b9a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2220      	movs	r2, #32
 8002c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	e000      	b.n	8002c9e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002c9c:	2302      	movs	r3, #2
  }
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3718      	adds	r7, #24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	00100002 	.word	0x00100002
 8002cac:	ffff0000 	.word	0xffff0000

08002cb0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b08c      	sub	sp, #48	@ 0x30
 8002cb4:	af02      	add	r7, sp, #8
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	607a      	str	r2, [r7, #4]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	817b      	strh	r3, [r7, #10]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002cc4:	f7ff fa40 	bl	8002148 <HAL_GetTick>
 8002cc8:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b20      	cmp	r3, #32
 8002cd4:	f040 8217 	bne.w	8003106 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cda:	9300      	str	r3, [sp, #0]
 8002cdc:	2319      	movs	r3, #25
 8002cde:	2201      	movs	r2, #1
 8002ce0:	497c      	ldr	r1, [pc, #496]	@ (8002ed4 <HAL_I2C_Master_Receive+0x224>)
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f000 fb66 	bl	80033b4 <I2C_WaitOnFlagUntilTimeout>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002cee:	2302      	movs	r3, #2
 8002cf0:	e20a      	b.n	8003108 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d101      	bne.n	8002d00 <HAL_I2C_Master_Receive+0x50>
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	e203      	b.n	8003108 <HAL_I2C_Master_Receive+0x458>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d007      	beq.n	8002d26 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f042 0201 	orr.w	r2, r2, #1
 8002d24:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d34:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2222      	movs	r2, #34	@ 0x22
 8002d3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2210      	movs	r2, #16
 8002d42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	893a      	ldrh	r2, [r7, #8]
 8002d56:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	4a5c      	ldr	r2, [pc, #368]	@ (8002ed8 <HAL_I2C_Master_Receive+0x228>)
 8002d66:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d68:	8979      	ldrh	r1, [r7, #10]
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f000 fa52 	bl	8003218 <I2C_MasterRequestRead>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e1c4      	b.n	8003108 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d113      	bne.n	8002dae <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d86:	2300      	movs	r3, #0
 8002d88:	623b      	str	r3, [r7, #32]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	623b      	str	r3, [r7, #32]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	623b      	str	r3, [r7, #32]
 8002d9a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002daa:	601a      	str	r2, [r3, #0]
 8002dac:	e198      	b.n	80030e0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d11b      	bne.n	8002dee <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dc4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	61fb      	str	r3, [r7, #28]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	61fb      	str	r3, [r7, #28]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	61fb      	str	r3, [r7, #28]
 8002dda:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	e178      	b.n	80030e0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d11b      	bne.n	8002e2e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e04:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e14:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e16:	2300      	movs	r3, #0
 8002e18:	61bb      	str	r3, [r7, #24]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	695b      	ldr	r3, [r3, #20]
 8002e20:	61bb      	str	r3, [r7, #24]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	61bb      	str	r3, [r7, #24]
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	e158      	b.n	80030e0 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002e3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e3e:	2300      	movs	r3, #0
 8002e40:	617b      	str	r3, [r7, #20]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	617b      	str	r3, [r7, #20]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	617b      	str	r3, [r7, #20]
 8002e52:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002e54:	e144      	b.n	80030e0 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e5a:	2b03      	cmp	r3, #3
 8002e5c:	f200 80f1 	bhi.w	8003042 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d123      	bne.n	8002eb0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e6a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f000 fc4b 	bl	8003708 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e145      	b.n	8003108 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	691a      	ldr	r2, [r3, #16]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e86:	b2d2      	uxtb	r2, r2
 8002e88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8e:	1c5a      	adds	r2, r3, #1
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	b29a      	uxth	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002eae:	e117      	b.n	80030e0 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d14e      	bne.n	8002f56 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eba:	9300      	str	r3, [sp, #0]
 8002ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	4906      	ldr	r1, [pc, #24]	@ (8002edc <HAL_I2C_Master_Receive+0x22c>)
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f000 fa76 	bl	80033b4 <I2C_WaitOnFlagUntilTimeout>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d008      	beq.n	8002ee0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e11a      	b.n	8003108 <HAL_I2C_Master_Receive+0x458>
 8002ed2:	bf00      	nop
 8002ed4:	00100002 	.word	0x00100002
 8002ed8:	ffff0000 	.word	0xffff0000
 8002edc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002eee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	691a      	ldr	r2, [r3, #16]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efa:	b2d2      	uxtb	r2, r2
 8002efc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f02:	1c5a      	adds	r2, r3, #1
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	691a      	ldr	r2, [r3, #16]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f2c:	b2d2      	uxtb	r2, r2
 8002f2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f34:	1c5a      	adds	r2, r3, #1
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f54:	e0c4      	b.n	80030e0 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f58:	9300      	str	r3, [sp, #0]
 8002f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	496c      	ldr	r1, [pc, #432]	@ (8003110 <HAL_I2C_Master_Receive+0x460>)
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f000 fa27 	bl	80033b4 <I2C_WaitOnFlagUntilTimeout>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e0cb      	b.n	8003108 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	691a      	ldr	r2, [r3, #16]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f8a:	b2d2      	uxtb	r2, r2
 8002f8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f92:	1c5a      	adds	r2, r3, #1
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	3b01      	subs	r3, #1
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb4:	9300      	str	r3, [sp, #0]
 8002fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fb8:	2200      	movs	r2, #0
 8002fba:	4955      	ldr	r1, [pc, #340]	@ (8003110 <HAL_I2C_Master_Receive+0x460>)
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f000 f9f9 	bl	80033b4 <I2C_WaitOnFlagUntilTimeout>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d001      	beq.n	8002fcc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e09d      	b.n	8003108 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	691a      	ldr	r2, [r3, #16]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe6:	b2d2      	uxtb	r2, r2
 8002fe8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fee:	1c5a      	adds	r2, r3, #1
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003004:	b29b      	uxth	r3, r3
 8003006:	3b01      	subs	r3, #1
 8003008:	b29a      	uxth	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	691a      	ldr	r2, [r3, #16]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003018:	b2d2      	uxtb	r2, r2
 800301a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003020:	1c5a      	adds	r2, r3, #1
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800302a:	3b01      	subs	r3, #1
 800302c:	b29a      	uxth	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003036:	b29b      	uxth	r3, r3
 8003038:	3b01      	subs	r3, #1
 800303a:	b29a      	uxth	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003040:	e04e      	b.n	80030e0 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003042:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003044:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f000 fb5e 	bl	8003708 <I2C_WaitOnRXNEFlagUntilTimeout>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e058      	b.n	8003108 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	691a      	ldr	r2, [r3, #16]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003060:	b2d2      	uxtb	r2, r2
 8003062:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003068:	1c5a      	adds	r2, r3, #1
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003072:	3b01      	subs	r3, #1
 8003074:	b29a      	uxth	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800307e:	b29b      	uxth	r3, r3
 8003080:	3b01      	subs	r3, #1
 8003082:	b29a      	uxth	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	f003 0304 	and.w	r3, r3, #4
 8003092:	2b04      	cmp	r3, #4
 8003094:	d124      	bne.n	80030e0 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800309a:	2b03      	cmp	r3, #3
 800309c:	d107      	bne.n	80030ae <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030ac:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	691a      	ldr	r2, [r3, #16]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b8:	b2d2      	uxtb	r2, r2
 80030ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c0:	1c5a      	adds	r2, r3, #1
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ca:	3b01      	subs	r3, #1
 80030cc:	b29a      	uxth	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	3b01      	subs	r3, #1
 80030da:	b29a      	uxth	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	f47f aeb6 	bne.w	8002e56 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2220      	movs	r2, #32
 80030ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003102:	2300      	movs	r3, #0
 8003104:	e000      	b.n	8003108 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003106:	2302      	movs	r3, #2
  }
}
 8003108:	4618      	mov	r0, r3
 800310a:	3728      	adds	r7, #40	@ 0x28
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	00010004 	.word	0x00010004

08003114 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b088      	sub	sp, #32
 8003118:	af02      	add	r7, sp, #8
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	607a      	str	r2, [r7, #4]
 800311e:	603b      	str	r3, [r7, #0]
 8003120:	460b      	mov	r3, r1
 8003122:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003128:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	2b08      	cmp	r3, #8
 800312e:	d006      	beq.n	800313e <I2C_MasterRequestWrite+0x2a>
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d003      	beq.n	800313e <I2C_MasterRequestWrite+0x2a>
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800313c:	d108      	bne.n	8003150 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800314c:	601a      	str	r2, [r3, #0]
 800314e:	e00b      	b.n	8003168 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003154:	2b12      	cmp	r3, #18
 8003156:	d107      	bne.n	8003168 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003166:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	9300      	str	r3, [sp, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003174:	68f8      	ldr	r0, [r7, #12]
 8003176:	f000 f91d 	bl	80033b4 <I2C_WaitOnFlagUntilTimeout>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00d      	beq.n	800319c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800318a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800318e:	d103      	bne.n	8003198 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003196:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e035      	b.n	8003208 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80031a4:	d108      	bne.n	80031b8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031a6:	897b      	ldrh	r3, [r7, #10]
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	461a      	mov	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80031b4:	611a      	str	r2, [r3, #16]
 80031b6:	e01b      	b.n	80031f0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80031b8:	897b      	ldrh	r3, [r7, #10]
 80031ba:	11db      	asrs	r3, r3, #7
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	f003 0306 	and.w	r3, r3, #6
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	f063 030f 	orn	r3, r3, #15
 80031c8:	b2da      	uxtb	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	490e      	ldr	r1, [pc, #56]	@ (8003210 <I2C_MasterRequestWrite+0xfc>)
 80031d6:	68f8      	ldr	r0, [r7, #12]
 80031d8:	f000 f966 	bl	80034a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d001      	beq.n	80031e6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e010      	b.n	8003208 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80031e6:	897b      	ldrh	r3, [r7, #10]
 80031e8:	b2da      	uxtb	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	4907      	ldr	r1, [pc, #28]	@ (8003214 <I2C_MasterRequestWrite+0x100>)
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f000 f956 	bl	80034a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e000      	b.n	8003208 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3718      	adds	r7, #24
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	00010008 	.word	0x00010008
 8003214:	00010002 	.word	0x00010002

08003218 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b088      	sub	sp, #32
 800321c:	af02      	add	r7, sp, #8
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	607a      	str	r2, [r7, #4]
 8003222:	603b      	str	r3, [r7, #0]
 8003224:	460b      	mov	r3, r1
 8003226:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800322c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800323c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	2b08      	cmp	r3, #8
 8003242:	d006      	beq.n	8003252 <I2C_MasterRequestRead+0x3a>
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d003      	beq.n	8003252 <I2C_MasterRequestRead+0x3a>
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003250:	d108      	bne.n	8003264 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	e00b      	b.n	800327c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003268:	2b11      	cmp	r3, #17
 800326a:	d107      	bne.n	800327c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800327a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	9300      	str	r3, [sp, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003288:	68f8      	ldr	r0, [r7, #12]
 800328a:	f000 f893 	bl	80033b4 <I2C_WaitOnFlagUntilTimeout>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00d      	beq.n	80032b0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800329e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032a2:	d103      	bne.n	80032ac <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032aa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e079      	b.n	80033a4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80032b8:	d108      	bne.n	80032cc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80032ba:	897b      	ldrh	r3, [r7, #10]
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	f043 0301 	orr.w	r3, r3, #1
 80032c2:	b2da      	uxtb	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	611a      	str	r2, [r3, #16]
 80032ca:	e05f      	b.n	800338c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80032cc:	897b      	ldrh	r3, [r7, #10]
 80032ce:	11db      	asrs	r3, r3, #7
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	f003 0306 	and.w	r3, r3, #6
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	f063 030f 	orn	r3, r3, #15
 80032dc:	b2da      	uxtb	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	4930      	ldr	r1, [pc, #192]	@ (80033ac <I2C_MasterRequestRead+0x194>)
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	f000 f8dc 	bl	80034a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e054      	b.n	80033a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80032fa:	897b      	ldrh	r3, [r7, #10]
 80032fc:	b2da      	uxtb	r2, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	4929      	ldr	r1, [pc, #164]	@ (80033b0 <I2C_MasterRequestRead+0x198>)
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f000 f8cc 	bl	80034a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e044      	b.n	80033a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800331a:	2300      	movs	r3, #0
 800331c:	613b      	str	r3, [r7, #16]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	695b      	ldr	r3, [r3, #20]
 8003324:	613b      	str	r3, [r7, #16]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	613b      	str	r3, [r7, #16]
 800332e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800333e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	9300      	str	r3, [sp, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800334c:	68f8      	ldr	r0, [r7, #12]
 800334e:	f000 f831 	bl	80033b4 <I2C_WaitOnFlagUntilTimeout>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d00d      	beq.n	8003374 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003362:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003366:	d103      	bne.n	8003370 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800336e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e017      	b.n	80033a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003374:	897b      	ldrh	r3, [r7, #10]
 8003376:	11db      	asrs	r3, r3, #7
 8003378:	b2db      	uxtb	r3, r3
 800337a:	f003 0306 	and.w	r3, r3, #6
 800337e:	b2db      	uxtb	r3, r3
 8003380:	f063 030e 	orn	r3, r3, #14
 8003384:	b2da      	uxtb	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	4907      	ldr	r1, [pc, #28]	@ (80033b0 <I2C_MasterRequestRead+0x198>)
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f000 f888 	bl	80034a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e000      	b.n	80033a4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3718      	adds	r7, #24
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	00010008 	.word	0x00010008
 80033b0:	00010002 	.word	0x00010002

080033b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	603b      	str	r3, [r7, #0]
 80033c0:	4613      	mov	r3, r2
 80033c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033c4:	e048      	b.n	8003458 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033cc:	d044      	beq.n	8003458 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ce:	f7fe febb 	bl	8002148 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d302      	bcc.n	80033e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d139      	bne.n	8003458 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	0c1b      	lsrs	r3, r3, #16
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d10d      	bne.n	800340a <I2C_WaitOnFlagUntilTimeout+0x56>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	43da      	mvns	r2, r3
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	4013      	ands	r3, r2
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	bf0c      	ite	eq
 8003400:	2301      	moveq	r3, #1
 8003402:	2300      	movne	r3, #0
 8003404:	b2db      	uxtb	r3, r3
 8003406:	461a      	mov	r2, r3
 8003408:	e00c      	b.n	8003424 <I2C_WaitOnFlagUntilTimeout+0x70>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	43da      	mvns	r2, r3
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	4013      	ands	r3, r2
 8003416:	b29b      	uxth	r3, r3
 8003418:	2b00      	cmp	r3, #0
 800341a:	bf0c      	ite	eq
 800341c:	2301      	moveq	r3, #1
 800341e:	2300      	movne	r3, #0
 8003420:	b2db      	uxtb	r3, r3
 8003422:	461a      	mov	r2, r3
 8003424:	79fb      	ldrb	r3, [r7, #7]
 8003426:	429a      	cmp	r2, r3
 8003428:	d116      	bne.n	8003458 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2220      	movs	r2, #32
 8003434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003444:	f043 0220 	orr.w	r2, r3, #32
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e023      	b.n	80034a0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	0c1b      	lsrs	r3, r3, #16
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b01      	cmp	r3, #1
 8003460:	d10d      	bne.n	800347e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	695b      	ldr	r3, [r3, #20]
 8003468:	43da      	mvns	r2, r3
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	4013      	ands	r3, r2
 800346e:	b29b      	uxth	r3, r3
 8003470:	2b00      	cmp	r3, #0
 8003472:	bf0c      	ite	eq
 8003474:	2301      	moveq	r3, #1
 8003476:	2300      	movne	r3, #0
 8003478:	b2db      	uxtb	r3, r3
 800347a:	461a      	mov	r2, r3
 800347c:	e00c      	b.n	8003498 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	43da      	mvns	r2, r3
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	4013      	ands	r3, r2
 800348a:	b29b      	uxth	r3, r3
 800348c:	2b00      	cmp	r3, #0
 800348e:	bf0c      	ite	eq
 8003490:	2301      	moveq	r3, #1
 8003492:	2300      	movne	r3, #0
 8003494:	b2db      	uxtb	r3, r3
 8003496:	461a      	mov	r2, r3
 8003498:	79fb      	ldrb	r3, [r7, #7]
 800349a:	429a      	cmp	r2, r3
 800349c:	d093      	beq.n	80033c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3710      	adds	r7, #16
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
 80034b4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034b6:	e071      	b.n	800359c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034c6:	d123      	bne.n	8003510 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034d6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80034e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2220      	movs	r2, #32
 80034ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034fc:	f043 0204 	orr.w	r2, r3, #4
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e067      	b.n	80035e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003516:	d041      	beq.n	800359c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003518:	f7fe fe16 	bl	8002148 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	429a      	cmp	r2, r3
 8003526:	d302      	bcc.n	800352e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d136      	bne.n	800359c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	0c1b      	lsrs	r3, r3, #16
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b01      	cmp	r3, #1
 8003536:	d10c      	bne.n	8003552 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	43da      	mvns	r2, r3
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	4013      	ands	r3, r2
 8003544:	b29b      	uxth	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	bf14      	ite	ne
 800354a:	2301      	movne	r3, #1
 800354c:	2300      	moveq	r3, #0
 800354e:	b2db      	uxtb	r3, r3
 8003550:	e00b      	b.n	800356a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	43da      	mvns	r2, r3
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	4013      	ands	r3, r2
 800355e:	b29b      	uxth	r3, r3
 8003560:	2b00      	cmp	r3, #0
 8003562:	bf14      	ite	ne
 8003564:	2301      	movne	r3, #1
 8003566:	2300      	moveq	r3, #0
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b00      	cmp	r3, #0
 800356c:	d016      	beq.n	800359c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2220      	movs	r2, #32
 8003578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003588:	f043 0220 	orr.w	r2, r3, #32
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e021      	b.n	80035e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	0c1b      	lsrs	r3, r3, #16
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d10c      	bne.n	80035c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	43da      	mvns	r2, r3
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	4013      	ands	r3, r2
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	bf14      	ite	ne
 80035b8:	2301      	movne	r3, #1
 80035ba:	2300      	moveq	r3, #0
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	e00b      	b.n	80035d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	43da      	mvns	r2, r3
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	4013      	ands	r3, r2
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	bf14      	ite	ne
 80035d2:	2301      	movne	r3, #1
 80035d4:	2300      	moveq	r3, #0
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f47f af6d 	bne.w	80034b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035f4:	e034      	b.n	8003660 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035f6:	68f8      	ldr	r0, [r7, #12]
 80035f8:	f000 f8e3 	bl	80037c2 <I2C_IsAcknowledgeFailed>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e034      	b.n	8003670 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800360c:	d028      	beq.n	8003660 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800360e:	f7fe fd9b 	bl	8002148 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	68ba      	ldr	r2, [r7, #8]
 800361a:	429a      	cmp	r2, r3
 800361c:	d302      	bcc.n	8003624 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d11d      	bne.n	8003660 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800362e:	2b80      	cmp	r3, #128	@ 0x80
 8003630:	d016      	beq.n	8003660 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2220      	movs	r2, #32
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364c:	f043 0220 	orr.w	r2, r3, #32
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e007      	b.n	8003670 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800366a:	2b80      	cmp	r3, #128	@ 0x80
 800366c:	d1c3      	bne.n	80035f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3710      	adds	r7, #16
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003684:	e034      	b.n	80036f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003686:	68f8      	ldr	r0, [r7, #12]
 8003688:	f000 f89b 	bl	80037c2 <I2C_IsAcknowledgeFailed>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e034      	b.n	8003700 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800369c:	d028      	beq.n	80036f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800369e:	f7fe fd53 	bl	8002148 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	68ba      	ldr	r2, [r7, #8]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d302      	bcc.n	80036b4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d11d      	bne.n	80036f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	f003 0304 	and.w	r3, r3, #4
 80036be:	2b04      	cmp	r3, #4
 80036c0:	d016      	beq.n	80036f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2220      	movs	r2, #32
 80036cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036dc:	f043 0220 	orr.w	r2, r3, #32
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e007      	b.n	8003700 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	f003 0304 	and.w	r3, r3, #4
 80036fa:	2b04      	cmp	r3, #4
 80036fc:	d1c3      	bne.n	8003686 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003714:	e049      	b.n	80037aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	695b      	ldr	r3, [r3, #20]
 800371c:	f003 0310 	and.w	r3, r3, #16
 8003720:	2b10      	cmp	r3, #16
 8003722:	d119      	bne.n	8003758 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f06f 0210 	mvn.w	r2, #16
 800372c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2220      	movs	r2, #32
 8003738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e030      	b.n	80037ba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003758:	f7fe fcf6 	bl	8002148 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	68ba      	ldr	r2, [r7, #8]
 8003764:	429a      	cmp	r2, r3
 8003766:	d302      	bcc.n	800376e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d11d      	bne.n	80037aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	695b      	ldr	r3, [r3, #20]
 8003774:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003778:	2b40      	cmp	r3, #64	@ 0x40
 800377a:	d016      	beq.n	80037aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2220      	movs	r2, #32
 8003786:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003796:	f043 0220 	orr.w	r2, r3, #32
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e007      	b.n	80037ba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	695b      	ldr	r3, [r3, #20]
 80037b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037b4:	2b40      	cmp	r3, #64	@ 0x40
 80037b6:	d1ae      	bne.n	8003716 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3710      	adds	r7, #16
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80037c2:	b480      	push	{r7}
 80037c4:	b083      	sub	sp, #12
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	695b      	ldr	r3, [r3, #20]
 80037d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037d8:	d11b      	bne.n	8003812 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80037e2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2220      	movs	r2, #32
 80037ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fe:	f043 0204 	orr.w	r2, r3, #4
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e000      	b.n	8003814 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e267      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b00      	cmp	r3, #0
 800383c:	d075      	beq.n	800392a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800383e:	4b88      	ldr	r3, [pc, #544]	@ (8003a60 <HAL_RCC_OscConfig+0x240>)
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f003 030c 	and.w	r3, r3, #12
 8003846:	2b04      	cmp	r3, #4
 8003848:	d00c      	beq.n	8003864 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800384a:	4b85      	ldr	r3, [pc, #532]	@ (8003a60 <HAL_RCC_OscConfig+0x240>)
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003852:	2b08      	cmp	r3, #8
 8003854:	d112      	bne.n	800387c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003856:	4b82      	ldr	r3, [pc, #520]	@ (8003a60 <HAL_RCC_OscConfig+0x240>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800385e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003862:	d10b      	bne.n	800387c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003864:	4b7e      	ldr	r3, [pc, #504]	@ (8003a60 <HAL_RCC_OscConfig+0x240>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d05b      	beq.n	8003928 <HAL_RCC_OscConfig+0x108>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d157      	bne.n	8003928 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e242      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003884:	d106      	bne.n	8003894 <HAL_RCC_OscConfig+0x74>
 8003886:	4b76      	ldr	r3, [pc, #472]	@ (8003a60 <HAL_RCC_OscConfig+0x240>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a75      	ldr	r2, [pc, #468]	@ (8003a60 <HAL_RCC_OscConfig+0x240>)
 800388c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003890:	6013      	str	r3, [r2, #0]
 8003892:	e01d      	b.n	80038d0 <HAL_RCC_OscConfig+0xb0>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800389c:	d10c      	bne.n	80038b8 <HAL_RCC_OscConfig+0x98>
 800389e:	4b70      	ldr	r3, [pc, #448]	@ (8003a60 <HAL_RCC_OscConfig+0x240>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a6f      	ldr	r2, [pc, #444]	@ (8003a60 <HAL_RCC_OscConfig+0x240>)
 80038a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038a8:	6013      	str	r3, [r2, #0]
 80038aa:	4b6d      	ldr	r3, [pc, #436]	@ (8003a60 <HAL_RCC_OscConfig+0x240>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a6c      	ldr	r2, [pc, #432]	@ (8003a60 <HAL_RCC_OscConfig+0x240>)
 80038b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038b4:	6013      	str	r3, [r2, #0]
 80038b6:	e00b      	b.n	80038d0 <HAL_RCC_OscConfig+0xb0>
 80038b8:	4b69      	ldr	r3, [pc, #420]	@ (8003a60 <HAL_RCC_OscConfig+0x240>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a68      	ldr	r2, [pc, #416]	@ (8003a60 <HAL_RCC_OscConfig+0x240>)
 80038be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038c2:	6013      	str	r3, [r2, #0]
 80038c4:	4b66      	ldr	r3, [pc, #408]	@ (8003a60 <HAL_RCC_OscConfig+0x240>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a65      	ldr	r2, [pc, #404]	@ (8003a60 <HAL_RCC_OscConfig+0x240>)
 80038ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d013      	beq.n	8003900 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d8:	f7fe fc36 	bl	8002148 <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038e0:	f7fe fc32 	bl	8002148 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b64      	cmp	r3, #100	@ 0x64
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e207      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038f2:	4b5b      	ldr	r3, [pc, #364]	@ (8003a60 <HAL_RCC_OscConfig+0x240>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d0f0      	beq.n	80038e0 <HAL_RCC_OscConfig+0xc0>
 80038fe:	e014      	b.n	800392a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003900:	f7fe fc22 	bl	8002148 <HAL_GetTick>
 8003904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003906:	e008      	b.n	800391a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003908:	f7fe fc1e 	bl	8002148 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b64      	cmp	r3, #100	@ 0x64
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e1f3      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800391a:	4b51      	ldr	r3, [pc, #324]	@ (8003a60 <HAL_RCC_OscConfig+0x240>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1f0      	bne.n	8003908 <HAL_RCC_OscConfig+0xe8>
 8003926:	e000      	b.n	800392a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003928:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d063      	beq.n	80039fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003936:	4b4a      	ldr	r3, [pc, #296]	@ (8003a60 <HAL_RCC_OscConfig+0x240>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f003 030c 	and.w	r3, r3, #12
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00b      	beq.n	800395a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003942:	4b47      	ldr	r3, [pc, #284]	@ (8003a60 <HAL_RCC_OscConfig+0x240>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800394a:	2b08      	cmp	r3, #8
 800394c:	d11c      	bne.n	8003988 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800394e:	4b44      	ldr	r3, [pc, #272]	@ (8003a60 <HAL_RCC_OscConfig+0x240>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d116      	bne.n	8003988 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800395a:	4b41      	ldr	r3, [pc, #260]	@ (8003a60 <HAL_RCC_OscConfig+0x240>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d005      	beq.n	8003972 <HAL_RCC_OscConfig+0x152>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d001      	beq.n	8003972 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e1c7      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003972:	4b3b      	ldr	r3, [pc, #236]	@ (8003a60 <HAL_RCC_OscConfig+0x240>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	00db      	lsls	r3, r3, #3
 8003980:	4937      	ldr	r1, [pc, #220]	@ (8003a60 <HAL_RCC_OscConfig+0x240>)
 8003982:	4313      	orrs	r3, r2
 8003984:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003986:	e03a      	b.n	80039fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d020      	beq.n	80039d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003990:	4b34      	ldr	r3, [pc, #208]	@ (8003a64 <HAL_RCC_OscConfig+0x244>)
 8003992:	2201      	movs	r2, #1
 8003994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003996:	f7fe fbd7 	bl	8002148 <HAL_GetTick>
 800399a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800399c:	e008      	b.n	80039b0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800399e:	f7fe fbd3 	bl	8002148 <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d901      	bls.n	80039b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e1a8      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039b0:	4b2b      	ldr	r3, [pc, #172]	@ (8003a60 <HAL_RCC_OscConfig+0x240>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0302 	and.w	r3, r3, #2
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d0f0      	beq.n	800399e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039bc:	4b28      	ldr	r3, [pc, #160]	@ (8003a60 <HAL_RCC_OscConfig+0x240>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	00db      	lsls	r3, r3, #3
 80039ca:	4925      	ldr	r1, [pc, #148]	@ (8003a60 <HAL_RCC_OscConfig+0x240>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	600b      	str	r3, [r1, #0]
 80039d0:	e015      	b.n	80039fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039d2:	4b24      	ldr	r3, [pc, #144]	@ (8003a64 <HAL_RCC_OscConfig+0x244>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d8:	f7fe fbb6 	bl	8002148 <HAL_GetTick>
 80039dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039de:	e008      	b.n	80039f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039e0:	f7fe fbb2 	bl	8002148 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e187      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039f2:	4b1b      	ldr	r3, [pc, #108]	@ (8003a60 <HAL_RCC_OscConfig+0x240>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1f0      	bne.n	80039e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0308 	and.w	r3, r3, #8
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d036      	beq.n	8003a78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d016      	beq.n	8003a40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a12:	4b15      	ldr	r3, [pc, #84]	@ (8003a68 <HAL_RCC_OscConfig+0x248>)
 8003a14:	2201      	movs	r2, #1
 8003a16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a18:	f7fe fb96 	bl	8002148 <HAL_GetTick>
 8003a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a1e:	e008      	b.n	8003a32 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a20:	f7fe fb92 	bl	8002148 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e167      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a32:	4b0b      	ldr	r3, [pc, #44]	@ (8003a60 <HAL_RCC_OscConfig+0x240>)
 8003a34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d0f0      	beq.n	8003a20 <HAL_RCC_OscConfig+0x200>
 8003a3e:	e01b      	b.n	8003a78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a40:	4b09      	ldr	r3, [pc, #36]	@ (8003a68 <HAL_RCC_OscConfig+0x248>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a46:	f7fe fb7f 	bl	8002148 <HAL_GetTick>
 8003a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a4c:	e00e      	b.n	8003a6c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a4e:	f7fe fb7b 	bl	8002148 <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d907      	bls.n	8003a6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e150      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
 8003a60:	40023800 	.word	0x40023800
 8003a64:	42470000 	.word	0x42470000
 8003a68:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a6c:	4b88      	ldr	r3, [pc, #544]	@ (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003a6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1ea      	bne.n	8003a4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0304 	and.w	r3, r3, #4
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f000 8097 	beq.w	8003bb4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a86:	2300      	movs	r3, #0
 8003a88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a8a:	4b81      	ldr	r3, [pc, #516]	@ (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10f      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a96:	2300      	movs	r3, #0
 8003a98:	60bb      	str	r3, [r7, #8]
 8003a9a:	4b7d      	ldr	r3, [pc, #500]	@ (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9e:	4a7c      	ldr	r2, [pc, #496]	@ (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003aa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003aa4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003aa6:	4b7a      	ldr	r3, [pc, #488]	@ (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aae:	60bb      	str	r3, [r7, #8]
 8003ab0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ab6:	4b77      	ldr	r3, [pc, #476]	@ (8003c94 <HAL_RCC_OscConfig+0x474>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d118      	bne.n	8003af4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ac2:	4b74      	ldr	r3, [pc, #464]	@ (8003c94 <HAL_RCC_OscConfig+0x474>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a73      	ldr	r2, [pc, #460]	@ (8003c94 <HAL_RCC_OscConfig+0x474>)
 8003ac8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003acc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ace:	f7fe fb3b 	bl	8002148 <HAL_GetTick>
 8003ad2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad4:	e008      	b.n	8003ae8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ad6:	f7fe fb37 	bl	8002148 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d901      	bls.n	8003ae8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e10c      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ae8:	4b6a      	ldr	r3, [pc, #424]	@ (8003c94 <HAL_RCC_OscConfig+0x474>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d0f0      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d106      	bne.n	8003b0a <HAL_RCC_OscConfig+0x2ea>
 8003afc:	4b64      	ldr	r3, [pc, #400]	@ (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003afe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b00:	4a63      	ldr	r2, [pc, #396]	@ (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003b02:	f043 0301 	orr.w	r3, r3, #1
 8003b06:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b08:	e01c      	b.n	8003b44 <HAL_RCC_OscConfig+0x324>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	2b05      	cmp	r3, #5
 8003b10:	d10c      	bne.n	8003b2c <HAL_RCC_OscConfig+0x30c>
 8003b12:	4b5f      	ldr	r3, [pc, #380]	@ (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003b14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b16:	4a5e      	ldr	r2, [pc, #376]	@ (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003b18:	f043 0304 	orr.w	r3, r3, #4
 8003b1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b1e:	4b5c      	ldr	r3, [pc, #368]	@ (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003b20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b22:	4a5b      	ldr	r2, [pc, #364]	@ (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003b24:	f043 0301 	orr.w	r3, r3, #1
 8003b28:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b2a:	e00b      	b.n	8003b44 <HAL_RCC_OscConfig+0x324>
 8003b2c:	4b58      	ldr	r3, [pc, #352]	@ (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003b2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b30:	4a57      	ldr	r2, [pc, #348]	@ (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003b32:	f023 0301 	bic.w	r3, r3, #1
 8003b36:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b38:	4b55      	ldr	r3, [pc, #340]	@ (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003b3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b3c:	4a54      	ldr	r2, [pc, #336]	@ (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003b3e:	f023 0304 	bic.w	r3, r3, #4
 8003b42:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d015      	beq.n	8003b78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b4c:	f7fe fafc 	bl	8002148 <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b52:	e00a      	b.n	8003b6a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b54:	f7fe faf8 	bl	8002148 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e0cb      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b6a:	4b49      	ldr	r3, [pc, #292]	@ (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003b6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d0ee      	beq.n	8003b54 <HAL_RCC_OscConfig+0x334>
 8003b76:	e014      	b.n	8003ba2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b78:	f7fe fae6 	bl	8002148 <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b7e:	e00a      	b.n	8003b96 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b80:	f7fe fae2 	bl	8002148 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e0b5      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b96:	4b3e      	ldr	r3, [pc, #248]	@ (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1ee      	bne.n	8003b80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ba2:	7dfb      	ldrb	r3, [r7, #23]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d105      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ba8:	4b39      	ldr	r3, [pc, #228]	@ (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bac:	4a38      	ldr	r2, [pc, #224]	@ (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003bae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bb2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f000 80a1 	beq.w	8003d00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bbe:	4b34      	ldr	r3, [pc, #208]	@ (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f003 030c 	and.w	r3, r3, #12
 8003bc6:	2b08      	cmp	r3, #8
 8003bc8:	d05c      	beq.n	8003c84 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d141      	bne.n	8003c56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bd2:	4b31      	ldr	r3, [pc, #196]	@ (8003c98 <HAL_RCC_OscConfig+0x478>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd8:	f7fe fab6 	bl	8002148 <HAL_GetTick>
 8003bdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bde:	e008      	b.n	8003bf2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003be0:	f7fe fab2 	bl	8002148 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e087      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bf2:	4b27      	ldr	r3, [pc, #156]	@ (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1f0      	bne.n	8003be0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	69da      	ldr	r2, [r3, #28]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	431a      	orrs	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c0c:	019b      	lsls	r3, r3, #6
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c14:	085b      	lsrs	r3, r3, #1
 8003c16:	3b01      	subs	r3, #1
 8003c18:	041b      	lsls	r3, r3, #16
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c20:	061b      	lsls	r3, r3, #24
 8003c22:	491b      	ldr	r1, [pc, #108]	@ (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c28:	4b1b      	ldr	r3, [pc, #108]	@ (8003c98 <HAL_RCC_OscConfig+0x478>)
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c2e:	f7fe fa8b 	bl	8002148 <HAL_GetTick>
 8003c32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c34:	e008      	b.n	8003c48 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c36:	f7fe fa87 	bl	8002148 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d901      	bls.n	8003c48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e05c      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c48:	4b11      	ldr	r3, [pc, #68]	@ (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d0f0      	beq.n	8003c36 <HAL_RCC_OscConfig+0x416>
 8003c54:	e054      	b.n	8003d00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c56:	4b10      	ldr	r3, [pc, #64]	@ (8003c98 <HAL_RCC_OscConfig+0x478>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c5c:	f7fe fa74 	bl	8002148 <HAL_GetTick>
 8003c60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c62:	e008      	b.n	8003c76 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c64:	f7fe fa70 	bl	8002148 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e045      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c76:	4b06      	ldr	r3, [pc, #24]	@ (8003c90 <HAL_RCC_OscConfig+0x470>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1f0      	bne.n	8003c64 <HAL_RCC_OscConfig+0x444>
 8003c82:	e03d      	b.n	8003d00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d107      	bne.n	8003c9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e038      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
 8003c90:	40023800 	.word	0x40023800
 8003c94:	40007000 	.word	0x40007000
 8003c98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c9c:	4b1b      	ldr	r3, [pc, #108]	@ (8003d0c <HAL_RCC_OscConfig+0x4ec>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d028      	beq.n	8003cfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d121      	bne.n	8003cfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d11a      	bne.n	8003cfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003ccc:	4013      	ands	r3, r2
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003cd2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d111      	bne.n	8003cfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ce2:	085b      	lsrs	r3, r3, #1
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d107      	bne.n	8003cfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d001      	beq.n	8003d00 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e000      	b.n	8003d02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3718      	adds	r7, #24
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	40023800 	.word	0x40023800

08003d10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d101      	bne.n	8003d24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e0cc      	b.n	8003ebe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d24:	4b68      	ldr	r3, [pc, #416]	@ (8003ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0307 	and.w	r3, r3, #7
 8003d2c:	683a      	ldr	r2, [r7, #0]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d90c      	bls.n	8003d4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d32:	4b65      	ldr	r3, [pc, #404]	@ (8003ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	b2d2      	uxtb	r2, r2
 8003d38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d3a:	4b63      	ldr	r3, [pc, #396]	@ (8003ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0307 	and.w	r3, r3, #7
 8003d42:	683a      	ldr	r2, [r7, #0]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d001      	beq.n	8003d4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e0b8      	b.n	8003ebe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d020      	beq.n	8003d9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0304 	and.w	r3, r3, #4
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d005      	beq.n	8003d70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d64:	4b59      	ldr	r3, [pc, #356]	@ (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	4a58      	ldr	r2, [pc, #352]	@ (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003d6a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003d6e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0308 	and.w	r3, r3, #8
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d005      	beq.n	8003d88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d7c:	4b53      	ldr	r3, [pc, #332]	@ (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	4a52      	ldr	r2, [pc, #328]	@ (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003d82:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003d86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d88:	4b50      	ldr	r3, [pc, #320]	@ (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	494d      	ldr	r1, [pc, #308]	@ (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d044      	beq.n	8003e30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d107      	bne.n	8003dbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dae:	4b47      	ldr	r3, [pc, #284]	@ (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d119      	bne.n	8003dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e07f      	b.n	8003ebe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d003      	beq.n	8003dce <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dca:	2b03      	cmp	r3, #3
 8003dcc:	d107      	bne.n	8003dde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dce:	4b3f      	ldr	r3, [pc, #252]	@ (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d109      	bne.n	8003dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e06f      	b.n	8003ebe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dde:	4b3b      	ldr	r3, [pc, #236]	@ (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e067      	b.n	8003ebe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dee:	4b37      	ldr	r3, [pc, #220]	@ (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f023 0203 	bic.w	r2, r3, #3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	4934      	ldr	r1, [pc, #208]	@ (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e00:	f7fe f9a2 	bl	8002148 <HAL_GetTick>
 8003e04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e06:	e00a      	b.n	8003e1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e08:	f7fe f99e 	bl	8002148 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e04f      	b.n	8003ebe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e1e:	4b2b      	ldr	r3, [pc, #172]	@ (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f003 020c 	and.w	r2, r3, #12
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d1eb      	bne.n	8003e08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e30:	4b25      	ldr	r3, [pc, #148]	@ (8003ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0307 	and.w	r3, r3, #7
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d20c      	bcs.n	8003e58 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e3e:	4b22      	ldr	r3, [pc, #136]	@ (8003ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e40:	683a      	ldr	r2, [r7, #0]
 8003e42:	b2d2      	uxtb	r2, r2
 8003e44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e46:	4b20      	ldr	r3, [pc, #128]	@ (8003ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0307 	and.w	r3, r3, #7
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d001      	beq.n	8003e58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e032      	b.n	8003ebe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0304 	and.w	r3, r3, #4
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d008      	beq.n	8003e76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e64:	4b19      	ldr	r3, [pc, #100]	@ (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	4916      	ldr	r1, [pc, #88]	@ (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0308 	and.w	r3, r3, #8
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d009      	beq.n	8003e96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e82:	4b12      	ldr	r3, [pc, #72]	@ (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	00db      	lsls	r3, r3, #3
 8003e90:	490e      	ldr	r1, [pc, #56]	@ (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e96:	f000 f821 	bl	8003edc <HAL_RCC_GetSysClockFreq>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8003ecc <HAL_RCC_ClockConfig+0x1bc>)
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	091b      	lsrs	r3, r3, #4
 8003ea2:	f003 030f 	and.w	r3, r3, #15
 8003ea6:	490a      	ldr	r1, [pc, #40]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8003ea8:	5ccb      	ldrb	r3, [r1, r3]
 8003eaa:	fa22 f303 	lsr.w	r3, r2, r3
 8003eae:	4a09      	ldr	r2, [pc, #36]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8003eb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003eb2:	4b09      	ldr	r3, [pc, #36]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1c8>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7fe f902 	bl	80020c0 <HAL_InitTick>

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	40023c00 	.word	0x40023c00
 8003ecc:	40023800 	.word	0x40023800
 8003ed0:	0800877c 	.word	0x0800877c
 8003ed4:	20000004 	.word	0x20000004
 8003ed8:	20000008 	.word	0x20000008

08003edc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003edc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ee0:	b094      	sub	sp, #80	@ 0x50
 8003ee2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003eec:	2300      	movs	r3, #0
 8003eee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ef4:	4b79      	ldr	r3, [pc, #484]	@ (80040dc <HAL_RCC_GetSysClockFreq+0x200>)
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f003 030c 	and.w	r3, r3, #12
 8003efc:	2b08      	cmp	r3, #8
 8003efe:	d00d      	beq.n	8003f1c <HAL_RCC_GetSysClockFreq+0x40>
 8003f00:	2b08      	cmp	r3, #8
 8003f02:	f200 80e1 	bhi.w	80040c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d002      	beq.n	8003f10 <HAL_RCC_GetSysClockFreq+0x34>
 8003f0a:	2b04      	cmp	r3, #4
 8003f0c:	d003      	beq.n	8003f16 <HAL_RCC_GetSysClockFreq+0x3a>
 8003f0e:	e0db      	b.n	80040c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f10:	4b73      	ldr	r3, [pc, #460]	@ (80040e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f12:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f14:	e0db      	b.n	80040ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f16:	4b73      	ldr	r3, [pc, #460]	@ (80040e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003f18:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f1a:	e0d8      	b.n	80040ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f1c:	4b6f      	ldr	r3, [pc, #444]	@ (80040dc <HAL_RCC_GetSysClockFreq+0x200>)
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f24:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f26:	4b6d      	ldr	r3, [pc, #436]	@ (80040dc <HAL_RCC_GetSysClockFreq+0x200>)
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d063      	beq.n	8003ffa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f32:	4b6a      	ldr	r3, [pc, #424]	@ (80040dc <HAL_RCC_GetSysClockFreq+0x200>)
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	099b      	lsrs	r3, r3, #6
 8003f38:	2200      	movs	r2, #0
 8003f3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f3c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f44:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f46:	2300      	movs	r3, #0
 8003f48:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003f4e:	4622      	mov	r2, r4
 8003f50:	462b      	mov	r3, r5
 8003f52:	f04f 0000 	mov.w	r0, #0
 8003f56:	f04f 0100 	mov.w	r1, #0
 8003f5a:	0159      	lsls	r1, r3, #5
 8003f5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f60:	0150      	lsls	r0, r2, #5
 8003f62:	4602      	mov	r2, r0
 8003f64:	460b      	mov	r3, r1
 8003f66:	4621      	mov	r1, r4
 8003f68:	1a51      	subs	r1, r2, r1
 8003f6a:	6139      	str	r1, [r7, #16]
 8003f6c:	4629      	mov	r1, r5
 8003f6e:	eb63 0301 	sbc.w	r3, r3, r1
 8003f72:	617b      	str	r3, [r7, #20]
 8003f74:	f04f 0200 	mov.w	r2, #0
 8003f78:	f04f 0300 	mov.w	r3, #0
 8003f7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f80:	4659      	mov	r1, fp
 8003f82:	018b      	lsls	r3, r1, #6
 8003f84:	4651      	mov	r1, sl
 8003f86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f8a:	4651      	mov	r1, sl
 8003f8c:	018a      	lsls	r2, r1, #6
 8003f8e:	4651      	mov	r1, sl
 8003f90:	ebb2 0801 	subs.w	r8, r2, r1
 8003f94:	4659      	mov	r1, fp
 8003f96:	eb63 0901 	sbc.w	r9, r3, r1
 8003f9a:	f04f 0200 	mov.w	r2, #0
 8003f9e:	f04f 0300 	mov.w	r3, #0
 8003fa2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fa6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003faa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fae:	4690      	mov	r8, r2
 8003fb0:	4699      	mov	r9, r3
 8003fb2:	4623      	mov	r3, r4
 8003fb4:	eb18 0303 	adds.w	r3, r8, r3
 8003fb8:	60bb      	str	r3, [r7, #8]
 8003fba:	462b      	mov	r3, r5
 8003fbc:	eb49 0303 	adc.w	r3, r9, r3
 8003fc0:	60fb      	str	r3, [r7, #12]
 8003fc2:	f04f 0200 	mov.w	r2, #0
 8003fc6:	f04f 0300 	mov.w	r3, #0
 8003fca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003fce:	4629      	mov	r1, r5
 8003fd0:	024b      	lsls	r3, r1, #9
 8003fd2:	4621      	mov	r1, r4
 8003fd4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003fd8:	4621      	mov	r1, r4
 8003fda:	024a      	lsls	r2, r1, #9
 8003fdc:	4610      	mov	r0, r2
 8003fde:	4619      	mov	r1, r3
 8003fe0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fe6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003fe8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003fec:	f7fc fde4 	bl	8000bb8 <__aeabi_uldivmod>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ff8:	e058      	b.n	80040ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ffa:	4b38      	ldr	r3, [pc, #224]	@ (80040dc <HAL_RCC_GetSysClockFreq+0x200>)
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	099b      	lsrs	r3, r3, #6
 8004000:	2200      	movs	r2, #0
 8004002:	4618      	mov	r0, r3
 8004004:	4611      	mov	r1, r2
 8004006:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800400a:	623b      	str	r3, [r7, #32]
 800400c:	2300      	movs	r3, #0
 800400e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004010:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004014:	4642      	mov	r2, r8
 8004016:	464b      	mov	r3, r9
 8004018:	f04f 0000 	mov.w	r0, #0
 800401c:	f04f 0100 	mov.w	r1, #0
 8004020:	0159      	lsls	r1, r3, #5
 8004022:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004026:	0150      	lsls	r0, r2, #5
 8004028:	4602      	mov	r2, r0
 800402a:	460b      	mov	r3, r1
 800402c:	4641      	mov	r1, r8
 800402e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004032:	4649      	mov	r1, r9
 8004034:	eb63 0b01 	sbc.w	fp, r3, r1
 8004038:	f04f 0200 	mov.w	r2, #0
 800403c:	f04f 0300 	mov.w	r3, #0
 8004040:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004044:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004048:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800404c:	ebb2 040a 	subs.w	r4, r2, sl
 8004050:	eb63 050b 	sbc.w	r5, r3, fp
 8004054:	f04f 0200 	mov.w	r2, #0
 8004058:	f04f 0300 	mov.w	r3, #0
 800405c:	00eb      	lsls	r3, r5, #3
 800405e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004062:	00e2      	lsls	r2, r4, #3
 8004064:	4614      	mov	r4, r2
 8004066:	461d      	mov	r5, r3
 8004068:	4643      	mov	r3, r8
 800406a:	18e3      	adds	r3, r4, r3
 800406c:	603b      	str	r3, [r7, #0]
 800406e:	464b      	mov	r3, r9
 8004070:	eb45 0303 	adc.w	r3, r5, r3
 8004074:	607b      	str	r3, [r7, #4]
 8004076:	f04f 0200 	mov.w	r2, #0
 800407a:	f04f 0300 	mov.w	r3, #0
 800407e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004082:	4629      	mov	r1, r5
 8004084:	028b      	lsls	r3, r1, #10
 8004086:	4621      	mov	r1, r4
 8004088:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800408c:	4621      	mov	r1, r4
 800408e:	028a      	lsls	r2, r1, #10
 8004090:	4610      	mov	r0, r2
 8004092:	4619      	mov	r1, r3
 8004094:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004096:	2200      	movs	r2, #0
 8004098:	61bb      	str	r3, [r7, #24]
 800409a:	61fa      	str	r2, [r7, #28]
 800409c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040a0:	f7fc fd8a 	bl	8000bb8 <__aeabi_uldivmod>
 80040a4:	4602      	mov	r2, r0
 80040a6:	460b      	mov	r3, r1
 80040a8:	4613      	mov	r3, r2
 80040aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80040ac:	4b0b      	ldr	r3, [pc, #44]	@ (80040dc <HAL_RCC_GetSysClockFreq+0x200>)
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	0c1b      	lsrs	r3, r3, #16
 80040b2:	f003 0303 	and.w	r3, r3, #3
 80040b6:	3301      	adds	r3, #1
 80040b8:	005b      	lsls	r3, r3, #1
 80040ba:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80040bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80040be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040c6:	e002      	b.n	80040ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040c8:	4b05      	ldr	r3, [pc, #20]	@ (80040e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80040ca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3750      	adds	r7, #80	@ 0x50
 80040d4:	46bd      	mov	sp, r7
 80040d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040da:	bf00      	nop
 80040dc:	40023800 	.word	0x40023800
 80040e0:	00f42400 	.word	0x00f42400
 80040e4:	007a1200 	.word	0x007a1200

080040e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040e8:	b480      	push	{r7}
 80040ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040ec:	4b03      	ldr	r3, [pc, #12]	@ (80040fc <HAL_RCC_GetHCLKFreq+0x14>)
 80040ee:	681b      	ldr	r3, [r3, #0]
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	20000004 	.word	0x20000004

08004100 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004104:	f7ff fff0 	bl	80040e8 <HAL_RCC_GetHCLKFreq>
 8004108:	4602      	mov	r2, r0
 800410a:	4b05      	ldr	r3, [pc, #20]	@ (8004120 <HAL_RCC_GetPCLK1Freq+0x20>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	0a9b      	lsrs	r3, r3, #10
 8004110:	f003 0307 	and.w	r3, r3, #7
 8004114:	4903      	ldr	r1, [pc, #12]	@ (8004124 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004116:	5ccb      	ldrb	r3, [r1, r3]
 8004118:	fa22 f303 	lsr.w	r3, r2, r3
}
 800411c:	4618      	mov	r0, r3
 800411e:	bd80      	pop	{r7, pc}
 8004120:	40023800 	.word	0x40023800
 8004124:	0800878c 	.word	0x0800878c

08004128 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800412c:	f7ff ffdc 	bl	80040e8 <HAL_RCC_GetHCLKFreq>
 8004130:	4602      	mov	r2, r0
 8004132:	4b05      	ldr	r3, [pc, #20]	@ (8004148 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	0b5b      	lsrs	r3, r3, #13
 8004138:	f003 0307 	and.w	r3, r3, #7
 800413c:	4903      	ldr	r1, [pc, #12]	@ (800414c <HAL_RCC_GetPCLK2Freq+0x24>)
 800413e:	5ccb      	ldrb	r3, [r1, r3]
 8004140:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004144:	4618      	mov	r0, r3
 8004146:	bd80      	pop	{r7, pc}
 8004148:	40023800 	.word	0x40023800
 800414c:	0800878c 	.word	0x0800878c

08004150 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b086      	sub	sp, #24
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d101      	bne.n	8004164 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e097      	b.n	8004294 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2b00      	cmp	r3, #0
 800416e:	d106      	bne.n	800417e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f7fd fe25 	bl	8001dc8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2202      	movs	r2, #2
 8004182:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	6812      	ldr	r2, [r2, #0]
 8004190:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004194:	f023 0307 	bic.w	r3, r3, #7
 8004198:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	3304      	adds	r3, #4
 80041a2:	4619      	mov	r1, r3
 80041a4:	4610      	mov	r0, r2
 80041a6:	f000 fa29 	bl	80045fc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	6a1b      	ldr	r3, [r3, #32]
 80041c0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041d2:	f023 0303 	bic.w	r3, r3, #3
 80041d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	689a      	ldr	r2, [r3, #8]
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	021b      	lsls	r3, r3, #8
 80041e2:	4313      	orrs	r3, r2
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80041f0:	f023 030c 	bic.w	r3, r3, #12
 80041f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80041fc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004200:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	68da      	ldr	r2, [r3, #12]
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	69db      	ldr	r3, [r3, #28]
 800420a:	021b      	lsls	r3, r3, #8
 800420c:	4313      	orrs	r3, r2
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	4313      	orrs	r3, r2
 8004212:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	011a      	lsls	r2, r3, #4
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	031b      	lsls	r3, r3, #12
 8004220:	4313      	orrs	r3, r2
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	4313      	orrs	r3, r2
 8004226:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800422e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004236:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	685a      	ldr	r2, [r3, #4]
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	695b      	ldr	r3, [r3, #20]
 8004240:	011b      	lsls	r3, r3, #4
 8004242:	4313      	orrs	r3, r2
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	4313      	orrs	r3, r2
 8004248:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2201      	movs	r2, #1
 800427e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2201      	movs	r2, #1
 8004286:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2201      	movs	r2, #1
 800428e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	3718      	adds	r7, #24
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80042ac:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80042b4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80042bc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80042c4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d110      	bne.n	80042ee <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80042cc:	7bfb      	ldrb	r3, [r7, #15]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d102      	bne.n	80042d8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80042d2:	7b7b      	ldrb	r3, [r7, #13]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d001      	beq.n	80042dc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e069      	b.n	80043b0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2202      	movs	r2, #2
 80042e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2202      	movs	r2, #2
 80042e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042ec:	e031      	b.n	8004352 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	2b04      	cmp	r3, #4
 80042f2:	d110      	bne.n	8004316 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80042f4:	7bbb      	ldrb	r3, [r7, #14]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d102      	bne.n	8004300 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80042fa:	7b3b      	ldrb	r3, [r7, #12]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d001      	beq.n	8004304 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e055      	b.n	80043b0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2202      	movs	r2, #2
 8004308:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2202      	movs	r2, #2
 8004310:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004314:	e01d      	b.n	8004352 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004316:	7bfb      	ldrb	r3, [r7, #15]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d108      	bne.n	800432e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800431c:	7bbb      	ldrb	r3, [r7, #14]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d105      	bne.n	800432e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004322:	7b7b      	ldrb	r3, [r7, #13]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d102      	bne.n	800432e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004328:	7b3b      	ldrb	r3, [r7, #12]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d001      	beq.n	8004332 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e03e      	b.n	80043b0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2202      	movs	r2, #2
 8004336:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2202      	movs	r2, #2
 800433e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2202      	movs	r2, #2
 8004346:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2202      	movs	r2, #2
 800434e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d003      	beq.n	8004360 <HAL_TIM_Encoder_Start+0xc4>
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	2b04      	cmp	r3, #4
 800435c:	d008      	beq.n	8004370 <HAL_TIM_Encoder_Start+0xd4>
 800435e:	e00f      	b.n	8004380 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2201      	movs	r2, #1
 8004366:	2100      	movs	r1, #0
 8004368:	4618      	mov	r0, r3
 800436a:	f000 f9d3 	bl	8004714 <TIM_CCxChannelCmd>
      break;
 800436e:	e016      	b.n	800439e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2201      	movs	r2, #1
 8004376:	2104      	movs	r1, #4
 8004378:	4618      	mov	r0, r3
 800437a:	f000 f9cb 	bl	8004714 <TIM_CCxChannelCmd>
      break;
 800437e:	e00e      	b.n	800439e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2201      	movs	r2, #1
 8004386:	2100      	movs	r1, #0
 8004388:	4618      	mov	r0, r3
 800438a:	f000 f9c3 	bl	8004714 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2201      	movs	r2, #1
 8004394:	2104      	movs	r1, #4
 8004396:	4618      	mov	r0, r3
 8004398:	f000 f9bc 	bl	8004714 <TIM_CCxChannelCmd>
      break;
 800439c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f042 0201 	orr.w	r2, r2, #1
 80043ac:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3710      	adds	r7, #16
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d020      	beq.n	800441c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f003 0302 	and.w	r3, r3, #2
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d01b      	beq.n	800441c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f06f 0202 	mvn.w	r2, #2
 80043ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	f003 0303 	and.w	r3, r3, #3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d003      	beq.n	800440a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 f8dc 	bl	80045c0 <HAL_TIM_IC_CaptureCallback>
 8004408:	e005      	b.n	8004416 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 f8ce 	bl	80045ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 f8df 	bl	80045d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	f003 0304 	and.w	r3, r3, #4
 8004422:	2b00      	cmp	r3, #0
 8004424:	d020      	beq.n	8004468 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f003 0304 	and.w	r3, r3, #4
 800442c:	2b00      	cmp	r3, #0
 800442e:	d01b      	beq.n	8004468 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f06f 0204 	mvn.w	r2, #4
 8004438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2202      	movs	r2, #2
 800443e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800444a:	2b00      	cmp	r3, #0
 800444c:	d003      	beq.n	8004456 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 f8b6 	bl	80045c0 <HAL_TIM_IC_CaptureCallback>
 8004454:	e005      	b.n	8004462 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f8a8 	bl	80045ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 f8b9 	bl	80045d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	f003 0308 	and.w	r3, r3, #8
 800446e:	2b00      	cmp	r3, #0
 8004470:	d020      	beq.n	80044b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f003 0308 	and.w	r3, r3, #8
 8004478:	2b00      	cmp	r3, #0
 800447a:	d01b      	beq.n	80044b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f06f 0208 	mvn.w	r2, #8
 8004484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2204      	movs	r2, #4
 800448a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	69db      	ldr	r3, [r3, #28]
 8004492:	f003 0303 	and.w	r3, r3, #3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d003      	beq.n	80044a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f890 	bl	80045c0 <HAL_TIM_IC_CaptureCallback>
 80044a0:	e005      	b.n	80044ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 f882 	bl	80045ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 f893 	bl	80045d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	f003 0310 	and.w	r3, r3, #16
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d020      	beq.n	8004500 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f003 0310 	and.w	r3, r3, #16
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d01b      	beq.n	8004500 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f06f 0210 	mvn.w	r2, #16
 80044d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2208      	movs	r2, #8
 80044d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	69db      	ldr	r3, [r3, #28]
 80044de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d003      	beq.n	80044ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 f86a 	bl	80045c0 <HAL_TIM_IC_CaptureCallback>
 80044ec:	e005      	b.n	80044fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 f85c 	bl	80045ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 f86d 	bl	80045d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	f003 0301 	and.w	r3, r3, #1
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00c      	beq.n	8004524 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f003 0301 	and.w	r3, r3, #1
 8004510:	2b00      	cmp	r3, #0
 8004512:	d007      	beq.n	8004524 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f06f 0201 	mvn.w	r2, #1
 800451c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 f83a 	bl	8004598 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00c      	beq.n	8004548 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004534:	2b00      	cmp	r3, #0
 8004536:	d007      	beq.n	8004548 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f984 	bl	8004850 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00c      	beq.n	800456c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004558:	2b00      	cmp	r3, #0
 800455a:	d007      	beq.n	800456c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 f83e 	bl	80045e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	f003 0320 	and.w	r3, r3, #32
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00c      	beq.n	8004590 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f003 0320 	and.w	r3, r3, #32
 800457c:	2b00      	cmp	r3, #0
 800457e:	d007      	beq.n	8004590 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f06f 0220 	mvn.w	r2, #32
 8004588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 f956 	bl	800483c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004590:	bf00      	nop
 8004592:	3710      	adds	r7, #16
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80045a0:	bf00      	nop
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045dc:	bf00      	nop
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045f0:	bf00      	nop
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a3a      	ldr	r2, [pc, #232]	@ (80046f8 <TIM_Base_SetConfig+0xfc>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d00f      	beq.n	8004634 <TIM_Base_SetConfig+0x38>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800461a:	d00b      	beq.n	8004634 <TIM_Base_SetConfig+0x38>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a37      	ldr	r2, [pc, #220]	@ (80046fc <TIM_Base_SetConfig+0x100>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d007      	beq.n	8004634 <TIM_Base_SetConfig+0x38>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a36      	ldr	r2, [pc, #216]	@ (8004700 <TIM_Base_SetConfig+0x104>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d003      	beq.n	8004634 <TIM_Base_SetConfig+0x38>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a35      	ldr	r2, [pc, #212]	@ (8004704 <TIM_Base_SetConfig+0x108>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d108      	bne.n	8004646 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800463a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	4313      	orrs	r3, r2
 8004644:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a2b      	ldr	r2, [pc, #172]	@ (80046f8 <TIM_Base_SetConfig+0xfc>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d01b      	beq.n	8004686 <TIM_Base_SetConfig+0x8a>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004654:	d017      	beq.n	8004686 <TIM_Base_SetConfig+0x8a>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a28      	ldr	r2, [pc, #160]	@ (80046fc <TIM_Base_SetConfig+0x100>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d013      	beq.n	8004686 <TIM_Base_SetConfig+0x8a>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a27      	ldr	r2, [pc, #156]	@ (8004700 <TIM_Base_SetConfig+0x104>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d00f      	beq.n	8004686 <TIM_Base_SetConfig+0x8a>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a26      	ldr	r2, [pc, #152]	@ (8004704 <TIM_Base_SetConfig+0x108>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d00b      	beq.n	8004686 <TIM_Base_SetConfig+0x8a>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a25      	ldr	r2, [pc, #148]	@ (8004708 <TIM_Base_SetConfig+0x10c>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d007      	beq.n	8004686 <TIM_Base_SetConfig+0x8a>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a24      	ldr	r2, [pc, #144]	@ (800470c <TIM_Base_SetConfig+0x110>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d003      	beq.n	8004686 <TIM_Base_SetConfig+0x8a>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a23      	ldr	r2, [pc, #140]	@ (8004710 <TIM_Base_SetConfig+0x114>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d108      	bne.n	8004698 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800468c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	4313      	orrs	r3, r2
 8004696:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	689a      	ldr	r2, [r3, #8]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a0e      	ldr	r2, [pc, #56]	@ (80046f8 <TIM_Base_SetConfig+0xfc>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d103      	bne.n	80046cc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	691a      	ldr	r2, [r3, #16]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d105      	bne.n	80046ea <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	f023 0201 	bic.w	r2, r3, #1
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	611a      	str	r2, [r3, #16]
  }
}
 80046ea:	bf00      	nop
 80046ec:	3714      	adds	r7, #20
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	40010000 	.word	0x40010000
 80046fc:	40000400 	.word	0x40000400
 8004700:	40000800 	.word	0x40000800
 8004704:	40000c00 	.word	0x40000c00
 8004708:	40014000 	.word	0x40014000
 800470c:	40014400 	.word	0x40014400
 8004710:	40014800 	.word	0x40014800

08004714 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004714:	b480      	push	{r7}
 8004716:	b087      	sub	sp, #28
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	f003 031f 	and.w	r3, r3, #31
 8004726:	2201      	movs	r2, #1
 8004728:	fa02 f303 	lsl.w	r3, r2, r3
 800472c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6a1a      	ldr	r2, [r3, #32]
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	43db      	mvns	r3, r3
 8004736:	401a      	ands	r2, r3
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6a1a      	ldr	r2, [r3, #32]
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	f003 031f 	and.w	r3, r3, #31
 8004746:	6879      	ldr	r1, [r7, #4]
 8004748:	fa01 f303 	lsl.w	r3, r1, r3
 800474c:	431a      	orrs	r2, r3
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	621a      	str	r2, [r3, #32]
}
 8004752:	bf00      	nop
 8004754:	371c      	adds	r7, #28
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
	...

08004760 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004770:	2b01      	cmp	r3, #1
 8004772:	d101      	bne.n	8004778 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004774:	2302      	movs	r3, #2
 8004776:	e050      	b.n	800481a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2202      	movs	r2, #2
 8004784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800479e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a1c      	ldr	r2, [pc, #112]	@ (8004828 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d018      	beq.n	80047ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047c4:	d013      	beq.n	80047ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a18      	ldr	r2, [pc, #96]	@ (800482c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d00e      	beq.n	80047ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a16      	ldr	r2, [pc, #88]	@ (8004830 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d009      	beq.n	80047ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a15      	ldr	r2, [pc, #84]	@ (8004834 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d004      	beq.n	80047ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a13      	ldr	r2, [pc, #76]	@ (8004838 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d10c      	bne.n	8004808 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	68ba      	ldr	r2, [r7, #8]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68ba      	ldr	r2, [r7, #8]
 8004806:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3714      	adds	r7, #20
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	40010000 	.word	0x40010000
 800482c:	40000400 	.word	0x40000400
 8004830:	40000800 	.word	0x40000800
 8004834:	40000c00 	.word	0x40000c00
 8004838:	40014000 	.word	0x40014000

0800483c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004844:	bf00      	nop
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004858:	bf00      	nop
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e042      	b.n	80048fc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800487c:	b2db      	uxtb	r3, r3
 800487e:	2b00      	cmp	r3, #0
 8004880:	d106      	bne.n	8004890 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f7fd fb40 	bl	8001f10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2224      	movs	r2, #36	@ 0x24
 8004894:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68da      	ldr	r2, [r3, #12]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80048a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 fdbd 	bl	8005428 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	691a      	ldr	r2, [r3, #16]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80048bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	695a      	ldr	r2, [r3, #20]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80048cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68da      	ldr	r2, [r3, #12]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80048dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2220      	movs	r2, #32
 80048e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2220      	movs	r2, #32
 80048f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3708      	adds	r7, #8
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b08a      	sub	sp, #40	@ 0x28
 8004908:	af02      	add	r7, sp, #8
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	603b      	str	r3, [r7, #0]
 8004910:	4613      	mov	r3, r2
 8004912:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004914:	2300      	movs	r3, #0
 8004916:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800491e:	b2db      	uxtb	r3, r3
 8004920:	2b20      	cmp	r3, #32
 8004922:	d175      	bne.n	8004a10 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d002      	beq.n	8004930 <HAL_UART_Transmit+0x2c>
 800492a:	88fb      	ldrh	r3, [r7, #6]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d101      	bne.n	8004934 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e06e      	b.n	8004a12 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2221      	movs	r2, #33	@ 0x21
 800493e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004942:	f7fd fc01 	bl	8002148 <HAL_GetTick>
 8004946:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	88fa      	ldrh	r2, [r7, #6]
 800494c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	88fa      	ldrh	r2, [r7, #6]
 8004952:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800495c:	d108      	bne.n	8004970 <HAL_UART_Transmit+0x6c>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d104      	bne.n	8004970 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004966:	2300      	movs	r3, #0
 8004968:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	61bb      	str	r3, [r7, #24]
 800496e:	e003      	b.n	8004978 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004974:	2300      	movs	r3, #0
 8004976:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004978:	e02e      	b.n	80049d8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	9300      	str	r3, [sp, #0]
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	2200      	movs	r2, #0
 8004982:	2180      	movs	r1, #128	@ 0x80
 8004984:	68f8      	ldr	r0, [r7, #12]
 8004986:	f000 fb1f 	bl	8004fc8 <UART_WaitOnFlagUntilTimeout>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d005      	beq.n	800499c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2220      	movs	r2, #32
 8004994:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e03a      	b.n	8004a12 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d10b      	bne.n	80049ba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	881b      	ldrh	r3, [r3, #0]
 80049a6:	461a      	mov	r2, r3
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	3302      	adds	r3, #2
 80049b6:	61bb      	str	r3, [r7, #24]
 80049b8:	e007      	b.n	80049ca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	781a      	ldrb	r2, [r3, #0]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	3301      	adds	r3, #1
 80049c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	3b01      	subs	r3, #1
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80049dc:	b29b      	uxth	r3, r3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d1cb      	bne.n	800497a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	9300      	str	r3, [sp, #0]
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	2200      	movs	r2, #0
 80049ea:	2140      	movs	r1, #64	@ 0x40
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f000 faeb 	bl	8004fc8 <UART_WaitOnFlagUntilTimeout>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d005      	beq.n	8004a04 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2220      	movs	r2, #32
 80049fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	e006      	b.n	8004a12 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2220      	movs	r2, #32
 8004a08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	e000      	b.n	8004a12 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004a10:	2302      	movs	r3, #2
  }
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3720      	adds	r7, #32
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b084      	sub	sp, #16
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	60f8      	str	r0, [r7, #12]
 8004a22:	60b9      	str	r1, [r7, #8]
 8004a24:	4613      	mov	r3, r2
 8004a26:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	2b20      	cmp	r3, #32
 8004a32:	d112      	bne.n	8004a5a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d002      	beq.n	8004a40 <HAL_UART_Receive_IT+0x26>
 8004a3a:	88fb      	ldrh	r3, [r7, #6]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d101      	bne.n	8004a44 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e00b      	b.n	8004a5c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004a4a:	88fb      	ldrh	r3, [r7, #6]
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	68b9      	ldr	r1, [r7, #8]
 8004a50:	68f8      	ldr	r0, [r7, #12]
 8004a52:	f000 fb12 	bl	800507a <UART_Start_Receive_IT>
 8004a56:	4603      	mov	r3, r0
 8004a58:	e000      	b.n	8004a5c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004a5a:	2302      	movs	r3, #2
  }
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3710      	adds	r7, #16
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b0ba      	sub	sp, #232	@ 0xe8
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004a90:	2300      	movs	r3, #0
 8004a92:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a9a:	f003 030f 	and.w	r3, r3, #15
 8004a9e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004aa2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d10f      	bne.n	8004aca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004aae:	f003 0320 	and.w	r3, r3, #32
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d009      	beq.n	8004aca <HAL_UART_IRQHandler+0x66>
 8004ab6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004aba:	f003 0320 	and.w	r3, r3, #32
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d003      	beq.n	8004aca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 fbf2 	bl	80052ac <UART_Receive_IT>
      return;
 8004ac8:	e25b      	b.n	8004f82 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004aca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	f000 80de 	beq.w	8004c90 <HAL_UART_IRQHandler+0x22c>
 8004ad4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ad8:	f003 0301 	and.w	r3, r3, #1
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d106      	bne.n	8004aee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ae4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f000 80d1 	beq.w	8004c90 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004af2:	f003 0301 	and.w	r3, r3, #1
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00b      	beq.n	8004b12 <HAL_UART_IRQHandler+0xae>
 8004afa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004afe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d005      	beq.n	8004b12 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b0a:	f043 0201 	orr.w	r2, r3, #1
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b16:	f003 0304 	and.w	r3, r3, #4
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00b      	beq.n	8004b36 <HAL_UART_IRQHandler+0xd2>
 8004b1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d005      	beq.n	8004b36 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b2e:	f043 0202 	orr.w	r2, r3, #2
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00b      	beq.n	8004b5a <HAL_UART_IRQHandler+0xf6>
 8004b42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b46:	f003 0301 	and.w	r3, r3, #1
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d005      	beq.n	8004b5a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b52:	f043 0204 	orr.w	r2, r3, #4
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b5e:	f003 0308 	and.w	r3, r3, #8
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d011      	beq.n	8004b8a <HAL_UART_IRQHandler+0x126>
 8004b66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b6a:	f003 0320 	and.w	r3, r3, #32
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d105      	bne.n	8004b7e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004b72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b76:	f003 0301 	and.w	r3, r3, #1
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d005      	beq.n	8004b8a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b82:	f043 0208 	orr.w	r2, r3, #8
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	f000 81f2 	beq.w	8004f78 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b98:	f003 0320 	and.w	r3, r3, #32
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d008      	beq.n	8004bb2 <HAL_UART_IRQHandler+0x14e>
 8004ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ba4:	f003 0320 	and.w	r3, r3, #32
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d002      	beq.n	8004bb2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 fb7d 	bl	80052ac <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	695b      	ldr	r3, [r3, #20]
 8004bb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bbc:	2b40      	cmp	r3, #64	@ 0x40
 8004bbe:	bf0c      	ite	eq
 8004bc0:	2301      	moveq	r3, #1
 8004bc2:	2300      	movne	r3, #0
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bce:	f003 0308 	and.w	r3, r3, #8
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d103      	bne.n	8004bde <HAL_UART_IRQHandler+0x17a>
 8004bd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d04f      	beq.n	8004c7e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 fa85 	bl	80050ee <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bee:	2b40      	cmp	r3, #64	@ 0x40
 8004bf0:	d141      	bne.n	8004c76 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	3314      	adds	r3, #20
 8004bf8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004c00:	e853 3f00 	ldrex	r3, [r3]
 8004c04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004c08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004c0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	3314      	adds	r3, #20
 8004c1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004c1e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004c22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004c2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004c2e:	e841 2300 	strex	r3, r2, [r1]
 8004c32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004c36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1d9      	bne.n	8004bf2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d013      	beq.n	8004c6e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c4a:	4a7e      	ldr	r2, [pc, #504]	@ (8004e44 <HAL_UART_IRQHandler+0x3e0>)
 8004c4c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c52:	4618      	mov	r0, r3
 8004c54:	f7fd fc29 	bl	80024aa <HAL_DMA_Abort_IT>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d016      	beq.n	8004c8c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004c68:	4610      	mov	r0, r2
 8004c6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c6c:	e00e      	b.n	8004c8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 f994 	bl	8004f9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c74:	e00a      	b.n	8004c8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 f990 	bl	8004f9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c7c:	e006      	b.n	8004c8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 f98c 	bl	8004f9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004c8a:	e175      	b.n	8004f78 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c8c:	bf00      	nop
    return;
 8004c8e:	e173      	b.n	8004f78 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	f040 814f 	bne.w	8004f38 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c9e:	f003 0310 	and.w	r3, r3, #16
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	f000 8148 	beq.w	8004f38 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004ca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cac:	f003 0310 	and.w	r3, r3, #16
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f000 8141 	beq.w	8004f38 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	60bb      	str	r3, [r7, #8]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	60bb      	str	r3, [r7, #8]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	60bb      	str	r3, [r7, #8]
 8004cca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cd6:	2b40      	cmp	r3, #64	@ 0x40
 8004cd8:	f040 80b6 	bne.w	8004e48 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ce8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f000 8145 	beq.w	8004f7c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004cf6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	f080 813e 	bcs.w	8004f7c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004d06:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d0c:	69db      	ldr	r3, [r3, #28]
 8004d0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d12:	f000 8088 	beq.w	8004e26 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	330c      	adds	r3, #12
 8004d1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d20:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004d24:	e853 3f00 	ldrex	r3, [r3]
 8004d28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004d2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004d30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	330c      	adds	r3, #12
 8004d3e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004d42:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004d46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004d4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004d52:	e841 2300 	strex	r3, r2, [r1]
 8004d56:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004d5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1d9      	bne.n	8004d16 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	3314      	adds	r3, #20
 8004d68:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d6c:	e853 3f00 	ldrex	r3, [r3]
 8004d70:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004d72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004d74:	f023 0301 	bic.w	r3, r3, #1
 8004d78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	3314      	adds	r3, #20
 8004d82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004d86:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004d8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004d8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004d92:	e841 2300 	strex	r3, r2, [r1]
 8004d96:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004d98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1e1      	bne.n	8004d62 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	3314      	adds	r3, #20
 8004da4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004da8:	e853 3f00 	ldrex	r3, [r3]
 8004dac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004dae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004db0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004db4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	3314      	adds	r3, #20
 8004dbe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004dc2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004dc4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004dc8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004dca:	e841 2300 	strex	r3, r2, [r1]
 8004dce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004dd0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1e3      	bne.n	8004d9e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2220      	movs	r2, #32
 8004dda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	330c      	adds	r3, #12
 8004dea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004dee:	e853 3f00 	ldrex	r3, [r3]
 8004df2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004df4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004df6:	f023 0310 	bic.w	r3, r3, #16
 8004dfa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	330c      	adds	r3, #12
 8004e04:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004e08:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004e0a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004e0e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004e10:	e841 2300 	strex	r3, r2, [r1]
 8004e14:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004e16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d1e3      	bne.n	8004de4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7fd fad2 	bl	80023ca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2202      	movs	r2, #2
 8004e2a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f000 f8b7 	bl	8004fb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e42:	e09b      	b.n	8004f7c <HAL_UART_IRQHandler+0x518>
 8004e44:	080051b5 	.word	0x080051b5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	f000 808e 	beq.w	8004f80 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004e64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	f000 8089 	beq.w	8004f80 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	330c      	adds	r3, #12
 8004e74:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e78:	e853 3f00 	ldrex	r3, [r3]
 8004e7c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e84:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	330c      	adds	r3, #12
 8004e8e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004e92:	647a      	str	r2, [r7, #68]	@ 0x44
 8004e94:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e96:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e9a:	e841 2300 	strex	r3, r2, [r1]
 8004e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004ea0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1e3      	bne.n	8004e6e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	3314      	adds	r3, #20
 8004eac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb0:	e853 3f00 	ldrex	r3, [r3]
 8004eb4:	623b      	str	r3, [r7, #32]
   return(result);
 8004eb6:	6a3b      	ldr	r3, [r7, #32]
 8004eb8:	f023 0301 	bic.w	r3, r3, #1
 8004ebc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	3314      	adds	r3, #20
 8004ec6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004eca:	633a      	str	r2, [r7, #48]	@ 0x30
 8004ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ece:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ed0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ed2:	e841 2300 	strex	r3, r2, [r1]
 8004ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d1e3      	bne.n	8004ea6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2220      	movs	r2, #32
 8004ee2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	330c      	adds	r3, #12
 8004ef2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	e853 3f00 	ldrex	r3, [r3]
 8004efa:	60fb      	str	r3, [r7, #12]
   return(result);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f023 0310 	bic.w	r3, r3, #16
 8004f02:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	330c      	adds	r3, #12
 8004f0c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004f10:	61fa      	str	r2, [r7, #28]
 8004f12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f14:	69b9      	ldr	r1, [r7, #24]
 8004f16:	69fa      	ldr	r2, [r7, #28]
 8004f18:	e841 2300 	strex	r3, r2, [r1]
 8004f1c:	617b      	str	r3, [r7, #20]
   return(result);
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d1e3      	bne.n	8004eec <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2202      	movs	r2, #2
 8004f28:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004f2e:	4619      	mov	r1, r3
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 f83d 	bl	8004fb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f36:	e023      	b.n	8004f80 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d009      	beq.n	8004f58 <HAL_UART_IRQHandler+0x4f4>
 8004f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d003      	beq.n	8004f58 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 f943 	bl	80051dc <UART_Transmit_IT>
    return;
 8004f56:	e014      	b.n	8004f82 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d00e      	beq.n	8004f82 <HAL_UART_IRQHandler+0x51e>
 8004f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d008      	beq.n	8004f82 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 f983 	bl	800527c <UART_EndTransmit_IT>
    return;
 8004f76:	e004      	b.n	8004f82 <HAL_UART_IRQHandler+0x51e>
    return;
 8004f78:	bf00      	nop
 8004f7a:	e002      	b.n	8004f82 <HAL_UART_IRQHandler+0x51e>
      return;
 8004f7c:	bf00      	nop
 8004f7e:	e000      	b.n	8004f82 <HAL_UART_IRQHandler+0x51e>
      return;
 8004f80:	bf00      	nop
  }
}
 8004f82:	37e8      	adds	r7, #232	@ 0xe8
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004f90:	bf00      	nop
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004fa4:	bf00      	nop
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	460b      	mov	r3, r1
 8004fba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004fbc:	bf00      	nop
 8004fbe:	370c      	adds	r7, #12
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b086      	sub	sp, #24
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	603b      	str	r3, [r7, #0]
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fd8:	e03b      	b.n	8005052 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fda:	6a3b      	ldr	r3, [r7, #32]
 8004fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe0:	d037      	beq.n	8005052 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fe2:	f7fd f8b1 	bl	8002148 <HAL_GetTick>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	6a3a      	ldr	r2, [r7, #32]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d302      	bcc.n	8004ff8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ff2:	6a3b      	ldr	r3, [r7, #32]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d101      	bne.n	8004ffc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e03a      	b.n	8005072 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	f003 0304 	and.w	r3, r3, #4
 8005006:	2b00      	cmp	r3, #0
 8005008:	d023      	beq.n	8005052 <UART_WaitOnFlagUntilTimeout+0x8a>
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	2b80      	cmp	r3, #128	@ 0x80
 800500e:	d020      	beq.n	8005052 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	2b40      	cmp	r3, #64	@ 0x40
 8005014:	d01d      	beq.n	8005052 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0308 	and.w	r3, r3, #8
 8005020:	2b08      	cmp	r3, #8
 8005022:	d116      	bne.n	8005052 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005024:	2300      	movs	r3, #0
 8005026:	617b      	str	r3, [r7, #20]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	617b      	str	r3, [r7, #20]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	617b      	str	r3, [r7, #20]
 8005038:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800503a:	68f8      	ldr	r0, [r7, #12]
 800503c:	f000 f857 	bl	80050ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2208      	movs	r2, #8
 8005044:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e00f      	b.n	8005072 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	4013      	ands	r3, r2
 800505c:	68ba      	ldr	r2, [r7, #8]
 800505e:	429a      	cmp	r2, r3
 8005060:	bf0c      	ite	eq
 8005062:	2301      	moveq	r3, #1
 8005064:	2300      	movne	r3, #0
 8005066:	b2db      	uxtb	r3, r3
 8005068:	461a      	mov	r2, r3
 800506a:	79fb      	ldrb	r3, [r7, #7]
 800506c:	429a      	cmp	r2, r3
 800506e:	d0b4      	beq.n	8004fda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	3718      	adds	r7, #24
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}

0800507a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800507a:	b480      	push	{r7}
 800507c:	b085      	sub	sp, #20
 800507e:	af00      	add	r7, sp, #0
 8005080:	60f8      	str	r0, [r7, #12]
 8005082:	60b9      	str	r1, [r7, #8]
 8005084:	4613      	mov	r3, r2
 8005086:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	68ba      	ldr	r2, [r7, #8]
 800508c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	88fa      	ldrh	r2, [r7, #6]
 8005092:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	88fa      	ldrh	r2, [r7, #6]
 8005098:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2200      	movs	r2, #0
 800509e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2222      	movs	r2, #34	@ 0x22
 80050a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d007      	beq.n	80050c0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68da      	ldr	r2, [r3, #12]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050be:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	695a      	ldr	r2, [r3, #20]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f042 0201 	orr.w	r2, r2, #1
 80050ce:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68da      	ldr	r2, [r3, #12]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f042 0220 	orr.w	r2, r2, #32
 80050de:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3714      	adds	r7, #20
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr

080050ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050ee:	b480      	push	{r7}
 80050f0:	b095      	sub	sp, #84	@ 0x54
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	330c      	adds	r3, #12
 80050fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005100:	e853 3f00 	ldrex	r3, [r3]
 8005104:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005108:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800510c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	330c      	adds	r3, #12
 8005114:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005116:	643a      	str	r2, [r7, #64]	@ 0x40
 8005118:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800511a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800511c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800511e:	e841 2300 	strex	r3, r2, [r1]
 8005122:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005126:	2b00      	cmp	r3, #0
 8005128:	d1e5      	bne.n	80050f6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	3314      	adds	r3, #20
 8005130:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005132:	6a3b      	ldr	r3, [r7, #32]
 8005134:	e853 3f00 	ldrex	r3, [r3]
 8005138:	61fb      	str	r3, [r7, #28]
   return(result);
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	f023 0301 	bic.w	r3, r3, #1
 8005140:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	3314      	adds	r3, #20
 8005148:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800514a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800514c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005150:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005152:	e841 2300 	strex	r3, r2, [r1]
 8005156:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1e5      	bne.n	800512a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005162:	2b01      	cmp	r3, #1
 8005164:	d119      	bne.n	800519a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	330c      	adds	r3, #12
 800516c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	e853 3f00 	ldrex	r3, [r3]
 8005174:	60bb      	str	r3, [r7, #8]
   return(result);
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	f023 0310 	bic.w	r3, r3, #16
 800517c:	647b      	str	r3, [r7, #68]	@ 0x44
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	330c      	adds	r3, #12
 8005184:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005186:	61ba      	str	r2, [r7, #24]
 8005188:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800518a:	6979      	ldr	r1, [r7, #20]
 800518c:	69ba      	ldr	r2, [r7, #24]
 800518e:	e841 2300 	strex	r3, r2, [r1]
 8005192:	613b      	str	r3, [r7, #16]
   return(result);
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d1e5      	bne.n	8005166 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2220      	movs	r2, #32
 800519e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80051a8:	bf00      	nop
 80051aa:	3754      	adds	r7, #84	@ 0x54
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051ce:	68f8      	ldr	r0, [r7, #12]
 80051d0:	f7ff fee4 	bl	8004f9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051d4:	bf00      	nop
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80051dc:	b480      	push	{r7}
 80051de:	b085      	sub	sp, #20
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	2b21      	cmp	r3, #33	@ 0x21
 80051ee:	d13e      	bne.n	800526e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051f8:	d114      	bne.n	8005224 <UART_Transmit_IT+0x48>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d110      	bne.n	8005224 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	881b      	ldrh	r3, [r3, #0]
 800520c:	461a      	mov	r2, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005216:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a1b      	ldr	r3, [r3, #32]
 800521c:	1c9a      	adds	r2, r3, #2
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	621a      	str	r2, [r3, #32]
 8005222:	e008      	b.n	8005236 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a1b      	ldr	r3, [r3, #32]
 8005228:	1c59      	adds	r1, r3, #1
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	6211      	str	r1, [r2, #32]
 800522e:	781a      	ldrb	r2, [r3, #0]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800523a:	b29b      	uxth	r3, r3
 800523c:	3b01      	subs	r3, #1
 800523e:	b29b      	uxth	r3, r3
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	4619      	mov	r1, r3
 8005244:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005246:	2b00      	cmp	r3, #0
 8005248:	d10f      	bne.n	800526a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68da      	ldr	r2, [r3, #12]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005258:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68da      	ldr	r2, [r3, #12]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005268:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800526a:	2300      	movs	r3, #0
 800526c:	e000      	b.n	8005270 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800526e:	2302      	movs	r3, #2
  }
}
 8005270:	4618      	mov	r0, r3
 8005272:	3714      	adds	r7, #20
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b082      	sub	sp, #8
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68da      	ldr	r2, [r3, #12]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005292:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2220      	movs	r2, #32
 8005298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f7ff fe73 	bl	8004f88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80052a2:	2300      	movs	r3, #0
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3708      	adds	r7, #8
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b08c      	sub	sp, #48	@ 0x30
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	2b22      	cmp	r3, #34	@ 0x22
 80052be:	f040 80ae 	bne.w	800541e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052ca:	d117      	bne.n	80052fc <UART_Receive_IT+0x50>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d113      	bne.n	80052fc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80052d4:	2300      	movs	r3, #0
 80052d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052dc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052ea:	b29a      	uxth	r2, r3
 80052ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ee:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052f4:	1c9a      	adds	r2, r3, #2
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	629a      	str	r2, [r3, #40]	@ 0x28
 80052fa:	e026      	b.n	800534a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005300:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005302:	2300      	movs	r3, #0
 8005304:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800530e:	d007      	beq.n	8005320 <UART_Receive_IT+0x74>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d10a      	bne.n	800532e <UART_Receive_IT+0x82>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d106      	bne.n	800532e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	b2da      	uxtb	r2, r3
 8005328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800532a:	701a      	strb	r2, [r3, #0]
 800532c:	e008      	b.n	8005340 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	b2db      	uxtb	r3, r3
 8005336:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800533a:	b2da      	uxtb	r2, r3
 800533c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800533e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005344:	1c5a      	adds	r2, r3, #1
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800534e:	b29b      	uxth	r3, r3
 8005350:	3b01      	subs	r3, #1
 8005352:	b29b      	uxth	r3, r3
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	4619      	mov	r1, r3
 8005358:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800535a:	2b00      	cmp	r3, #0
 800535c:	d15d      	bne.n	800541a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68da      	ldr	r2, [r3, #12]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f022 0220 	bic.w	r2, r2, #32
 800536c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68da      	ldr	r2, [r3, #12]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800537c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	695a      	ldr	r2, [r3, #20]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f022 0201 	bic.w	r2, r2, #1
 800538c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2220      	movs	r2, #32
 8005392:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d135      	bne.n	8005410 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	330c      	adds	r3, #12
 80053b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	e853 3f00 	ldrex	r3, [r3]
 80053b8:	613b      	str	r3, [r7, #16]
   return(result);
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	f023 0310 	bic.w	r3, r3, #16
 80053c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	330c      	adds	r3, #12
 80053c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053ca:	623a      	str	r2, [r7, #32]
 80053cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ce:	69f9      	ldr	r1, [r7, #28]
 80053d0:	6a3a      	ldr	r2, [r7, #32]
 80053d2:	e841 2300 	strex	r3, r2, [r1]
 80053d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d1e5      	bne.n	80053aa <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0310 	and.w	r3, r3, #16
 80053e8:	2b10      	cmp	r3, #16
 80053ea:	d10a      	bne.n	8005402 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053ec:	2300      	movs	r3, #0
 80053ee:	60fb      	str	r3, [r7, #12]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	60fb      	str	r3, [r7, #12]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	60fb      	str	r3, [r7, #12]
 8005400:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005406:	4619      	mov	r1, r3
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f7ff fdd1 	bl	8004fb0 <HAL_UARTEx_RxEventCallback>
 800540e:	e002      	b.n	8005416 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f7fc f9dd 	bl	80017d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005416:	2300      	movs	r3, #0
 8005418:	e002      	b.n	8005420 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800541a:	2300      	movs	r3, #0
 800541c:	e000      	b.n	8005420 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800541e:	2302      	movs	r3, #2
  }
}
 8005420:	4618      	mov	r0, r3
 8005422:	3730      	adds	r7, #48	@ 0x30
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005428:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800542c:	b0c0      	sub	sp, #256	@ 0x100
 800542e:	af00      	add	r7, sp, #0
 8005430:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005444:	68d9      	ldr	r1, [r3, #12]
 8005446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	ea40 0301 	orr.w	r3, r0, r1
 8005450:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005456:	689a      	ldr	r2, [r3, #8]
 8005458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	431a      	orrs	r2, r3
 8005460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005464:	695b      	ldr	r3, [r3, #20]
 8005466:	431a      	orrs	r2, r3
 8005468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800546c:	69db      	ldr	r3, [r3, #28]
 800546e:	4313      	orrs	r3, r2
 8005470:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005480:	f021 010c 	bic.w	r1, r1, #12
 8005484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800548e:	430b      	orrs	r3, r1
 8005490:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800549e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054a2:	6999      	ldr	r1, [r3, #24]
 80054a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	ea40 0301 	orr.w	r3, r0, r1
 80054ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80054b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	4b8f      	ldr	r3, [pc, #572]	@ (80056f4 <UART_SetConfig+0x2cc>)
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d005      	beq.n	80054c8 <UART_SetConfig+0xa0>
 80054bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	4b8d      	ldr	r3, [pc, #564]	@ (80056f8 <UART_SetConfig+0x2d0>)
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d104      	bne.n	80054d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80054c8:	f7fe fe2e 	bl	8004128 <HAL_RCC_GetPCLK2Freq>
 80054cc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80054d0:	e003      	b.n	80054da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80054d2:	f7fe fe15 	bl	8004100 <HAL_RCC_GetPCLK1Freq>
 80054d6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054de:	69db      	ldr	r3, [r3, #28]
 80054e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054e4:	f040 810c 	bne.w	8005700 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80054e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054ec:	2200      	movs	r2, #0
 80054ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80054f2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80054f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80054fa:	4622      	mov	r2, r4
 80054fc:	462b      	mov	r3, r5
 80054fe:	1891      	adds	r1, r2, r2
 8005500:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005502:	415b      	adcs	r3, r3
 8005504:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005506:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800550a:	4621      	mov	r1, r4
 800550c:	eb12 0801 	adds.w	r8, r2, r1
 8005510:	4629      	mov	r1, r5
 8005512:	eb43 0901 	adc.w	r9, r3, r1
 8005516:	f04f 0200 	mov.w	r2, #0
 800551a:	f04f 0300 	mov.w	r3, #0
 800551e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005522:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005526:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800552a:	4690      	mov	r8, r2
 800552c:	4699      	mov	r9, r3
 800552e:	4623      	mov	r3, r4
 8005530:	eb18 0303 	adds.w	r3, r8, r3
 8005534:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005538:	462b      	mov	r3, r5
 800553a:	eb49 0303 	adc.w	r3, r9, r3
 800553e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800554e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005552:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005556:	460b      	mov	r3, r1
 8005558:	18db      	adds	r3, r3, r3
 800555a:	653b      	str	r3, [r7, #80]	@ 0x50
 800555c:	4613      	mov	r3, r2
 800555e:	eb42 0303 	adc.w	r3, r2, r3
 8005562:	657b      	str	r3, [r7, #84]	@ 0x54
 8005564:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005568:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800556c:	f7fb fb24 	bl	8000bb8 <__aeabi_uldivmod>
 8005570:	4602      	mov	r2, r0
 8005572:	460b      	mov	r3, r1
 8005574:	4b61      	ldr	r3, [pc, #388]	@ (80056fc <UART_SetConfig+0x2d4>)
 8005576:	fba3 2302 	umull	r2, r3, r3, r2
 800557a:	095b      	lsrs	r3, r3, #5
 800557c:	011c      	lsls	r4, r3, #4
 800557e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005582:	2200      	movs	r2, #0
 8005584:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005588:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800558c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005590:	4642      	mov	r2, r8
 8005592:	464b      	mov	r3, r9
 8005594:	1891      	adds	r1, r2, r2
 8005596:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005598:	415b      	adcs	r3, r3
 800559a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800559c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80055a0:	4641      	mov	r1, r8
 80055a2:	eb12 0a01 	adds.w	sl, r2, r1
 80055a6:	4649      	mov	r1, r9
 80055a8:	eb43 0b01 	adc.w	fp, r3, r1
 80055ac:	f04f 0200 	mov.w	r2, #0
 80055b0:	f04f 0300 	mov.w	r3, #0
 80055b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80055b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80055bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055c0:	4692      	mov	sl, r2
 80055c2:	469b      	mov	fp, r3
 80055c4:	4643      	mov	r3, r8
 80055c6:	eb1a 0303 	adds.w	r3, sl, r3
 80055ca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80055ce:	464b      	mov	r3, r9
 80055d0:	eb4b 0303 	adc.w	r3, fp, r3
 80055d4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80055d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80055e4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80055e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80055ec:	460b      	mov	r3, r1
 80055ee:	18db      	adds	r3, r3, r3
 80055f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80055f2:	4613      	mov	r3, r2
 80055f4:	eb42 0303 	adc.w	r3, r2, r3
 80055f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80055fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80055fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005602:	f7fb fad9 	bl	8000bb8 <__aeabi_uldivmod>
 8005606:	4602      	mov	r2, r0
 8005608:	460b      	mov	r3, r1
 800560a:	4611      	mov	r1, r2
 800560c:	4b3b      	ldr	r3, [pc, #236]	@ (80056fc <UART_SetConfig+0x2d4>)
 800560e:	fba3 2301 	umull	r2, r3, r3, r1
 8005612:	095b      	lsrs	r3, r3, #5
 8005614:	2264      	movs	r2, #100	@ 0x64
 8005616:	fb02 f303 	mul.w	r3, r2, r3
 800561a:	1acb      	subs	r3, r1, r3
 800561c:	00db      	lsls	r3, r3, #3
 800561e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005622:	4b36      	ldr	r3, [pc, #216]	@ (80056fc <UART_SetConfig+0x2d4>)
 8005624:	fba3 2302 	umull	r2, r3, r3, r2
 8005628:	095b      	lsrs	r3, r3, #5
 800562a:	005b      	lsls	r3, r3, #1
 800562c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005630:	441c      	add	r4, r3
 8005632:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005636:	2200      	movs	r2, #0
 8005638:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800563c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005640:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005644:	4642      	mov	r2, r8
 8005646:	464b      	mov	r3, r9
 8005648:	1891      	adds	r1, r2, r2
 800564a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800564c:	415b      	adcs	r3, r3
 800564e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005650:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005654:	4641      	mov	r1, r8
 8005656:	1851      	adds	r1, r2, r1
 8005658:	6339      	str	r1, [r7, #48]	@ 0x30
 800565a:	4649      	mov	r1, r9
 800565c:	414b      	adcs	r3, r1
 800565e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005660:	f04f 0200 	mov.w	r2, #0
 8005664:	f04f 0300 	mov.w	r3, #0
 8005668:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800566c:	4659      	mov	r1, fp
 800566e:	00cb      	lsls	r3, r1, #3
 8005670:	4651      	mov	r1, sl
 8005672:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005676:	4651      	mov	r1, sl
 8005678:	00ca      	lsls	r2, r1, #3
 800567a:	4610      	mov	r0, r2
 800567c:	4619      	mov	r1, r3
 800567e:	4603      	mov	r3, r0
 8005680:	4642      	mov	r2, r8
 8005682:	189b      	adds	r3, r3, r2
 8005684:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005688:	464b      	mov	r3, r9
 800568a:	460a      	mov	r2, r1
 800568c:	eb42 0303 	adc.w	r3, r2, r3
 8005690:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80056a0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80056a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80056a8:	460b      	mov	r3, r1
 80056aa:	18db      	adds	r3, r3, r3
 80056ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056ae:	4613      	mov	r3, r2
 80056b0:	eb42 0303 	adc.w	r3, r2, r3
 80056b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80056ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80056be:	f7fb fa7b 	bl	8000bb8 <__aeabi_uldivmod>
 80056c2:	4602      	mov	r2, r0
 80056c4:	460b      	mov	r3, r1
 80056c6:	4b0d      	ldr	r3, [pc, #52]	@ (80056fc <UART_SetConfig+0x2d4>)
 80056c8:	fba3 1302 	umull	r1, r3, r3, r2
 80056cc:	095b      	lsrs	r3, r3, #5
 80056ce:	2164      	movs	r1, #100	@ 0x64
 80056d0:	fb01 f303 	mul.w	r3, r1, r3
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	00db      	lsls	r3, r3, #3
 80056d8:	3332      	adds	r3, #50	@ 0x32
 80056da:	4a08      	ldr	r2, [pc, #32]	@ (80056fc <UART_SetConfig+0x2d4>)
 80056dc:	fba2 2303 	umull	r2, r3, r2, r3
 80056e0:	095b      	lsrs	r3, r3, #5
 80056e2:	f003 0207 	and.w	r2, r3, #7
 80056e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4422      	add	r2, r4
 80056ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80056f0:	e106      	b.n	8005900 <UART_SetConfig+0x4d8>
 80056f2:	bf00      	nop
 80056f4:	40011000 	.word	0x40011000
 80056f8:	40011400 	.word	0x40011400
 80056fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005700:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005704:	2200      	movs	r2, #0
 8005706:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800570a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800570e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005712:	4642      	mov	r2, r8
 8005714:	464b      	mov	r3, r9
 8005716:	1891      	adds	r1, r2, r2
 8005718:	6239      	str	r1, [r7, #32]
 800571a:	415b      	adcs	r3, r3
 800571c:	627b      	str	r3, [r7, #36]	@ 0x24
 800571e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005722:	4641      	mov	r1, r8
 8005724:	1854      	adds	r4, r2, r1
 8005726:	4649      	mov	r1, r9
 8005728:	eb43 0501 	adc.w	r5, r3, r1
 800572c:	f04f 0200 	mov.w	r2, #0
 8005730:	f04f 0300 	mov.w	r3, #0
 8005734:	00eb      	lsls	r3, r5, #3
 8005736:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800573a:	00e2      	lsls	r2, r4, #3
 800573c:	4614      	mov	r4, r2
 800573e:	461d      	mov	r5, r3
 8005740:	4643      	mov	r3, r8
 8005742:	18e3      	adds	r3, r4, r3
 8005744:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005748:	464b      	mov	r3, r9
 800574a:	eb45 0303 	adc.w	r3, r5, r3
 800574e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800575e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005762:	f04f 0200 	mov.w	r2, #0
 8005766:	f04f 0300 	mov.w	r3, #0
 800576a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800576e:	4629      	mov	r1, r5
 8005770:	008b      	lsls	r3, r1, #2
 8005772:	4621      	mov	r1, r4
 8005774:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005778:	4621      	mov	r1, r4
 800577a:	008a      	lsls	r2, r1, #2
 800577c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005780:	f7fb fa1a 	bl	8000bb8 <__aeabi_uldivmod>
 8005784:	4602      	mov	r2, r0
 8005786:	460b      	mov	r3, r1
 8005788:	4b60      	ldr	r3, [pc, #384]	@ (800590c <UART_SetConfig+0x4e4>)
 800578a:	fba3 2302 	umull	r2, r3, r3, r2
 800578e:	095b      	lsrs	r3, r3, #5
 8005790:	011c      	lsls	r4, r3, #4
 8005792:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005796:	2200      	movs	r2, #0
 8005798:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800579c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80057a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80057a4:	4642      	mov	r2, r8
 80057a6:	464b      	mov	r3, r9
 80057a8:	1891      	adds	r1, r2, r2
 80057aa:	61b9      	str	r1, [r7, #24]
 80057ac:	415b      	adcs	r3, r3
 80057ae:	61fb      	str	r3, [r7, #28]
 80057b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057b4:	4641      	mov	r1, r8
 80057b6:	1851      	adds	r1, r2, r1
 80057b8:	6139      	str	r1, [r7, #16]
 80057ba:	4649      	mov	r1, r9
 80057bc:	414b      	adcs	r3, r1
 80057be:	617b      	str	r3, [r7, #20]
 80057c0:	f04f 0200 	mov.w	r2, #0
 80057c4:	f04f 0300 	mov.w	r3, #0
 80057c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80057cc:	4659      	mov	r1, fp
 80057ce:	00cb      	lsls	r3, r1, #3
 80057d0:	4651      	mov	r1, sl
 80057d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057d6:	4651      	mov	r1, sl
 80057d8:	00ca      	lsls	r2, r1, #3
 80057da:	4610      	mov	r0, r2
 80057dc:	4619      	mov	r1, r3
 80057de:	4603      	mov	r3, r0
 80057e0:	4642      	mov	r2, r8
 80057e2:	189b      	adds	r3, r3, r2
 80057e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80057e8:	464b      	mov	r3, r9
 80057ea:	460a      	mov	r2, r1
 80057ec:	eb42 0303 	adc.w	r3, r2, r3
 80057f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80057f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80057fe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005800:	f04f 0200 	mov.w	r2, #0
 8005804:	f04f 0300 	mov.w	r3, #0
 8005808:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800580c:	4649      	mov	r1, r9
 800580e:	008b      	lsls	r3, r1, #2
 8005810:	4641      	mov	r1, r8
 8005812:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005816:	4641      	mov	r1, r8
 8005818:	008a      	lsls	r2, r1, #2
 800581a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800581e:	f7fb f9cb 	bl	8000bb8 <__aeabi_uldivmod>
 8005822:	4602      	mov	r2, r0
 8005824:	460b      	mov	r3, r1
 8005826:	4611      	mov	r1, r2
 8005828:	4b38      	ldr	r3, [pc, #224]	@ (800590c <UART_SetConfig+0x4e4>)
 800582a:	fba3 2301 	umull	r2, r3, r3, r1
 800582e:	095b      	lsrs	r3, r3, #5
 8005830:	2264      	movs	r2, #100	@ 0x64
 8005832:	fb02 f303 	mul.w	r3, r2, r3
 8005836:	1acb      	subs	r3, r1, r3
 8005838:	011b      	lsls	r3, r3, #4
 800583a:	3332      	adds	r3, #50	@ 0x32
 800583c:	4a33      	ldr	r2, [pc, #204]	@ (800590c <UART_SetConfig+0x4e4>)
 800583e:	fba2 2303 	umull	r2, r3, r2, r3
 8005842:	095b      	lsrs	r3, r3, #5
 8005844:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005848:	441c      	add	r4, r3
 800584a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800584e:	2200      	movs	r2, #0
 8005850:	673b      	str	r3, [r7, #112]	@ 0x70
 8005852:	677a      	str	r2, [r7, #116]	@ 0x74
 8005854:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005858:	4642      	mov	r2, r8
 800585a:	464b      	mov	r3, r9
 800585c:	1891      	adds	r1, r2, r2
 800585e:	60b9      	str	r1, [r7, #8]
 8005860:	415b      	adcs	r3, r3
 8005862:	60fb      	str	r3, [r7, #12]
 8005864:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005868:	4641      	mov	r1, r8
 800586a:	1851      	adds	r1, r2, r1
 800586c:	6039      	str	r1, [r7, #0]
 800586e:	4649      	mov	r1, r9
 8005870:	414b      	adcs	r3, r1
 8005872:	607b      	str	r3, [r7, #4]
 8005874:	f04f 0200 	mov.w	r2, #0
 8005878:	f04f 0300 	mov.w	r3, #0
 800587c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005880:	4659      	mov	r1, fp
 8005882:	00cb      	lsls	r3, r1, #3
 8005884:	4651      	mov	r1, sl
 8005886:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800588a:	4651      	mov	r1, sl
 800588c:	00ca      	lsls	r2, r1, #3
 800588e:	4610      	mov	r0, r2
 8005890:	4619      	mov	r1, r3
 8005892:	4603      	mov	r3, r0
 8005894:	4642      	mov	r2, r8
 8005896:	189b      	adds	r3, r3, r2
 8005898:	66bb      	str	r3, [r7, #104]	@ 0x68
 800589a:	464b      	mov	r3, r9
 800589c:	460a      	mov	r2, r1
 800589e:	eb42 0303 	adc.w	r3, r2, r3
 80058a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80058a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80058ae:	667a      	str	r2, [r7, #100]	@ 0x64
 80058b0:	f04f 0200 	mov.w	r2, #0
 80058b4:	f04f 0300 	mov.w	r3, #0
 80058b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80058bc:	4649      	mov	r1, r9
 80058be:	008b      	lsls	r3, r1, #2
 80058c0:	4641      	mov	r1, r8
 80058c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058c6:	4641      	mov	r1, r8
 80058c8:	008a      	lsls	r2, r1, #2
 80058ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80058ce:	f7fb f973 	bl	8000bb8 <__aeabi_uldivmod>
 80058d2:	4602      	mov	r2, r0
 80058d4:	460b      	mov	r3, r1
 80058d6:	4b0d      	ldr	r3, [pc, #52]	@ (800590c <UART_SetConfig+0x4e4>)
 80058d8:	fba3 1302 	umull	r1, r3, r3, r2
 80058dc:	095b      	lsrs	r3, r3, #5
 80058de:	2164      	movs	r1, #100	@ 0x64
 80058e0:	fb01 f303 	mul.w	r3, r1, r3
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	011b      	lsls	r3, r3, #4
 80058e8:	3332      	adds	r3, #50	@ 0x32
 80058ea:	4a08      	ldr	r2, [pc, #32]	@ (800590c <UART_SetConfig+0x4e4>)
 80058ec:	fba2 2303 	umull	r2, r3, r2, r3
 80058f0:	095b      	lsrs	r3, r3, #5
 80058f2:	f003 020f 	and.w	r2, r3, #15
 80058f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4422      	add	r2, r4
 80058fe:	609a      	str	r2, [r3, #8]
}
 8005900:	bf00      	nop
 8005902:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005906:	46bd      	mov	sp, r7
 8005908:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800590c:	51eb851f 	.word	0x51eb851f

08005910 <__cvt>:
 8005910:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005914:	ec57 6b10 	vmov	r6, r7, d0
 8005918:	2f00      	cmp	r7, #0
 800591a:	460c      	mov	r4, r1
 800591c:	4619      	mov	r1, r3
 800591e:	463b      	mov	r3, r7
 8005920:	bfbb      	ittet	lt
 8005922:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005926:	461f      	movlt	r7, r3
 8005928:	2300      	movge	r3, #0
 800592a:	232d      	movlt	r3, #45	@ 0x2d
 800592c:	700b      	strb	r3, [r1, #0]
 800592e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005930:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005934:	4691      	mov	r9, r2
 8005936:	f023 0820 	bic.w	r8, r3, #32
 800593a:	bfbc      	itt	lt
 800593c:	4632      	movlt	r2, r6
 800593e:	4616      	movlt	r6, r2
 8005940:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005944:	d005      	beq.n	8005952 <__cvt+0x42>
 8005946:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800594a:	d100      	bne.n	800594e <__cvt+0x3e>
 800594c:	3401      	adds	r4, #1
 800594e:	2102      	movs	r1, #2
 8005950:	e000      	b.n	8005954 <__cvt+0x44>
 8005952:	2103      	movs	r1, #3
 8005954:	ab03      	add	r3, sp, #12
 8005956:	9301      	str	r3, [sp, #4]
 8005958:	ab02      	add	r3, sp, #8
 800595a:	9300      	str	r3, [sp, #0]
 800595c:	ec47 6b10 	vmov	d0, r6, r7
 8005960:	4653      	mov	r3, sl
 8005962:	4622      	mov	r2, r4
 8005964:	f000 ff00 	bl	8006768 <_dtoa_r>
 8005968:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800596c:	4605      	mov	r5, r0
 800596e:	d119      	bne.n	80059a4 <__cvt+0x94>
 8005970:	f019 0f01 	tst.w	r9, #1
 8005974:	d00e      	beq.n	8005994 <__cvt+0x84>
 8005976:	eb00 0904 	add.w	r9, r0, r4
 800597a:	2200      	movs	r2, #0
 800597c:	2300      	movs	r3, #0
 800597e:	4630      	mov	r0, r6
 8005980:	4639      	mov	r1, r7
 8005982:	f7fb f8a9 	bl	8000ad8 <__aeabi_dcmpeq>
 8005986:	b108      	cbz	r0, 800598c <__cvt+0x7c>
 8005988:	f8cd 900c 	str.w	r9, [sp, #12]
 800598c:	2230      	movs	r2, #48	@ 0x30
 800598e:	9b03      	ldr	r3, [sp, #12]
 8005990:	454b      	cmp	r3, r9
 8005992:	d31e      	bcc.n	80059d2 <__cvt+0xc2>
 8005994:	9b03      	ldr	r3, [sp, #12]
 8005996:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005998:	1b5b      	subs	r3, r3, r5
 800599a:	4628      	mov	r0, r5
 800599c:	6013      	str	r3, [r2, #0]
 800599e:	b004      	add	sp, #16
 80059a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059a4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80059a8:	eb00 0904 	add.w	r9, r0, r4
 80059ac:	d1e5      	bne.n	800597a <__cvt+0x6a>
 80059ae:	7803      	ldrb	r3, [r0, #0]
 80059b0:	2b30      	cmp	r3, #48	@ 0x30
 80059b2:	d10a      	bne.n	80059ca <__cvt+0xba>
 80059b4:	2200      	movs	r2, #0
 80059b6:	2300      	movs	r3, #0
 80059b8:	4630      	mov	r0, r6
 80059ba:	4639      	mov	r1, r7
 80059bc:	f7fb f88c 	bl	8000ad8 <__aeabi_dcmpeq>
 80059c0:	b918      	cbnz	r0, 80059ca <__cvt+0xba>
 80059c2:	f1c4 0401 	rsb	r4, r4, #1
 80059c6:	f8ca 4000 	str.w	r4, [sl]
 80059ca:	f8da 3000 	ldr.w	r3, [sl]
 80059ce:	4499      	add	r9, r3
 80059d0:	e7d3      	b.n	800597a <__cvt+0x6a>
 80059d2:	1c59      	adds	r1, r3, #1
 80059d4:	9103      	str	r1, [sp, #12]
 80059d6:	701a      	strb	r2, [r3, #0]
 80059d8:	e7d9      	b.n	800598e <__cvt+0x7e>

080059da <__exponent>:
 80059da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059dc:	2900      	cmp	r1, #0
 80059de:	bfba      	itte	lt
 80059e0:	4249      	neglt	r1, r1
 80059e2:	232d      	movlt	r3, #45	@ 0x2d
 80059e4:	232b      	movge	r3, #43	@ 0x2b
 80059e6:	2909      	cmp	r1, #9
 80059e8:	7002      	strb	r2, [r0, #0]
 80059ea:	7043      	strb	r3, [r0, #1]
 80059ec:	dd29      	ble.n	8005a42 <__exponent+0x68>
 80059ee:	f10d 0307 	add.w	r3, sp, #7
 80059f2:	461d      	mov	r5, r3
 80059f4:	270a      	movs	r7, #10
 80059f6:	461a      	mov	r2, r3
 80059f8:	fbb1 f6f7 	udiv	r6, r1, r7
 80059fc:	fb07 1416 	mls	r4, r7, r6, r1
 8005a00:	3430      	adds	r4, #48	@ 0x30
 8005a02:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005a06:	460c      	mov	r4, r1
 8005a08:	2c63      	cmp	r4, #99	@ 0x63
 8005a0a:	f103 33ff 	add.w	r3, r3, #4294967295
 8005a0e:	4631      	mov	r1, r6
 8005a10:	dcf1      	bgt.n	80059f6 <__exponent+0x1c>
 8005a12:	3130      	adds	r1, #48	@ 0x30
 8005a14:	1e94      	subs	r4, r2, #2
 8005a16:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005a1a:	1c41      	adds	r1, r0, #1
 8005a1c:	4623      	mov	r3, r4
 8005a1e:	42ab      	cmp	r3, r5
 8005a20:	d30a      	bcc.n	8005a38 <__exponent+0x5e>
 8005a22:	f10d 0309 	add.w	r3, sp, #9
 8005a26:	1a9b      	subs	r3, r3, r2
 8005a28:	42ac      	cmp	r4, r5
 8005a2a:	bf88      	it	hi
 8005a2c:	2300      	movhi	r3, #0
 8005a2e:	3302      	adds	r3, #2
 8005a30:	4403      	add	r3, r0
 8005a32:	1a18      	subs	r0, r3, r0
 8005a34:	b003      	add	sp, #12
 8005a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a38:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005a3c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005a40:	e7ed      	b.n	8005a1e <__exponent+0x44>
 8005a42:	2330      	movs	r3, #48	@ 0x30
 8005a44:	3130      	adds	r1, #48	@ 0x30
 8005a46:	7083      	strb	r3, [r0, #2]
 8005a48:	70c1      	strb	r1, [r0, #3]
 8005a4a:	1d03      	adds	r3, r0, #4
 8005a4c:	e7f1      	b.n	8005a32 <__exponent+0x58>
	...

08005a50 <_printf_float>:
 8005a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a54:	b08d      	sub	sp, #52	@ 0x34
 8005a56:	460c      	mov	r4, r1
 8005a58:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005a5c:	4616      	mov	r6, r2
 8005a5e:	461f      	mov	r7, r3
 8005a60:	4605      	mov	r5, r0
 8005a62:	f000 fd81 	bl	8006568 <_localeconv_r>
 8005a66:	6803      	ldr	r3, [r0, #0]
 8005a68:	9304      	str	r3, [sp, #16]
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7fa fc08 	bl	8000280 <strlen>
 8005a70:	2300      	movs	r3, #0
 8005a72:	930a      	str	r3, [sp, #40]	@ 0x28
 8005a74:	f8d8 3000 	ldr.w	r3, [r8]
 8005a78:	9005      	str	r0, [sp, #20]
 8005a7a:	3307      	adds	r3, #7
 8005a7c:	f023 0307 	bic.w	r3, r3, #7
 8005a80:	f103 0208 	add.w	r2, r3, #8
 8005a84:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005a88:	f8d4 b000 	ldr.w	fp, [r4]
 8005a8c:	f8c8 2000 	str.w	r2, [r8]
 8005a90:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005a94:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005a98:	9307      	str	r3, [sp, #28]
 8005a9a:	f8cd 8018 	str.w	r8, [sp, #24]
 8005a9e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005aa2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005aa6:	4b9c      	ldr	r3, [pc, #624]	@ (8005d18 <_printf_float+0x2c8>)
 8005aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8005aac:	f7fb f846 	bl	8000b3c <__aeabi_dcmpun>
 8005ab0:	bb70      	cbnz	r0, 8005b10 <_printf_float+0xc0>
 8005ab2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ab6:	4b98      	ldr	r3, [pc, #608]	@ (8005d18 <_printf_float+0x2c8>)
 8005ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8005abc:	f7fb f820 	bl	8000b00 <__aeabi_dcmple>
 8005ac0:	bb30      	cbnz	r0, 8005b10 <_printf_float+0xc0>
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	4640      	mov	r0, r8
 8005ac8:	4649      	mov	r1, r9
 8005aca:	f7fb f80f 	bl	8000aec <__aeabi_dcmplt>
 8005ace:	b110      	cbz	r0, 8005ad6 <_printf_float+0x86>
 8005ad0:	232d      	movs	r3, #45	@ 0x2d
 8005ad2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ad6:	4a91      	ldr	r2, [pc, #580]	@ (8005d1c <_printf_float+0x2cc>)
 8005ad8:	4b91      	ldr	r3, [pc, #580]	@ (8005d20 <_printf_float+0x2d0>)
 8005ada:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005ade:	bf94      	ite	ls
 8005ae0:	4690      	movls	r8, r2
 8005ae2:	4698      	movhi	r8, r3
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	6123      	str	r3, [r4, #16]
 8005ae8:	f02b 0304 	bic.w	r3, fp, #4
 8005aec:	6023      	str	r3, [r4, #0]
 8005aee:	f04f 0900 	mov.w	r9, #0
 8005af2:	9700      	str	r7, [sp, #0]
 8005af4:	4633      	mov	r3, r6
 8005af6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005af8:	4621      	mov	r1, r4
 8005afa:	4628      	mov	r0, r5
 8005afc:	f000 f9d2 	bl	8005ea4 <_printf_common>
 8005b00:	3001      	adds	r0, #1
 8005b02:	f040 808d 	bne.w	8005c20 <_printf_float+0x1d0>
 8005b06:	f04f 30ff 	mov.w	r0, #4294967295
 8005b0a:	b00d      	add	sp, #52	@ 0x34
 8005b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b10:	4642      	mov	r2, r8
 8005b12:	464b      	mov	r3, r9
 8005b14:	4640      	mov	r0, r8
 8005b16:	4649      	mov	r1, r9
 8005b18:	f7fb f810 	bl	8000b3c <__aeabi_dcmpun>
 8005b1c:	b140      	cbz	r0, 8005b30 <_printf_float+0xe0>
 8005b1e:	464b      	mov	r3, r9
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	bfbc      	itt	lt
 8005b24:	232d      	movlt	r3, #45	@ 0x2d
 8005b26:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005b2a:	4a7e      	ldr	r2, [pc, #504]	@ (8005d24 <_printf_float+0x2d4>)
 8005b2c:	4b7e      	ldr	r3, [pc, #504]	@ (8005d28 <_printf_float+0x2d8>)
 8005b2e:	e7d4      	b.n	8005ada <_printf_float+0x8a>
 8005b30:	6863      	ldr	r3, [r4, #4]
 8005b32:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005b36:	9206      	str	r2, [sp, #24]
 8005b38:	1c5a      	adds	r2, r3, #1
 8005b3a:	d13b      	bne.n	8005bb4 <_printf_float+0x164>
 8005b3c:	2306      	movs	r3, #6
 8005b3e:	6063      	str	r3, [r4, #4]
 8005b40:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005b44:	2300      	movs	r3, #0
 8005b46:	6022      	str	r2, [r4, #0]
 8005b48:	9303      	str	r3, [sp, #12]
 8005b4a:	ab0a      	add	r3, sp, #40	@ 0x28
 8005b4c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005b50:	ab09      	add	r3, sp, #36	@ 0x24
 8005b52:	9300      	str	r3, [sp, #0]
 8005b54:	6861      	ldr	r1, [r4, #4]
 8005b56:	ec49 8b10 	vmov	d0, r8, r9
 8005b5a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005b5e:	4628      	mov	r0, r5
 8005b60:	f7ff fed6 	bl	8005910 <__cvt>
 8005b64:	9b06      	ldr	r3, [sp, #24]
 8005b66:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005b68:	2b47      	cmp	r3, #71	@ 0x47
 8005b6a:	4680      	mov	r8, r0
 8005b6c:	d129      	bne.n	8005bc2 <_printf_float+0x172>
 8005b6e:	1cc8      	adds	r0, r1, #3
 8005b70:	db02      	blt.n	8005b78 <_printf_float+0x128>
 8005b72:	6863      	ldr	r3, [r4, #4]
 8005b74:	4299      	cmp	r1, r3
 8005b76:	dd41      	ble.n	8005bfc <_printf_float+0x1ac>
 8005b78:	f1aa 0a02 	sub.w	sl, sl, #2
 8005b7c:	fa5f fa8a 	uxtb.w	sl, sl
 8005b80:	3901      	subs	r1, #1
 8005b82:	4652      	mov	r2, sl
 8005b84:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005b88:	9109      	str	r1, [sp, #36]	@ 0x24
 8005b8a:	f7ff ff26 	bl	80059da <__exponent>
 8005b8e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005b90:	1813      	adds	r3, r2, r0
 8005b92:	2a01      	cmp	r2, #1
 8005b94:	4681      	mov	r9, r0
 8005b96:	6123      	str	r3, [r4, #16]
 8005b98:	dc02      	bgt.n	8005ba0 <_printf_float+0x150>
 8005b9a:	6822      	ldr	r2, [r4, #0]
 8005b9c:	07d2      	lsls	r2, r2, #31
 8005b9e:	d501      	bpl.n	8005ba4 <_printf_float+0x154>
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	6123      	str	r3, [r4, #16]
 8005ba4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d0a2      	beq.n	8005af2 <_printf_float+0xa2>
 8005bac:	232d      	movs	r3, #45	@ 0x2d
 8005bae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005bb2:	e79e      	b.n	8005af2 <_printf_float+0xa2>
 8005bb4:	9a06      	ldr	r2, [sp, #24]
 8005bb6:	2a47      	cmp	r2, #71	@ 0x47
 8005bb8:	d1c2      	bne.n	8005b40 <_printf_float+0xf0>
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d1c0      	bne.n	8005b40 <_printf_float+0xf0>
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e7bd      	b.n	8005b3e <_printf_float+0xee>
 8005bc2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005bc6:	d9db      	bls.n	8005b80 <_printf_float+0x130>
 8005bc8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005bcc:	d118      	bne.n	8005c00 <_printf_float+0x1b0>
 8005bce:	2900      	cmp	r1, #0
 8005bd0:	6863      	ldr	r3, [r4, #4]
 8005bd2:	dd0b      	ble.n	8005bec <_printf_float+0x19c>
 8005bd4:	6121      	str	r1, [r4, #16]
 8005bd6:	b913      	cbnz	r3, 8005bde <_printf_float+0x18e>
 8005bd8:	6822      	ldr	r2, [r4, #0]
 8005bda:	07d0      	lsls	r0, r2, #31
 8005bdc:	d502      	bpl.n	8005be4 <_printf_float+0x194>
 8005bde:	3301      	adds	r3, #1
 8005be0:	440b      	add	r3, r1
 8005be2:	6123      	str	r3, [r4, #16]
 8005be4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005be6:	f04f 0900 	mov.w	r9, #0
 8005bea:	e7db      	b.n	8005ba4 <_printf_float+0x154>
 8005bec:	b913      	cbnz	r3, 8005bf4 <_printf_float+0x1a4>
 8005bee:	6822      	ldr	r2, [r4, #0]
 8005bf0:	07d2      	lsls	r2, r2, #31
 8005bf2:	d501      	bpl.n	8005bf8 <_printf_float+0x1a8>
 8005bf4:	3302      	adds	r3, #2
 8005bf6:	e7f4      	b.n	8005be2 <_printf_float+0x192>
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e7f2      	b.n	8005be2 <_printf_float+0x192>
 8005bfc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005c00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005c02:	4299      	cmp	r1, r3
 8005c04:	db05      	blt.n	8005c12 <_printf_float+0x1c2>
 8005c06:	6823      	ldr	r3, [r4, #0]
 8005c08:	6121      	str	r1, [r4, #16]
 8005c0a:	07d8      	lsls	r0, r3, #31
 8005c0c:	d5ea      	bpl.n	8005be4 <_printf_float+0x194>
 8005c0e:	1c4b      	adds	r3, r1, #1
 8005c10:	e7e7      	b.n	8005be2 <_printf_float+0x192>
 8005c12:	2900      	cmp	r1, #0
 8005c14:	bfd4      	ite	le
 8005c16:	f1c1 0202 	rsble	r2, r1, #2
 8005c1a:	2201      	movgt	r2, #1
 8005c1c:	4413      	add	r3, r2
 8005c1e:	e7e0      	b.n	8005be2 <_printf_float+0x192>
 8005c20:	6823      	ldr	r3, [r4, #0]
 8005c22:	055a      	lsls	r2, r3, #21
 8005c24:	d407      	bmi.n	8005c36 <_printf_float+0x1e6>
 8005c26:	6923      	ldr	r3, [r4, #16]
 8005c28:	4642      	mov	r2, r8
 8005c2a:	4631      	mov	r1, r6
 8005c2c:	4628      	mov	r0, r5
 8005c2e:	47b8      	blx	r7
 8005c30:	3001      	adds	r0, #1
 8005c32:	d12b      	bne.n	8005c8c <_printf_float+0x23c>
 8005c34:	e767      	b.n	8005b06 <_printf_float+0xb6>
 8005c36:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005c3a:	f240 80dd 	bls.w	8005df8 <_printf_float+0x3a8>
 8005c3e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005c42:	2200      	movs	r2, #0
 8005c44:	2300      	movs	r3, #0
 8005c46:	f7fa ff47 	bl	8000ad8 <__aeabi_dcmpeq>
 8005c4a:	2800      	cmp	r0, #0
 8005c4c:	d033      	beq.n	8005cb6 <_printf_float+0x266>
 8005c4e:	4a37      	ldr	r2, [pc, #220]	@ (8005d2c <_printf_float+0x2dc>)
 8005c50:	2301      	movs	r3, #1
 8005c52:	4631      	mov	r1, r6
 8005c54:	4628      	mov	r0, r5
 8005c56:	47b8      	blx	r7
 8005c58:	3001      	adds	r0, #1
 8005c5a:	f43f af54 	beq.w	8005b06 <_printf_float+0xb6>
 8005c5e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005c62:	4543      	cmp	r3, r8
 8005c64:	db02      	blt.n	8005c6c <_printf_float+0x21c>
 8005c66:	6823      	ldr	r3, [r4, #0]
 8005c68:	07d8      	lsls	r0, r3, #31
 8005c6a:	d50f      	bpl.n	8005c8c <_printf_float+0x23c>
 8005c6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c70:	4631      	mov	r1, r6
 8005c72:	4628      	mov	r0, r5
 8005c74:	47b8      	blx	r7
 8005c76:	3001      	adds	r0, #1
 8005c78:	f43f af45 	beq.w	8005b06 <_printf_float+0xb6>
 8005c7c:	f04f 0900 	mov.w	r9, #0
 8005c80:	f108 38ff 	add.w	r8, r8, #4294967295
 8005c84:	f104 0a1a 	add.w	sl, r4, #26
 8005c88:	45c8      	cmp	r8, r9
 8005c8a:	dc09      	bgt.n	8005ca0 <_printf_float+0x250>
 8005c8c:	6823      	ldr	r3, [r4, #0]
 8005c8e:	079b      	lsls	r3, r3, #30
 8005c90:	f100 8103 	bmi.w	8005e9a <_printf_float+0x44a>
 8005c94:	68e0      	ldr	r0, [r4, #12]
 8005c96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005c98:	4298      	cmp	r0, r3
 8005c9a:	bfb8      	it	lt
 8005c9c:	4618      	movlt	r0, r3
 8005c9e:	e734      	b.n	8005b0a <_printf_float+0xba>
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	4652      	mov	r2, sl
 8005ca4:	4631      	mov	r1, r6
 8005ca6:	4628      	mov	r0, r5
 8005ca8:	47b8      	blx	r7
 8005caa:	3001      	adds	r0, #1
 8005cac:	f43f af2b 	beq.w	8005b06 <_printf_float+0xb6>
 8005cb0:	f109 0901 	add.w	r9, r9, #1
 8005cb4:	e7e8      	b.n	8005c88 <_printf_float+0x238>
 8005cb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	dc39      	bgt.n	8005d30 <_printf_float+0x2e0>
 8005cbc:	4a1b      	ldr	r2, [pc, #108]	@ (8005d2c <_printf_float+0x2dc>)
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	4631      	mov	r1, r6
 8005cc2:	4628      	mov	r0, r5
 8005cc4:	47b8      	blx	r7
 8005cc6:	3001      	adds	r0, #1
 8005cc8:	f43f af1d 	beq.w	8005b06 <_printf_float+0xb6>
 8005ccc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005cd0:	ea59 0303 	orrs.w	r3, r9, r3
 8005cd4:	d102      	bne.n	8005cdc <_printf_float+0x28c>
 8005cd6:	6823      	ldr	r3, [r4, #0]
 8005cd8:	07d9      	lsls	r1, r3, #31
 8005cda:	d5d7      	bpl.n	8005c8c <_printf_float+0x23c>
 8005cdc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ce0:	4631      	mov	r1, r6
 8005ce2:	4628      	mov	r0, r5
 8005ce4:	47b8      	blx	r7
 8005ce6:	3001      	adds	r0, #1
 8005ce8:	f43f af0d 	beq.w	8005b06 <_printf_float+0xb6>
 8005cec:	f04f 0a00 	mov.w	sl, #0
 8005cf0:	f104 0b1a 	add.w	fp, r4, #26
 8005cf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cf6:	425b      	negs	r3, r3
 8005cf8:	4553      	cmp	r3, sl
 8005cfa:	dc01      	bgt.n	8005d00 <_printf_float+0x2b0>
 8005cfc:	464b      	mov	r3, r9
 8005cfe:	e793      	b.n	8005c28 <_printf_float+0x1d8>
 8005d00:	2301      	movs	r3, #1
 8005d02:	465a      	mov	r2, fp
 8005d04:	4631      	mov	r1, r6
 8005d06:	4628      	mov	r0, r5
 8005d08:	47b8      	blx	r7
 8005d0a:	3001      	adds	r0, #1
 8005d0c:	f43f aefb 	beq.w	8005b06 <_printf_float+0xb6>
 8005d10:	f10a 0a01 	add.w	sl, sl, #1
 8005d14:	e7ee      	b.n	8005cf4 <_printf_float+0x2a4>
 8005d16:	bf00      	nop
 8005d18:	7fefffff 	.word	0x7fefffff
 8005d1c:	08008794 	.word	0x08008794
 8005d20:	08008798 	.word	0x08008798
 8005d24:	0800879c 	.word	0x0800879c
 8005d28:	080087a0 	.word	0x080087a0
 8005d2c:	080087a4 	.word	0x080087a4
 8005d30:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005d32:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005d36:	4553      	cmp	r3, sl
 8005d38:	bfa8      	it	ge
 8005d3a:	4653      	movge	r3, sl
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	4699      	mov	r9, r3
 8005d40:	dc36      	bgt.n	8005db0 <_printf_float+0x360>
 8005d42:	f04f 0b00 	mov.w	fp, #0
 8005d46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d4a:	f104 021a 	add.w	r2, r4, #26
 8005d4e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005d50:	9306      	str	r3, [sp, #24]
 8005d52:	eba3 0309 	sub.w	r3, r3, r9
 8005d56:	455b      	cmp	r3, fp
 8005d58:	dc31      	bgt.n	8005dbe <_printf_float+0x36e>
 8005d5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d5c:	459a      	cmp	sl, r3
 8005d5e:	dc3a      	bgt.n	8005dd6 <_printf_float+0x386>
 8005d60:	6823      	ldr	r3, [r4, #0]
 8005d62:	07da      	lsls	r2, r3, #31
 8005d64:	d437      	bmi.n	8005dd6 <_printf_float+0x386>
 8005d66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d68:	ebaa 0903 	sub.w	r9, sl, r3
 8005d6c:	9b06      	ldr	r3, [sp, #24]
 8005d6e:	ebaa 0303 	sub.w	r3, sl, r3
 8005d72:	4599      	cmp	r9, r3
 8005d74:	bfa8      	it	ge
 8005d76:	4699      	movge	r9, r3
 8005d78:	f1b9 0f00 	cmp.w	r9, #0
 8005d7c:	dc33      	bgt.n	8005de6 <_printf_float+0x396>
 8005d7e:	f04f 0800 	mov.w	r8, #0
 8005d82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d86:	f104 0b1a 	add.w	fp, r4, #26
 8005d8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d8c:	ebaa 0303 	sub.w	r3, sl, r3
 8005d90:	eba3 0309 	sub.w	r3, r3, r9
 8005d94:	4543      	cmp	r3, r8
 8005d96:	f77f af79 	ble.w	8005c8c <_printf_float+0x23c>
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	465a      	mov	r2, fp
 8005d9e:	4631      	mov	r1, r6
 8005da0:	4628      	mov	r0, r5
 8005da2:	47b8      	blx	r7
 8005da4:	3001      	adds	r0, #1
 8005da6:	f43f aeae 	beq.w	8005b06 <_printf_float+0xb6>
 8005daa:	f108 0801 	add.w	r8, r8, #1
 8005dae:	e7ec      	b.n	8005d8a <_printf_float+0x33a>
 8005db0:	4642      	mov	r2, r8
 8005db2:	4631      	mov	r1, r6
 8005db4:	4628      	mov	r0, r5
 8005db6:	47b8      	blx	r7
 8005db8:	3001      	adds	r0, #1
 8005dba:	d1c2      	bne.n	8005d42 <_printf_float+0x2f2>
 8005dbc:	e6a3      	b.n	8005b06 <_printf_float+0xb6>
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	4631      	mov	r1, r6
 8005dc2:	4628      	mov	r0, r5
 8005dc4:	9206      	str	r2, [sp, #24]
 8005dc6:	47b8      	blx	r7
 8005dc8:	3001      	adds	r0, #1
 8005dca:	f43f ae9c 	beq.w	8005b06 <_printf_float+0xb6>
 8005dce:	9a06      	ldr	r2, [sp, #24]
 8005dd0:	f10b 0b01 	add.w	fp, fp, #1
 8005dd4:	e7bb      	b.n	8005d4e <_printf_float+0x2fe>
 8005dd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005dda:	4631      	mov	r1, r6
 8005ddc:	4628      	mov	r0, r5
 8005dde:	47b8      	blx	r7
 8005de0:	3001      	adds	r0, #1
 8005de2:	d1c0      	bne.n	8005d66 <_printf_float+0x316>
 8005de4:	e68f      	b.n	8005b06 <_printf_float+0xb6>
 8005de6:	9a06      	ldr	r2, [sp, #24]
 8005de8:	464b      	mov	r3, r9
 8005dea:	4442      	add	r2, r8
 8005dec:	4631      	mov	r1, r6
 8005dee:	4628      	mov	r0, r5
 8005df0:	47b8      	blx	r7
 8005df2:	3001      	adds	r0, #1
 8005df4:	d1c3      	bne.n	8005d7e <_printf_float+0x32e>
 8005df6:	e686      	b.n	8005b06 <_printf_float+0xb6>
 8005df8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005dfc:	f1ba 0f01 	cmp.w	sl, #1
 8005e00:	dc01      	bgt.n	8005e06 <_printf_float+0x3b6>
 8005e02:	07db      	lsls	r3, r3, #31
 8005e04:	d536      	bpl.n	8005e74 <_printf_float+0x424>
 8005e06:	2301      	movs	r3, #1
 8005e08:	4642      	mov	r2, r8
 8005e0a:	4631      	mov	r1, r6
 8005e0c:	4628      	mov	r0, r5
 8005e0e:	47b8      	blx	r7
 8005e10:	3001      	adds	r0, #1
 8005e12:	f43f ae78 	beq.w	8005b06 <_printf_float+0xb6>
 8005e16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e1a:	4631      	mov	r1, r6
 8005e1c:	4628      	mov	r0, r5
 8005e1e:	47b8      	blx	r7
 8005e20:	3001      	adds	r0, #1
 8005e22:	f43f ae70 	beq.w	8005b06 <_printf_float+0xb6>
 8005e26:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e32:	f7fa fe51 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e36:	b9c0      	cbnz	r0, 8005e6a <_printf_float+0x41a>
 8005e38:	4653      	mov	r3, sl
 8005e3a:	f108 0201 	add.w	r2, r8, #1
 8005e3e:	4631      	mov	r1, r6
 8005e40:	4628      	mov	r0, r5
 8005e42:	47b8      	blx	r7
 8005e44:	3001      	adds	r0, #1
 8005e46:	d10c      	bne.n	8005e62 <_printf_float+0x412>
 8005e48:	e65d      	b.n	8005b06 <_printf_float+0xb6>
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	465a      	mov	r2, fp
 8005e4e:	4631      	mov	r1, r6
 8005e50:	4628      	mov	r0, r5
 8005e52:	47b8      	blx	r7
 8005e54:	3001      	adds	r0, #1
 8005e56:	f43f ae56 	beq.w	8005b06 <_printf_float+0xb6>
 8005e5a:	f108 0801 	add.w	r8, r8, #1
 8005e5e:	45d0      	cmp	r8, sl
 8005e60:	dbf3      	blt.n	8005e4a <_printf_float+0x3fa>
 8005e62:	464b      	mov	r3, r9
 8005e64:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005e68:	e6df      	b.n	8005c2a <_printf_float+0x1da>
 8005e6a:	f04f 0800 	mov.w	r8, #0
 8005e6e:	f104 0b1a 	add.w	fp, r4, #26
 8005e72:	e7f4      	b.n	8005e5e <_printf_float+0x40e>
 8005e74:	2301      	movs	r3, #1
 8005e76:	4642      	mov	r2, r8
 8005e78:	e7e1      	b.n	8005e3e <_printf_float+0x3ee>
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	464a      	mov	r2, r9
 8005e7e:	4631      	mov	r1, r6
 8005e80:	4628      	mov	r0, r5
 8005e82:	47b8      	blx	r7
 8005e84:	3001      	adds	r0, #1
 8005e86:	f43f ae3e 	beq.w	8005b06 <_printf_float+0xb6>
 8005e8a:	f108 0801 	add.w	r8, r8, #1
 8005e8e:	68e3      	ldr	r3, [r4, #12]
 8005e90:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005e92:	1a5b      	subs	r3, r3, r1
 8005e94:	4543      	cmp	r3, r8
 8005e96:	dcf0      	bgt.n	8005e7a <_printf_float+0x42a>
 8005e98:	e6fc      	b.n	8005c94 <_printf_float+0x244>
 8005e9a:	f04f 0800 	mov.w	r8, #0
 8005e9e:	f104 0919 	add.w	r9, r4, #25
 8005ea2:	e7f4      	b.n	8005e8e <_printf_float+0x43e>

08005ea4 <_printf_common>:
 8005ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ea8:	4616      	mov	r6, r2
 8005eaa:	4698      	mov	r8, r3
 8005eac:	688a      	ldr	r2, [r1, #8]
 8005eae:	690b      	ldr	r3, [r1, #16]
 8005eb0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	bfb8      	it	lt
 8005eb8:	4613      	movlt	r3, r2
 8005eba:	6033      	str	r3, [r6, #0]
 8005ebc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005ec0:	4607      	mov	r7, r0
 8005ec2:	460c      	mov	r4, r1
 8005ec4:	b10a      	cbz	r2, 8005eca <_printf_common+0x26>
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	6033      	str	r3, [r6, #0]
 8005eca:	6823      	ldr	r3, [r4, #0]
 8005ecc:	0699      	lsls	r1, r3, #26
 8005ece:	bf42      	ittt	mi
 8005ed0:	6833      	ldrmi	r3, [r6, #0]
 8005ed2:	3302      	addmi	r3, #2
 8005ed4:	6033      	strmi	r3, [r6, #0]
 8005ed6:	6825      	ldr	r5, [r4, #0]
 8005ed8:	f015 0506 	ands.w	r5, r5, #6
 8005edc:	d106      	bne.n	8005eec <_printf_common+0x48>
 8005ede:	f104 0a19 	add.w	sl, r4, #25
 8005ee2:	68e3      	ldr	r3, [r4, #12]
 8005ee4:	6832      	ldr	r2, [r6, #0]
 8005ee6:	1a9b      	subs	r3, r3, r2
 8005ee8:	42ab      	cmp	r3, r5
 8005eea:	dc26      	bgt.n	8005f3a <_printf_common+0x96>
 8005eec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005ef0:	6822      	ldr	r2, [r4, #0]
 8005ef2:	3b00      	subs	r3, #0
 8005ef4:	bf18      	it	ne
 8005ef6:	2301      	movne	r3, #1
 8005ef8:	0692      	lsls	r2, r2, #26
 8005efa:	d42b      	bmi.n	8005f54 <_printf_common+0xb0>
 8005efc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005f00:	4641      	mov	r1, r8
 8005f02:	4638      	mov	r0, r7
 8005f04:	47c8      	blx	r9
 8005f06:	3001      	adds	r0, #1
 8005f08:	d01e      	beq.n	8005f48 <_printf_common+0xa4>
 8005f0a:	6823      	ldr	r3, [r4, #0]
 8005f0c:	6922      	ldr	r2, [r4, #16]
 8005f0e:	f003 0306 	and.w	r3, r3, #6
 8005f12:	2b04      	cmp	r3, #4
 8005f14:	bf02      	ittt	eq
 8005f16:	68e5      	ldreq	r5, [r4, #12]
 8005f18:	6833      	ldreq	r3, [r6, #0]
 8005f1a:	1aed      	subeq	r5, r5, r3
 8005f1c:	68a3      	ldr	r3, [r4, #8]
 8005f1e:	bf0c      	ite	eq
 8005f20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f24:	2500      	movne	r5, #0
 8005f26:	4293      	cmp	r3, r2
 8005f28:	bfc4      	itt	gt
 8005f2a:	1a9b      	subgt	r3, r3, r2
 8005f2c:	18ed      	addgt	r5, r5, r3
 8005f2e:	2600      	movs	r6, #0
 8005f30:	341a      	adds	r4, #26
 8005f32:	42b5      	cmp	r5, r6
 8005f34:	d11a      	bne.n	8005f6c <_printf_common+0xc8>
 8005f36:	2000      	movs	r0, #0
 8005f38:	e008      	b.n	8005f4c <_printf_common+0xa8>
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	4652      	mov	r2, sl
 8005f3e:	4641      	mov	r1, r8
 8005f40:	4638      	mov	r0, r7
 8005f42:	47c8      	blx	r9
 8005f44:	3001      	adds	r0, #1
 8005f46:	d103      	bne.n	8005f50 <_printf_common+0xac>
 8005f48:	f04f 30ff 	mov.w	r0, #4294967295
 8005f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f50:	3501      	adds	r5, #1
 8005f52:	e7c6      	b.n	8005ee2 <_printf_common+0x3e>
 8005f54:	18e1      	adds	r1, r4, r3
 8005f56:	1c5a      	adds	r2, r3, #1
 8005f58:	2030      	movs	r0, #48	@ 0x30
 8005f5a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005f5e:	4422      	add	r2, r4
 8005f60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005f64:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005f68:	3302      	adds	r3, #2
 8005f6a:	e7c7      	b.n	8005efc <_printf_common+0x58>
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	4622      	mov	r2, r4
 8005f70:	4641      	mov	r1, r8
 8005f72:	4638      	mov	r0, r7
 8005f74:	47c8      	blx	r9
 8005f76:	3001      	adds	r0, #1
 8005f78:	d0e6      	beq.n	8005f48 <_printf_common+0xa4>
 8005f7a:	3601      	adds	r6, #1
 8005f7c:	e7d9      	b.n	8005f32 <_printf_common+0x8e>
	...

08005f80 <_printf_i>:
 8005f80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f84:	7e0f      	ldrb	r7, [r1, #24]
 8005f86:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005f88:	2f78      	cmp	r7, #120	@ 0x78
 8005f8a:	4691      	mov	r9, r2
 8005f8c:	4680      	mov	r8, r0
 8005f8e:	460c      	mov	r4, r1
 8005f90:	469a      	mov	sl, r3
 8005f92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005f96:	d807      	bhi.n	8005fa8 <_printf_i+0x28>
 8005f98:	2f62      	cmp	r7, #98	@ 0x62
 8005f9a:	d80a      	bhi.n	8005fb2 <_printf_i+0x32>
 8005f9c:	2f00      	cmp	r7, #0
 8005f9e:	f000 80d2 	beq.w	8006146 <_printf_i+0x1c6>
 8005fa2:	2f58      	cmp	r7, #88	@ 0x58
 8005fa4:	f000 80b9 	beq.w	800611a <_printf_i+0x19a>
 8005fa8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005fac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005fb0:	e03a      	b.n	8006028 <_printf_i+0xa8>
 8005fb2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005fb6:	2b15      	cmp	r3, #21
 8005fb8:	d8f6      	bhi.n	8005fa8 <_printf_i+0x28>
 8005fba:	a101      	add	r1, pc, #4	@ (adr r1, 8005fc0 <_printf_i+0x40>)
 8005fbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005fc0:	08006019 	.word	0x08006019
 8005fc4:	0800602d 	.word	0x0800602d
 8005fc8:	08005fa9 	.word	0x08005fa9
 8005fcc:	08005fa9 	.word	0x08005fa9
 8005fd0:	08005fa9 	.word	0x08005fa9
 8005fd4:	08005fa9 	.word	0x08005fa9
 8005fd8:	0800602d 	.word	0x0800602d
 8005fdc:	08005fa9 	.word	0x08005fa9
 8005fe0:	08005fa9 	.word	0x08005fa9
 8005fe4:	08005fa9 	.word	0x08005fa9
 8005fe8:	08005fa9 	.word	0x08005fa9
 8005fec:	0800612d 	.word	0x0800612d
 8005ff0:	08006057 	.word	0x08006057
 8005ff4:	080060e7 	.word	0x080060e7
 8005ff8:	08005fa9 	.word	0x08005fa9
 8005ffc:	08005fa9 	.word	0x08005fa9
 8006000:	0800614f 	.word	0x0800614f
 8006004:	08005fa9 	.word	0x08005fa9
 8006008:	08006057 	.word	0x08006057
 800600c:	08005fa9 	.word	0x08005fa9
 8006010:	08005fa9 	.word	0x08005fa9
 8006014:	080060ef 	.word	0x080060ef
 8006018:	6833      	ldr	r3, [r6, #0]
 800601a:	1d1a      	adds	r2, r3, #4
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	6032      	str	r2, [r6, #0]
 8006020:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006024:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006028:	2301      	movs	r3, #1
 800602a:	e09d      	b.n	8006168 <_printf_i+0x1e8>
 800602c:	6833      	ldr	r3, [r6, #0]
 800602e:	6820      	ldr	r0, [r4, #0]
 8006030:	1d19      	adds	r1, r3, #4
 8006032:	6031      	str	r1, [r6, #0]
 8006034:	0606      	lsls	r6, r0, #24
 8006036:	d501      	bpl.n	800603c <_printf_i+0xbc>
 8006038:	681d      	ldr	r5, [r3, #0]
 800603a:	e003      	b.n	8006044 <_printf_i+0xc4>
 800603c:	0645      	lsls	r5, r0, #25
 800603e:	d5fb      	bpl.n	8006038 <_printf_i+0xb8>
 8006040:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006044:	2d00      	cmp	r5, #0
 8006046:	da03      	bge.n	8006050 <_printf_i+0xd0>
 8006048:	232d      	movs	r3, #45	@ 0x2d
 800604a:	426d      	negs	r5, r5
 800604c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006050:	4859      	ldr	r0, [pc, #356]	@ (80061b8 <_printf_i+0x238>)
 8006052:	230a      	movs	r3, #10
 8006054:	e011      	b.n	800607a <_printf_i+0xfa>
 8006056:	6821      	ldr	r1, [r4, #0]
 8006058:	6833      	ldr	r3, [r6, #0]
 800605a:	0608      	lsls	r0, r1, #24
 800605c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006060:	d402      	bmi.n	8006068 <_printf_i+0xe8>
 8006062:	0649      	lsls	r1, r1, #25
 8006064:	bf48      	it	mi
 8006066:	b2ad      	uxthmi	r5, r5
 8006068:	2f6f      	cmp	r7, #111	@ 0x6f
 800606a:	4853      	ldr	r0, [pc, #332]	@ (80061b8 <_printf_i+0x238>)
 800606c:	6033      	str	r3, [r6, #0]
 800606e:	bf14      	ite	ne
 8006070:	230a      	movne	r3, #10
 8006072:	2308      	moveq	r3, #8
 8006074:	2100      	movs	r1, #0
 8006076:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800607a:	6866      	ldr	r6, [r4, #4]
 800607c:	60a6      	str	r6, [r4, #8]
 800607e:	2e00      	cmp	r6, #0
 8006080:	bfa2      	ittt	ge
 8006082:	6821      	ldrge	r1, [r4, #0]
 8006084:	f021 0104 	bicge.w	r1, r1, #4
 8006088:	6021      	strge	r1, [r4, #0]
 800608a:	b90d      	cbnz	r5, 8006090 <_printf_i+0x110>
 800608c:	2e00      	cmp	r6, #0
 800608e:	d04b      	beq.n	8006128 <_printf_i+0x1a8>
 8006090:	4616      	mov	r6, r2
 8006092:	fbb5 f1f3 	udiv	r1, r5, r3
 8006096:	fb03 5711 	mls	r7, r3, r1, r5
 800609a:	5dc7      	ldrb	r7, [r0, r7]
 800609c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80060a0:	462f      	mov	r7, r5
 80060a2:	42bb      	cmp	r3, r7
 80060a4:	460d      	mov	r5, r1
 80060a6:	d9f4      	bls.n	8006092 <_printf_i+0x112>
 80060a8:	2b08      	cmp	r3, #8
 80060aa:	d10b      	bne.n	80060c4 <_printf_i+0x144>
 80060ac:	6823      	ldr	r3, [r4, #0]
 80060ae:	07df      	lsls	r7, r3, #31
 80060b0:	d508      	bpl.n	80060c4 <_printf_i+0x144>
 80060b2:	6923      	ldr	r3, [r4, #16]
 80060b4:	6861      	ldr	r1, [r4, #4]
 80060b6:	4299      	cmp	r1, r3
 80060b8:	bfde      	ittt	le
 80060ba:	2330      	movle	r3, #48	@ 0x30
 80060bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80060c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80060c4:	1b92      	subs	r2, r2, r6
 80060c6:	6122      	str	r2, [r4, #16]
 80060c8:	f8cd a000 	str.w	sl, [sp]
 80060cc:	464b      	mov	r3, r9
 80060ce:	aa03      	add	r2, sp, #12
 80060d0:	4621      	mov	r1, r4
 80060d2:	4640      	mov	r0, r8
 80060d4:	f7ff fee6 	bl	8005ea4 <_printf_common>
 80060d8:	3001      	adds	r0, #1
 80060da:	d14a      	bne.n	8006172 <_printf_i+0x1f2>
 80060dc:	f04f 30ff 	mov.w	r0, #4294967295
 80060e0:	b004      	add	sp, #16
 80060e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060e6:	6823      	ldr	r3, [r4, #0]
 80060e8:	f043 0320 	orr.w	r3, r3, #32
 80060ec:	6023      	str	r3, [r4, #0]
 80060ee:	4833      	ldr	r0, [pc, #204]	@ (80061bc <_printf_i+0x23c>)
 80060f0:	2778      	movs	r7, #120	@ 0x78
 80060f2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80060f6:	6823      	ldr	r3, [r4, #0]
 80060f8:	6831      	ldr	r1, [r6, #0]
 80060fa:	061f      	lsls	r7, r3, #24
 80060fc:	f851 5b04 	ldr.w	r5, [r1], #4
 8006100:	d402      	bmi.n	8006108 <_printf_i+0x188>
 8006102:	065f      	lsls	r7, r3, #25
 8006104:	bf48      	it	mi
 8006106:	b2ad      	uxthmi	r5, r5
 8006108:	6031      	str	r1, [r6, #0]
 800610a:	07d9      	lsls	r1, r3, #31
 800610c:	bf44      	itt	mi
 800610e:	f043 0320 	orrmi.w	r3, r3, #32
 8006112:	6023      	strmi	r3, [r4, #0]
 8006114:	b11d      	cbz	r5, 800611e <_printf_i+0x19e>
 8006116:	2310      	movs	r3, #16
 8006118:	e7ac      	b.n	8006074 <_printf_i+0xf4>
 800611a:	4827      	ldr	r0, [pc, #156]	@ (80061b8 <_printf_i+0x238>)
 800611c:	e7e9      	b.n	80060f2 <_printf_i+0x172>
 800611e:	6823      	ldr	r3, [r4, #0]
 8006120:	f023 0320 	bic.w	r3, r3, #32
 8006124:	6023      	str	r3, [r4, #0]
 8006126:	e7f6      	b.n	8006116 <_printf_i+0x196>
 8006128:	4616      	mov	r6, r2
 800612a:	e7bd      	b.n	80060a8 <_printf_i+0x128>
 800612c:	6833      	ldr	r3, [r6, #0]
 800612e:	6825      	ldr	r5, [r4, #0]
 8006130:	6961      	ldr	r1, [r4, #20]
 8006132:	1d18      	adds	r0, r3, #4
 8006134:	6030      	str	r0, [r6, #0]
 8006136:	062e      	lsls	r6, r5, #24
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	d501      	bpl.n	8006140 <_printf_i+0x1c0>
 800613c:	6019      	str	r1, [r3, #0]
 800613e:	e002      	b.n	8006146 <_printf_i+0x1c6>
 8006140:	0668      	lsls	r0, r5, #25
 8006142:	d5fb      	bpl.n	800613c <_printf_i+0x1bc>
 8006144:	8019      	strh	r1, [r3, #0]
 8006146:	2300      	movs	r3, #0
 8006148:	6123      	str	r3, [r4, #16]
 800614a:	4616      	mov	r6, r2
 800614c:	e7bc      	b.n	80060c8 <_printf_i+0x148>
 800614e:	6833      	ldr	r3, [r6, #0]
 8006150:	1d1a      	adds	r2, r3, #4
 8006152:	6032      	str	r2, [r6, #0]
 8006154:	681e      	ldr	r6, [r3, #0]
 8006156:	6862      	ldr	r2, [r4, #4]
 8006158:	2100      	movs	r1, #0
 800615a:	4630      	mov	r0, r6
 800615c:	f7fa f840 	bl	80001e0 <memchr>
 8006160:	b108      	cbz	r0, 8006166 <_printf_i+0x1e6>
 8006162:	1b80      	subs	r0, r0, r6
 8006164:	6060      	str	r0, [r4, #4]
 8006166:	6863      	ldr	r3, [r4, #4]
 8006168:	6123      	str	r3, [r4, #16]
 800616a:	2300      	movs	r3, #0
 800616c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006170:	e7aa      	b.n	80060c8 <_printf_i+0x148>
 8006172:	6923      	ldr	r3, [r4, #16]
 8006174:	4632      	mov	r2, r6
 8006176:	4649      	mov	r1, r9
 8006178:	4640      	mov	r0, r8
 800617a:	47d0      	blx	sl
 800617c:	3001      	adds	r0, #1
 800617e:	d0ad      	beq.n	80060dc <_printf_i+0x15c>
 8006180:	6823      	ldr	r3, [r4, #0]
 8006182:	079b      	lsls	r3, r3, #30
 8006184:	d413      	bmi.n	80061ae <_printf_i+0x22e>
 8006186:	68e0      	ldr	r0, [r4, #12]
 8006188:	9b03      	ldr	r3, [sp, #12]
 800618a:	4298      	cmp	r0, r3
 800618c:	bfb8      	it	lt
 800618e:	4618      	movlt	r0, r3
 8006190:	e7a6      	b.n	80060e0 <_printf_i+0x160>
 8006192:	2301      	movs	r3, #1
 8006194:	4632      	mov	r2, r6
 8006196:	4649      	mov	r1, r9
 8006198:	4640      	mov	r0, r8
 800619a:	47d0      	blx	sl
 800619c:	3001      	adds	r0, #1
 800619e:	d09d      	beq.n	80060dc <_printf_i+0x15c>
 80061a0:	3501      	adds	r5, #1
 80061a2:	68e3      	ldr	r3, [r4, #12]
 80061a4:	9903      	ldr	r1, [sp, #12]
 80061a6:	1a5b      	subs	r3, r3, r1
 80061a8:	42ab      	cmp	r3, r5
 80061aa:	dcf2      	bgt.n	8006192 <_printf_i+0x212>
 80061ac:	e7eb      	b.n	8006186 <_printf_i+0x206>
 80061ae:	2500      	movs	r5, #0
 80061b0:	f104 0619 	add.w	r6, r4, #25
 80061b4:	e7f5      	b.n	80061a2 <_printf_i+0x222>
 80061b6:	bf00      	nop
 80061b8:	080087a6 	.word	0x080087a6
 80061bc:	080087b7 	.word	0x080087b7

080061c0 <std>:
 80061c0:	2300      	movs	r3, #0
 80061c2:	b510      	push	{r4, lr}
 80061c4:	4604      	mov	r4, r0
 80061c6:	e9c0 3300 	strd	r3, r3, [r0]
 80061ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80061ce:	6083      	str	r3, [r0, #8]
 80061d0:	8181      	strh	r1, [r0, #12]
 80061d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80061d4:	81c2      	strh	r2, [r0, #14]
 80061d6:	6183      	str	r3, [r0, #24]
 80061d8:	4619      	mov	r1, r3
 80061da:	2208      	movs	r2, #8
 80061dc:	305c      	adds	r0, #92	@ 0x5c
 80061de:	f000 f9bb 	bl	8006558 <memset>
 80061e2:	4b0d      	ldr	r3, [pc, #52]	@ (8006218 <std+0x58>)
 80061e4:	6263      	str	r3, [r4, #36]	@ 0x24
 80061e6:	4b0d      	ldr	r3, [pc, #52]	@ (800621c <std+0x5c>)
 80061e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80061ea:	4b0d      	ldr	r3, [pc, #52]	@ (8006220 <std+0x60>)
 80061ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80061ee:	4b0d      	ldr	r3, [pc, #52]	@ (8006224 <std+0x64>)
 80061f0:	6323      	str	r3, [r4, #48]	@ 0x30
 80061f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006228 <std+0x68>)
 80061f4:	6224      	str	r4, [r4, #32]
 80061f6:	429c      	cmp	r4, r3
 80061f8:	d006      	beq.n	8006208 <std+0x48>
 80061fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80061fe:	4294      	cmp	r4, r2
 8006200:	d002      	beq.n	8006208 <std+0x48>
 8006202:	33d0      	adds	r3, #208	@ 0xd0
 8006204:	429c      	cmp	r4, r3
 8006206:	d105      	bne.n	8006214 <std+0x54>
 8006208:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800620c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006210:	f000 ba1e 	b.w	8006650 <__retarget_lock_init_recursive>
 8006214:	bd10      	pop	{r4, pc}
 8006216:	bf00      	nop
 8006218:	080063a9 	.word	0x080063a9
 800621c:	080063cb 	.word	0x080063cb
 8006220:	08006403 	.word	0x08006403
 8006224:	08006427 	.word	0x08006427
 8006228:	20000368 	.word	0x20000368

0800622c <stdio_exit_handler>:
 800622c:	4a02      	ldr	r2, [pc, #8]	@ (8006238 <stdio_exit_handler+0xc>)
 800622e:	4903      	ldr	r1, [pc, #12]	@ (800623c <stdio_exit_handler+0x10>)
 8006230:	4803      	ldr	r0, [pc, #12]	@ (8006240 <stdio_exit_handler+0x14>)
 8006232:	f000 b869 	b.w	8006308 <_fwalk_sglue>
 8006236:	bf00      	nop
 8006238:	20000010 	.word	0x20000010
 800623c:	08008231 	.word	0x08008231
 8006240:	20000020 	.word	0x20000020

08006244 <cleanup_stdio>:
 8006244:	6841      	ldr	r1, [r0, #4]
 8006246:	4b0c      	ldr	r3, [pc, #48]	@ (8006278 <cleanup_stdio+0x34>)
 8006248:	4299      	cmp	r1, r3
 800624a:	b510      	push	{r4, lr}
 800624c:	4604      	mov	r4, r0
 800624e:	d001      	beq.n	8006254 <cleanup_stdio+0x10>
 8006250:	f001 ffee 	bl	8008230 <_fflush_r>
 8006254:	68a1      	ldr	r1, [r4, #8]
 8006256:	4b09      	ldr	r3, [pc, #36]	@ (800627c <cleanup_stdio+0x38>)
 8006258:	4299      	cmp	r1, r3
 800625a:	d002      	beq.n	8006262 <cleanup_stdio+0x1e>
 800625c:	4620      	mov	r0, r4
 800625e:	f001 ffe7 	bl	8008230 <_fflush_r>
 8006262:	68e1      	ldr	r1, [r4, #12]
 8006264:	4b06      	ldr	r3, [pc, #24]	@ (8006280 <cleanup_stdio+0x3c>)
 8006266:	4299      	cmp	r1, r3
 8006268:	d004      	beq.n	8006274 <cleanup_stdio+0x30>
 800626a:	4620      	mov	r0, r4
 800626c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006270:	f001 bfde 	b.w	8008230 <_fflush_r>
 8006274:	bd10      	pop	{r4, pc}
 8006276:	bf00      	nop
 8006278:	20000368 	.word	0x20000368
 800627c:	200003d0 	.word	0x200003d0
 8006280:	20000438 	.word	0x20000438

08006284 <global_stdio_init.part.0>:
 8006284:	b510      	push	{r4, lr}
 8006286:	4b0b      	ldr	r3, [pc, #44]	@ (80062b4 <global_stdio_init.part.0+0x30>)
 8006288:	4c0b      	ldr	r4, [pc, #44]	@ (80062b8 <global_stdio_init.part.0+0x34>)
 800628a:	4a0c      	ldr	r2, [pc, #48]	@ (80062bc <global_stdio_init.part.0+0x38>)
 800628c:	601a      	str	r2, [r3, #0]
 800628e:	4620      	mov	r0, r4
 8006290:	2200      	movs	r2, #0
 8006292:	2104      	movs	r1, #4
 8006294:	f7ff ff94 	bl	80061c0 <std>
 8006298:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800629c:	2201      	movs	r2, #1
 800629e:	2109      	movs	r1, #9
 80062a0:	f7ff ff8e 	bl	80061c0 <std>
 80062a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80062a8:	2202      	movs	r2, #2
 80062aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062ae:	2112      	movs	r1, #18
 80062b0:	f7ff bf86 	b.w	80061c0 <std>
 80062b4:	200004a0 	.word	0x200004a0
 80062b8:	20000368 	.word	0x20000368
 80062bc:	0800622d 	.word	0x0800622d

080062c0 <__sfp_lock_acquire>:
 80062c0:	4801      	ldr	r0, [pc, #4]	@ (80062c8 <__sfp_lock_acquire+0x8>)
 80062c2:	f000 b9c6 	b.w	8006652 <__retarget_lock_acquire_recursive>
 80062c6:	bf00      	nop
 80062c8:	200004a9 	.word	0x200004a9

080062cc <__sfp_lock_release>:
 80062cc:	4801      	ldr	r0, [pc, #4]	@ (80062d4 <__sfp_lock_release+0x8>)
 80062ce:	f000 b9c1 	b.w	8006654 <__retarget_lock_release_recursive>
 80062d2:	bf00      	nop
 80062d4:	200004a9 	.word	0x200004a9

080062d8 <__sinit>:
 80062d8:	b510      	push	{r4, lr}
 80062da:	4604      	mov	r4, r0
 80062dc:	f7ff fff0 	bl	80062c0 <__sfp_lock_acquire>
 80062e0:	6a23      	ldr	r3, [r4, #32]
 80062e2:	b11b      	cbz	r3, 80062ec <__sinit+0x14>
 80062e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062e8:	f7ff bff0 	b.w	80062cc <__sfp_lock_release>
 80062ec:	4b04      	ldr	r3, [pc, #16]	@ (8006300 <__sinit+0x28>)
 80062ee:	6223      	str	r3, [r4, #32]
 80062f0:	4b04      	ldr	r3, [pc, #16]	@ (8006304 <__sinit+0x2c>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d1f5      	bne.n	80062e4 <__sinit+0xc>
 80062f8:	f7ff ffc4 	bl	8006284 <global_stdio_init.part.0>
 80062fc:	e7f2      	b.n	80062e4 <__sinit+0xc>
 80062fe:	bf00      	nop
 8006300:	08006245 	.word	0x08006245
 8006304:	200004a0 	.word	0x200004a0

08006308 <_fwalk_sglue>:
 8006308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800630c:	4607      	mov	r7, r0
 800630e:	4688      	mov	r8, r1
 8006310:	4614      	mov	r4, r2
 8006312:	2600      	movs	r6, #0
 8006314:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006318:	f1b9 0901 	subs.w	r9, r9, #1
 800631c:	d505      	bpl.n	800632a <_fwalk_sglue+0x22>
 800631e:	6824      	ldr	r4, [r4, #0]
 8006320:	2c00      	cmp	r4, #0
 8006322:	d1f7      	bne.n	8006314 <_fwalk_sglue+0xc>
 8006324:	4630      	mov	r0, r6
 8006326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800632a:	89ab      	ldrh	r3, [r5, #12]
 800632c:	2b01      	cmp	r3, #1
 800632e:	d907      	bls.n	8006340 <_fwalk_sglue+0x38>
 8006330:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006334:	3301      	adds	r3, #1
 8006336:	d003      	beq.n	8006340 <_fwalk_sglue+0x38>
 8006338:	4629      	mov	r1, r5
 800633a:	4638      	mov	r0, r7
 800633c:	47c0      	blx	r8
 800633e:	4306      	orrs	r6, r0
 8006340:	3568      	adds	r5, #104	@ 0x68
 8006342:	e7e9      	b.n	8006318 <_fwalk_sglue+0x10>

08006344 <iprintf>:
 8006344:	b40f      	push	{r0, r1, r2, r3}
 8006346:	b507      	push	{r0, r1, r2, lr}
 8006348:	4906      	ldr	r1, [pc, #24]	@ (8006364 <iprintf+0x20>)
 800634a:	ab04      	add	r3, sp, #16
 800634c:	6808      	ldr	r0, [r1, #0]
 800634e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006352:	6881      	ldr	r1, [r0, #8]
 8006354:	9301      	str	r3, [sp, #4]
 8006356:	f001 fdcf 	bl	8007ef8 <_vfiprintf_r>
 800635a:	b003      	add	sp, #12
 800635c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006360:	b004      	add	sp, #16
 8006362:	4770      	bx	lr
 8006364:	2000001c 	.word	0x2000001c

08006368 <siprintf>:
 8006368:	b40e      	push	{r1, r2, r3}
 800636a:	b500      	push	{lr}
 800636c:	b09c      	sub	sp, #112	@ 0x70
 800636e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006370:	9002      	str	r0, [sp, #8]
 8006372:	9006      	str	r0, [sp, #24]
 8006374:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006378:	4809      	ldr	r0, [pc, #36]	@ (80063a0 <siprintf+0x38>)
 800637a:	9107      	str	r1, [sp, #28]
 800637c:	9104      	str	r1, [sp, #16]
 800637e:	4909      	ldr	r1, [pc, #36]	@ (80063a4 <siprintf+0x3c>)
 8006380:	f853 2b04 	ldr.w	r2, [r3], #4
 8006384:	9105      	str	r1, [sp, #20]
 8006386:	6800      	ldr	r0, [r0, #0]
 8006388:	9301      	str	r3, [sp, #4]
 800638a:	a902      	add	r1, sp, #8
 800638c:	f001 fc8e 	bl	8007cac <_svfiprintf_r>
 8006390:	9b02      	ldr	r3, [sp, #8]
 8006392:	2200      	movs	r2, #0
 8006394:	701a      	strb	r2, [r3, #0]
 8006396:	b01c      	add	sp, #112	@ 0x70
 8006398:	f85d eb04 	ldr.w	lr, [sp], #4
 800639c:	b003      	add	sp, #12
 800639e:	4770      	bx	lr
 80063a0:	2000001c 	.word	0x2000001c
 80063a4:	ffff0208 	.word	0xffff0208

080063a8 <__sread>:
 80063a8:	b510      	push	{r4, lr}
 80063aa:	460c      	mov	r4, r1
 80063ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063b0:	f000 f900 	bl	80065b4 <_read_r>
 80063b4:	2800      	cmp	r0, #0
 80063b6:	bfab      	itete	ge
 80063b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80063ba:	89a3      	ldrhlt	r3, [r4, #12]
 80063bc:	181b      	addge	r3, r3, r0
 80063be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80063c2:	bfac      	ite	ge
 80063c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80063c6:	81a3      	strhlt	r3, [r4, #12]
 80063c8:	bd10      	pop	{r4, pc}

080063ca <__swrite>:
 80063ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063ce:	461f      	mov	r7, r3
 80063d0:	898b      	ldrh	r3, [r1, #12]
 80063d2:	05db      	lsls	r3, r3, #23
 80063d4:	4605      	mov	r5, r0
 80063d6:	460c      	mov	r4, r1
 80063d8:	4616      	mov	r6, r2
 80063da:	d505      	bpl.n	80063e8 <__swrite+0x1e>
 80063dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063e0:	2302      	movs	r3, #2
 80063e2:	2200      	movs	r2, #0
 80063e4:	f000 f8d4 	bl	8006590 <_lseek_r>
 80063e8:	89a3      	ldrh	r3, [r4, #12]
 80063ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80063f2:	81a3      	strh	r3, [r4, #12]
 80063f4:	4632      	mov	r2, r6
 80063f6:	463b      	mov	r3, r7
 80063f8:	4628      	mov	r0, r5
 80063fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063fe:	f000 b8eb 	b.w	80065d8 <_write_r>

08006402 <__sseek>:
 8006402:	b510      	push	{r4, lr}
 8006404:	460c      	mov	r4, r1
 8006406:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800640a:	f000 f8c1 	bl	8006590 <_lseek_r>
 800640e:	1c43      	adds	r3, r0, #1
 8006410:	89a3      	ldrh	r3, [r4, #12]
 8006412:	bf15      	itete	ne
 8006414:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006416:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800641a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800641e:	81a3      	strheq	r3, [r4, #12]
 8006420:	bf18      	it	ne
 8006422:	81a3      	strhne	r3, [r4, #12]
 8006424:	bd10      	pop	{r4, pc}

08006426 <__sclose>:
 8006426:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800642a:	f000 b8a1 	b.w	8006570 <_close_r>

0800642e <__swbuf_r>:
 800642e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006430:	460e      	mov	r6, r1
 8006432:	4614      	mov	r4, r2
 8006434:	4605      	mov	r5, r0
 8006436:	b118      	cbz	r0, 8006440 <__swbuf_r+0x12>
 8006438:	6a03      	ldr	r3, [r0, #32]
 800643a:	b90b      	cbnz	r3, 8006440 <__swbuf_r+0x12>
 800643c:	f7ff ff4c 	bl	80062d8 <__sinit>
 8006440:	69a3      	ldr	r3, [r4, #24]
 8006442:	60a3      	str	r3, [r4, #8]
 8006444:	89a3      	ldrh	r3, [r4, #12]
 8006446:	071a      	lsls	r2, r3, #28
 8006448:	d501      	bpl.n	800644e <__swbuf_r+0x20>
 800644a:	6923      	ldr	r3, [r4, #16]
 800644c:	b943      	cbnz	r3, 8006460 <__swbuf_r+0x32>
 800644e:	4621      	mov	r1, r4
 8006450:	4628      	mov	r0, r5
 8006452:	f000 f82b 	bl	80064ac <__swsetup_r>
 8006456:	b118      	cbz	r0, 8006460 <__swbuf_r+0x32>
 8006458:	f04f 37ff 	mov.w	r7, #4294967295
 800645c:	4638      	mov	r0, r7
 800645e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006460:	6823      	ldr	r3, [r4, #0]
 8006462:	6922      	ldr	r2, [r4, #16]
 8006464:	1a98      	subs	r0, r3, r2
 8006466:	6963      	ldr	r3, [r4, #20]
 8006468:	b2f6      	uxtb	r6, r6
 800646a:	4283      	cmp	r3, r0
 800646c:	4637      	mov	r7, r6
 800646e:	dc05      	bgt.n	800647c <__swbuf_r+0x4e>
 8006470:	4621      	mov	r1, r4
 8006472:	4628      	mov	r0, r5
 8006474:	f001 fedc 	bl	8008230 <_fflush_r>
 8006478:	2800      	cmp	r0, #0
 800647a:	d1ed      	bne.n	8006458 <__swbuf_r+0x2a>
 800647c:	68a3      	ldr	r3, [r4, #8]
 800647e:	3b01      	subs	r3, #1
 8006480:	60a3      	str	r3, [r4, #8]
 8006482:	6823      	ldr	r3, [r4, #0]
 8006484:	1c5a      	adds	r2, r3, #1
 8006486:	6022      	str	r2, [r4, #0]
 8006488:	701e      	strb	r6, [r3, #0]
 800648a:	6962      	ldr	r2, [r4, #20]
 800648c:	1c43      	adds	r3, r0, #1
 800648e:	429a      	cmp	r2, r3
 8006490:	d004      	beq.n	800649c <__swbuf_r+0x6e>
 8006492:	89a3      	ldrh	r3, [r4, #12]
 8006494:	07db      	lsls	r3, r3, #31
 8006496:	d5e1      	bpl.n	800645c <__swbuf_r+0x2e>
 8006498:	2e0a      	cmp	r6, #10
 800649a:	d1df      	bne.n	800645c <__swbuf_r+0x2e>
 800649c:	4621      	mov	r1, r4
 800649e:	4628      	mov	r0, r5
 80064a0:	f001 fec6 	bl	8008230 <_fflush_r>
 80064a4:	2800      	cmp	r0, #0
 80064a6:	d0d9      	beq.n	800645c <__swbuf_r+0x2e>
 80064a8:	e7d6      	b.n	8006458 <__swbuf_r+0x2a>
	...

080064ac <__swsetup_r>:
 80064ac:	b538      	push	{r3, r4, r5, lr}
 80064ae:	4b29      	ldr	r3, [pc, #164]	@ (8006554 <__swsetup_r+0xa8>)
 80064b0:	4605      	mov	r5, r0
 80064b2:	6818      	ldr	r0, [r3, #0]
 80064b4:	460c      	mov	r4, r1
 80064b6:	b118      	cbz	r0, 80064c0 <__swsetup_r+0x14>
 80064b8:	6a03      	ldr	r3, [r0, #32]
 80064ba:	b90b      	cbnz	r3, 80064c0 <__swsetup_r+0x14>
 80064bc:	f7ff ff0c 	bl	80062d8 <__sinit>
 80064c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064c4:	0719      	lsls	r1, r3, #28
 80064c6:	d422      	bmi.n	800650e <__swsetup_r+0x62>
 80064c8:	06da      	lsls	r2, r3, #27
 80064ca:	d407      	bmi.n	80064dc <__swsetup_r+0x30>
 80064cc:	2209      	movs	r2, #9
 80064ce:	602a      	str	r2, [r5, #0]
 80064d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064d4:	81a3      	strh	r3, [r4, #12]
 80064d6:	f04f 30ff 	mov.w	r0, #4294967295
 80064da:	e033      	b.n	8006544 <__swsetup_r+0x98>
 80064dc:	0758      	lsls	r0, r3, #29
 80064de:	d512      	bpl.n	8006506 <__swsetup_r+0x5a>
 80064e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80064e2:	b141      	cbz	r1, 80064f6 <__swsetup_r+0x4a>
 80064e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80064e8:	4299      	cmp	r1, r3
 80064ea:	d002      	beq.n	80064f2 <__swsetup_r+0x46>
 80064ec:	4628      	mov	r0, r5
 80064ee:	f000 feff 	bl	80072f0 <_free_r>
 80064f2:	2300      	movs	r3, #0
 80064f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80064f6:	89a3      	ldrh	r3, [r4, #12]
 80064f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80064fc:	81a3      	strh	r3, [r4, #12]
 80064fe:	2300      	movs	r3, #0
 8006500:	6063      	str	r3, [r4, #4]
 8006502:	6923      	ldr	r3, [r4, #16]
 8006504:	6023      	str	r3, [r4, #0]
 8006506:	89a3      	ldrh	r3, [r4, #12]
 8006508:	f043 0308 	orr.w	r3, r3, #8
 800650c:	81a3      	strh	r3, [r4, #12]
 800650e:	6923      	ldr	r3, [r4, #16]
 8006510:	b94b      	cbnz	r3, 8006526 <__swsetup_r+0x7a>
 8006512:	89a3      	ldrh	r3, [r4, #12]
 8006514:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006518:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800651c:	d003      	beq.n	8006526 <__swsetup_r+0x7a>
 800651e:	4621      	mov	r1, r4
 8006520:	4628      	mov	r0, r5
 8006522:	f001 fed3 	bl	80082cc <__smakebuf_r>
 8006526:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800652a:	f013 0201 	ands.w	r2, r3, #1
 800652e:	d00a      	beq.n	8006546 <__swsetup_r+0x9a>
 8006530:	2200      	movs	r2, #0
 8006532:	60a2      	str	r2, [r4, #8]
 8006534:	6962      	ldr	r2, [r4, #20]
 8006536:	4252      	negs	r2, r2
 8006538:	61a2      	str	r2, [r4, #24]
 800653a:	6922      	ldr	r2, [r4, #16]
 800653c:	b942      	cbnz	r2, 8006550 <__swsetup_r+0xa4>
 800653e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006542:	d1c5      	bne.n	80064d0 <__swsetup_r+0x24>
 8006544:	bd38      	pop	{r3, r4, r5, pc}
 8006546:	0799      	lsls	r1, r3, #30
 8006548:	bf58      	it	pl
 800654a:	6962      	ldrpl	r2, [r4, #20]
 800654c:	60a2      	str	r2, [r4, #8]
 800654e:	e7f4      	b.n	800653a <__swsetup_r+0x8e>
 8006550:	2000      	movs	r0, #0
 8006552:	e7f7      	b.n	8006544 <__swsetup_r+0x98>
 8006554:	2000001c 	.word	0x2000001c

08006558 <memset>:
 8006558:	4402      	add	r2, r0
 800655a:	4603      	mov	r3, r0
 800655c:	4293      	cmp	r3, r2
 800655e:	d100      	bne.n	8006562 <memset+0xa>
 8006560:	4770      	bx	lr
 8006562:	f803 1b01 	strb.w	r1, [r3], #1
 8006566:	e7f9      	b.n	800655c <memset+0x4>

08006568 <_localeconv_r>:
 8006568:	4800      	ldr	r0, [pc, #0]	@ (800656c <_localeconv_r+0x4>)
 800656a:	4770      	bx	lr
 800656c:	2000015c 	.word	0x2000015c

08006570 <_close_r>:
 8006570:	b538      	push	{r3, r4, r5, lr}
 8006572:	4d06      	ldr	r5, [pc, #24]	@ (800658c <_close_r+0x1c>)
 8006574:	2300      	movs	r3, #0
 8006576:	4604      	mov	r4, r0
 8006578:	4608      	mov	r0, r1
 800657a:	602b      	str	r3, [r5, #0]
 800657c:	f7fb fb54 	bl	8001c28 <_close>
 8006580:	1c43      	adds	r3, r0, #1
 8006582:	d102      	bne.n	800658a <_close_r+0x1a>
 8006584:	682b      	ldr	r3, [r5, #0]
 8006586:	b103      	cbz	r3, 800658a <_close_r+0x1a>
 8006588:	6023      	str	r3, [r4, #0]
 800658a:	bd38      	pop	{r3, r4, r5, pc}
 800658c:	200004a4 	.word	0x200004a4

08006590 <_lseek_r>:
 8006590:	b538      	push	{r3, r4, r5, lr}
 8006592:	4d07      	ldr	r5, [pc, #28]	@ (80065b0 <_lseek_r+0x20>)
 8006594:	4604      	mov	r4, r0
 8006596:	4608      	mov	r0, r1
 8006598:	4611      	mov	r1, r2
 800659a:	2200      	movs	r2, #0
 800659c:	602a      	str	r2, [r5, #0]
 800659e:	461a      	mov	r2, r3
 80065a0:	f7fb fb69 	bl	8001c76 <_lseek>
 80065a4:	1c43      	adds	r3, r0, #1
 80065a6:	d102      	bne.n	80065ae <_lseek_r+0x1e>
 80065a8:	682b      	ldr	r3, [r5, #0]
 80065aa:	b103      	cbz	r3, 80065ae <_lseek_r+0x1e>
 80065ac:	6023      	str	r3, [r4, #0]
 80065ae:	bd38      	pop	{r3, r4, r5, pc}
 80065b0:	200004a4 	.word	0x200004a4

080065b4 <_read_r>:
 80065b4:	b538      	push	{r3, r4, r5, lr}
 80065b6:	4d07      	ldr	r5, [pc, #28]	@ (80065d4 <_read_r+0x20>)
 80065b8:	4604      	mov	r4, r0
 80065ba:	4608      	mov	r0, r1
 80065bc:	4611      	mov	r1, r2
 80065be:	2200      	movs	r2, #0
 80065c0:	602a      	str	r2, [r5, #0]
 80065c2:	461a      	mov	r2, r3
 80065c4:	f7fb faf7 	bl	8001bb6 <_read>
 80065c8:	1c43      	adds	r3, r0, #1
 80065ca:	d102      	bne.n	80065d2 <_read_r+0x1e>
 80065cc:	682b      	ldr	r3, [r5, #0]
 80065ce:	b103      	cbz	r3, 80065d2 <_read_r+0x1e>
 80065d0:	6023      	str	r3, [r4, #0]
 80065d2:	bd38      	pop	{r3, r4, r5, pc}
 80065d4:	200004a4 	.word	0x200004a4

080065d8 <_write_r>:
 80065d8:	b538      	push	{r3, r4, r5, lr}
 80065da:	4d07      	ldr	r5, [pc, #28]	@ (80065f8 <_write_r+0x20>)
 80065dc:	4604      	mov	r4, r0
 80065de:	4608      	mov	r0, r1
 80065e0:	4611      	mov	r1, r2
 80065e2:	2200      	movs	r2, #0
 80065e4:	602a      	str	r2, [r5, #0]
 80065e6:	461a      	mov	r2, r3
 80065e8:	f7fb fb02 	bl	8001bf0 <_write>
 80065ec:	1c43      	adds	r3, r0, #1
 80065ee:	d102      	bne.n	80065f6 <_write_r+0x1e>
 80065f0:	682b      	ldr	r3, [r5, #0]
 80065f2:	b103      	cbz	r3, 80065f6 <_write_r+0x1e>
 80065f4:	6023      	str	r3, [r4, #0]
 80065f6:	bd38      	pop	{r3, r4, r5, pc}
 80065f8:	200004a4 	.word	0x200004a4

080065fc <__errno>:
 80065fc:	4b01      	ldr	r3, [pc, #4]	@ (8006604 <__errno+0x8>)
 80065fe:	6818      	ldr	r0, [r3, #0]
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop
 8006604:	2000001c 	.word	0x2000001c

08006608 <__libc_init_array>:
 8006608:	b570      	push	{r4, r5, r6, lr}
 800660a:	4d0d      	ldr	r5, [pc, #52]	@ (8006640 <__libc_init_array+0x38>)
 800660c:	4c0d      	ldr	r4, [pc, #52]	@ (8006644 <__libc_init_array+0x3c>)
 800660e:	1b64      	subs	r4, r4, r5
 8006610:	10a4      	asrs	r4, r4, #2
 8006612:	2600      	movs	r6, #0
 8006614:	42a6      	cmp	r6, r4
 8006616:	d109      	bne.n	800662c <__libc_init_array+0x24>
 8006618:	4d0b      	ldr	r5, [pc, #44]	@ (8006648 <__libc_init_array+0x40>)
 800661a:	4c0c      	ldr	r4, [pc, #48]	@ (800664c <__libc_init_array+0x44>)
 800661c:	f001 ffd2 	bl	80085c4 <_init>
 8006620:	1b64      	subs	r4, r4, r5
 8006622:	10a4      	asrs	r4, r4, #2
 8006624:	2600      	movs	r6, #0
 8006626:	42a6      	cmp	r6, r4
 8006628:	d105      	bne.n	8006636 <__libc_init_array+0x2e>
 800662a:	bd70      	pop	{r4, r5, r6, pc}
 800662c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006630:	4798      	blx	r3
 8006632:	3601      	adds	r6, #1
 8006634:	e7ee      	b.n	8006614 <__libc_init_array+0xc>
 8006636:	f855 3b04 	ldr.w	r3, [r5], #4
 800663a:	4798      	blx	r3
 800663c:	3601      	adds	r6, #1
 800663e:	e7f2      	b.n	8006626 <__libc_init_array+0x1e>
 8006640:	08008b10 	.word	0x08008b10
 8006644:	08008b10 	.word	0x08008b10
 8006648:	08008b10 	.word	0x08008b10
 800664c:	08008b14 	.word	0x08008b14

08006650 <__retarget_lock_init_recursive>:
 8006650:	4770      	bx	lr

08006652 <__retarget_lock_acquire_recursive>:
 8006652:	4770      	bx	lr

08006654 <__retarget_lock_release_recursive>:
 8006654:	4770      	bx	lr

08006656 <quorem>:
 8006656:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800665a:	6903      	ldr	r3, [r0, #16]
 800665c:	690c      	ldr	r4, [r1, #16]
 800665e:	42a3      	cmp	r3, r4
 8006660:	4607      	mov	r7, r0
 8006662:	db7e      	blt.n	8006762 <quorem+0x10c>
 8006664:	3c01      	subs	r4, #1
 8006666:	f101 0814 	add.w	r8, r1, #20
 800666a:	00a3      	lsls	r3, r4, #2
 800666c:	f100 0514 	add.w	r5, r0, #20
 8006670:	9300      	str	r3, [sp, #0]
 8006672:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006676:	9301      	str	r3, [sp, #4]
 8006678:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800667c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006680:	3301      	adds	r3, #1
 8006682:	429a      	cmp	r2, r3
 8006684:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006688:	fbb2 f6f3 	udiv	r6, r2, r3
 800668c:	d32e      	bcc.n	80066ec <quorem+0x96>
 800668e:	f04f 0a00 	mov.w	sl, #0
 8006692:	46c4      	mov	ip, r8
 8006694:	46ae      	mov	lr, r5
 8006696:	46d3      	mov	fp, sl
 8006698:	f85c 3b04 	ldr.w	r3, [ip], #4
 800669c:	b298      	uxth	r0, r3
 800669e:	fb06 a000 	mla	r0, r6, r0, sl
 80066a2:	0c02      	lsrs	r2, r0, #16
 80066a4:	0c1b      	lsrs	r3, r3, #16
 80066a6:	fb06 2303 	mla	r3, r6, r3, r2
 80066aa:	f8de 2000 	ldr.w	r2, [lr]
 80066ae:	b280      	uxth	r0, r0
 80066b0:	b292      	uxth	r2, r2
 80066b2:	1a12      	subs	r2, r2, r0
 80066b4:	445a      	add	r2, fp
 80066b6:	f8de 0000 	ldr.w	r0, [lr]
 80066ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80066be:	b29b      	uxth	r3, r3
 80066c0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80066c4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80066c8:	b292      	uxth	r2, r2
 80066ca:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80066ce:	45e1      	cmp	r9, ip
 80066d0:	f84e 2b04 	str.w	r2, [lr], #4
 80066d4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80066d8:	d2de      	bcs.n	8006698 <quorem+0x42>
 80066da:	9b00      	ldr	r3, [sp, #0]
 80066dc:	58eb      	ldr	r3, [r5, r3]
 80066de:	b92b      	cbnz	r3, 80066ec <quorem+0x96>
 80066e0:	9b01      	ldr	r3, [sp, #4]
 80066e2:	3b04      	subs	r3, #4
 80066e4:	429d      	cmp	r5, r3
 80066e6:	461a      	mov	r2, r3
 80066e8:	d32f      	bcc.n	800674a <quorem+0xf4>
 80066ea:	613c      	str	r4, [r7, #16]
 80066ec:	4638      	mov	r0, r7
 80066ee:	f001 f979 	bl	80079e4 <__mcmp>
 80066f2:	2800      	cmp	r0, #0
 80066f4:	db25      	blt.n	8006742 <quorem+0xec>
 80066f6:	4629      	mov	r1, r5
 80066f8:	2000      	movs	r0, #0
 80066fa:	f858 2b04 	ldr.w	r2, [r8], #4
 80066fe:	f8d1 c000 	ldr.w	ip, [r1]
 8006702:	fa1f fe82 	uxth.w	lr, r2
 8006706:	fa1f f38c 	uxth.w	r3, ip
 800670a:	eba3 030e 	sub.w	r3, r3, lr
 800670e:	4403      	add	r3, r0
 8006710:	0c12      	lsrs	r2, r2, #16
 8006712:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006716:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800671a:	b29b      	uxth	r3, r3
 800671c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006720:	45c1      	cmp	r9, r8
 8006722:	f841 3b04 	str.w	r3, [r1], #4
 8006726:	ea4f 4022 	mov.w	r0, r2, asr #16
 800672a:	d2e6      	bcs.n	80066fa <quorem+0xa4>
 800672c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006730:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006734:	b922      	cbnz	r2, 8006740 <quorem+0xea>
 8006736:	3b04      	subs	r3, #4
 8006738:	429d      	cmp	r5, r3
 800673a:	461a      	mov	r2, r3
 800673c:	d30b      	bcc.n	8006756 <quorem+0x100>
 800673e:	613c      	str	r4, [r7, #16]
 8006740:	3601      	adds	r6, #1
 8006742:	4630      	mov	r0, r6
 8006744:	b003      	add	sp, #12
 8006746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800674a:	6812      	ldr	r2, [r2, #0]
 800674c:	3b04      	subs	r3, #4
 800674e:	2a00      	cmp	r2, #0
 8006750:	d1cb      	bne.n	80066ea <quorem+0x94>
 8006752:	3c01      	subs	r4, #1
 8006754:	e7c6      	b.n	80066e4 <quorem+0x8e>
 8006756:	6812      	ldr	r2, [r2, #0]
 8006758:	3b04      	subs	r3, #4
 800675a:	2a00      	cmp	r2, #0
 800675c:	d1ef      	bne.n	800673e <quorem+0xe8>
 800675e:	3c01      	subs	r4, #1
 8006760:	e7ea      	b.n	8006738 <quorem+0xe2>
 8006762:	2000      	movs	r0, #0
 8006764:	e7ee      	b.n	8006744 <quorem+0xee>
	...

08006768 <_dtoa_r>:
 8006768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800676c:	69c7      	ldr	r7, [r0, #28]
 800676e:	b099      	sub	sp, #100	@ 0x64
 8006770:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006774:	ec55 4b10 	vmov	r4, r5, d0
 8006778:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800677a:	9109      	str	r1, [sp, #36]	@ 0x24
 800677c:	4683      	mov	fp, r0
 800677e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006780:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006782:	b97f      	cbnz	r7, 80067a4 <_dtoa_r+0x3c>
 8006784:	2010      	movs	r0, #16
 8006786:	f000 fdfd 	bl	8007384 <malloc>
 800678a:	4602      	mov	r2, r0
 800678c:	f8cb 001c 	str.w	r0, [fp, #28]
 8006790:	b920      	cbnz	r0, 800679c <_dtoa_r+0x34>
 8006792:	4ba7      	ldr	r3, [pc, #668]	@ (8006a30 <_dtoa_r+0x2c8>)
 8006794:	21ef      	movs	r1, #239	@ 0xef
 8006796:	48a7      	ldr	r0, [pc, #668]	@ (8006a34 <_dtoa_r+0x2cc>)
 8006798:	f001 fe2e 	bl	80083f8 <__assert_func>
 800679c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80067a0:	6007      	str	r7, [r0, #0]
 80067a2:	60c7      	str	r7, [r0, #12]
 80067a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80067a8:	6819      	ldr	r1, [r3, #0]
 80067aa:	b159      	cbz	r1, 80067c4 <_dtoa_r+0x5c>
 80067ac:	685a      	ldr	r2, [r3, #4]
 80067ae:	604a      	str	r2, [r1, #4]
 80067b0:	2301      	movs	r3, #1
 80067b2:	4093      	lsls	r3, r2
 80067b4:	608b      	str	r3, [r1, #8]
 80067b6:	4658      	mov	r0, fp
 80067b8:	f000 feda 	bl	8007570 <_Bfree>
 80067bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80067c0:	2200      	movs	r2, #0
 80067c2:	601a      	str	r2, [r3, #0]
 80067c4:	1e2b      	subs	r3, r5, #0
 80067c6:	bfb9      	ittee	lt
 80067c8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80067cc:	9303      	strlt	r3, [sp, #12]
 80067ce:	2300      	movge	r3, #0
 80067d0:	6033      	strge	r3, [r6, #0]
 80067d2:	9f03      	ldr	r7, [sp, #12]
 80067d4:	4b98      	ldr	r3, [pc, #608]	@ (8006a38 <_dtoa_r+0x2d0>)
 80067d6:	bfbc      	itt	lt
 80067d8:	2201      	movlt	r2, #1
 80067da:	6032      	strlt	r2, [r6, #0]
 80067dc:	43bb      	bics	r3, r7
 80067de:	d112      	bne.n	8006806 <_dtoa_r+0x9e>
 80067e0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80067e2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80067e6:	6013      	str	r3, [r2, #0]
 80067e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80067ec:	4323      	orrs	r3, r4
 80067ee:	f000 854d 	beq.w	800728c <_dtoa_r+0xb24>
 80067f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80067f4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006a4c <_dtoa_r+0x2e4>
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	f000 854f 	beq.w	800729c <_dtoa_r+0xb34>
 80067fe:	f10a 0303 	add.w	r3, sl, #3
 8006802:	f000 bd49 	b.w	8007298 <_dtoa_r+0xb30>
 8006806:	ed9d 7b02 	vldr	d7, [sp, #8]
 800680a:	2200      	movs	r2, #0
 800680c:	ec51 0b17 	vmov	r0, r1, d7
 8006810:	2300      	movs	r3, #0
 8006812:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006816:	f7fa f95f 	bl	8000ad8 <__aeabi_dcmpeq>
 800681a:	4680      	mov	r8, r0
 800681c:	b158      	cbz	r0, 8006836 <_dtoa_r+0xce>
 800681e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006820:	2301      	movs	r3, #1
 8006822:	6013      	str	r3, [r2, #0]
 8006824:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006826:	b113      	cbz	r3, 800682e <_dtoa_r+0xc6>
 8006828:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800682a:	4b84      	ldr	r3, [pc, #528]	@ (8006a3c <_dtoa_r+0x2d4>)
 800682c:	6013      	str	r3, [r2, #0]
 800682e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006a50 <_dtoa_r+0x2e8>
 8006832:	f000 bd33 	b.w	800729c <_dtoa_r+0xb34>
 8006836:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800683a:	aa16      	add	r2, sp, #88	@ 0x58
 800683c:	a917      	add	r1, sp, #92	@ 0x5c
 800683e:	4658      	mov	r0, fp
 8006840:	f001 f980 	bl	8007b44 <__d2b>
 8006844:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006848:	4681      	mov	r9, r0
 800684a:	2e00      	cmp	r6, #0
 800684c:	d077      	beq.n	800693e <_dtoa_r+0x1d6>
 800684e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006850:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006854:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006858:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800685c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006860:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006864:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006868:	4619      	mov	r1, r3
 800686a:	2200      	movs	r2, #0
 800686c:	4b74      	ldr	r3, [pc, #464]	@ (8006a40 <_dtoa_r+0x2d8>)
 800686e:	f7f9 fd13 	bl	8000298 <__aeabi_dsub>
 8006872:	a369      	add	r3, pc, #420	@ (adr r3, 8006a18 <_dtoa_r+0x2b0>)
 8006874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006878:	f7f9 fec6 	bl	8000608 <__aeabi_dmul>
 800687c:	a368      	add	r3, pc, #416	@ (adr r3, 8006a20 <_dtoa_r+0x2b8>)
 800687e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006882:	f7f9 fd0b 	bl	800029c <__adddf3>
 8006886:	4604      	mov	r4, r0
 8006888:	4630      	mov	r0, r6
 800688a:	460d      	mov	r5, r1
 800688c:	f7f9 fe52 	bl	8000534 <__aeabi_i2d>
 8006890:	a365      	add	r3, pc, #404	@ (adr r3, 8006a28 <_dtoa_r+0x2c0>)
 8006892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006896:	f7f9 feb7 	bl	8000608 <__aeabi_dmul>
 800689a:	4602      	mov	r2, r0
 800689c:	460b      	mov	r3, r1
 800689e:	4620      	mov	r0, r4
 80068a0:	4629      	mov	r1, r5
 80068a2:	f7f9 fcfb 	bl	800029c <__adddf3>
 80068a6:	4604      	mov	r4, r0
 80068a8:	460d      	mov	r5, r1
 80068aa:	f7fa f95d 	bl	8000b68 <__aeabi_d2iz>
 80068ae:	2200      	movs	r2, #0
 80068b0:	4607      	mov	r7, r0
 80068b2:	2300      	movs	r3, #0
 80068b4:	4620      	mov	r0, r4
 80068b6:	4629      	mov	r1, r5
 80068b8:	f7fa f918 	bl	8000aec <__aeabi_dcmplt>
 80068bc:	b140      	cbz	r0, 80068d0 <_dtoa_r+0x168>
 80068be:	4638      	mov	r0, r7
 80068c0:	f7f9 fe38 	bl	8000534 <__aeabi_i2d>
 80068c4:	4622      	mov	r2, r4
 80068c6:	462b      	mov	r3, r5
 80068c8:	f7fa f906 	bl	8000ad8 <__aeabi_dcmpeq>
 80068cc:	b900      	cbnz	r0, 80068d0 <_dtoa_r+0x168>
 80068ce:	3f01      	subs	r7, #1
 80068d0:	2f16      	cmp	r7, #22
 80068d2:	d851      	bhi.n	8006978 <_dtoa_r+0x210>
 80068d4:	4b5b      	ldr	r3, [pc, #364]	@ (8006a44 <_dtoa_r+0x2dc>)
 80068d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80068da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80068e2:	f7fa f903 	bl	8000aec <__aeabi_dcmplt>
 80068e6:	2800      	cmp	r0, #0
 80068e8:	d048      	beq.n	800697c <_dtoa_r+0x214>
 80068ea:	3f01      	subs	r7, #1
 80068ec:	2300      	movs	r3, #0
 80068ee:	9312      	str	r3, [sp, #72]	@ 0x48
 80068f0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80068f2:	1b9b      	subs	r3, r3, r6
 80068f4:	1e5a      	subs	r2, r3, #1
 80068f6:	bf44      	itt	mi
 80068f8:	f1c3 0801 	rsbmi	r8, r3, #1
 80068fc:	2300      	movmi	r3, #0
 80068fe:	9208      	str	r2, [sp, #32]
 8006900:	bf54      	ite	pl
 8006902:	f04f 0800 	movpl.w	r8, #0
 8006906:	9308      	strmi	r3, [sp, #32]
 8006908:	2f00      	cmp	r7, #0
 800690a:	db39      	blt.n	8006980 <_dtoa_r+0x218>
 800690c:	9b08      	ldr	r3, [sp, #32]
 800690e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006910:	443b      	add	r3, r7
 8006912:	9308      	str	r3, [sp, #32]
 8006914:	2300      	movs	r3, #0
 8006916:	930a      	str	r3, [sp, #40]	@ 0x28
 8006918:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800691a:	2b09      	cmp	r3, #9
 800691c:	d864      	bhi.n	80069e8 <_dtoa_r+0x280>
 800691e:	2b05      	cmp	r3, #5
 8006920:	bfc4      	itt	gt
 8006922:	3b04      	subgt	r3, #4
 8006924:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006926:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006928:	f1a3 0302 	sub.w	r3, r3, #2
 800692c:	bfcc      	ite	gt
 800692e:	2400      	movgt	r4, #0
 8006930:	2401      	movle	r4, #1
 8006932:	2b03      	cmp	r3, #3
 8006934:	d863      	bhi.n	80069fe <_dtoa_r+0x296>
 8006936:	e8df f003 	tbb	[pc, r3]
 800693a:	372a      	.short	0x372a
 800693c:	5535      	.short	0x5535
 800693e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006942:	441e      	add	r6, r3
 8006944:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006948:	2b20      	cmp	r3, #32
 800694a:	bfc1      	itttt	gt
 800694c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006950:	409f      	lslgt	r7, r3
 8006952:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006956:	fa24 f303 	lsrgt.w	r3, r4, r3
 800695a:	bfd6      	itet	le
 800695c:	f1c3 0320 	rsble	r3, r3, #32
 8006960:	ea47 0003 	orrgt.w	r0, r7, r3
 8006964:	fa04 f003 	lslle.w	r0, r4, r3
 8006968:	f7f9 fdd4 	bl	8000514 <__aeabi_ui2d>
 800696c:	2201      	movs	r2, #1
 800696e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006972:	3e01      	subs	r6, #1
 8006974:	9214      	str	r2, [sp, #80]	@ 0x50
 8006976:	e777      	b.n	8006868 <_dtoa_r+0x100>
 8006978:	2301      	movs	r3, #1
 800697a:	e7b8      	b.n	80068ee <_dtoa_r+0x186>
 800697c:	9012      	str	r0, [sp, #72]	@ 0x48
 800697e:	e7b7      	b.n	80068f0 <_dtoa_r+0x188>
 8006980:	427b      	negs	r3, r7
 8006982:	930a      	str	r3, [sp, #40]	@ 0x28
 8006984:	2300      	movs	r3, #0
 8006986:	eba8 0807 	sub.w	r8, r8, r7
 800698a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800698c:	e7c4      	b.n	8006918 <_dtoa_r+0x1b0>
 800698e:	2300      	movs	r3, #0
 8006990:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006992:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006994:	2b00      	cmp	r3, #0
 8006996:	dc35      	bgt.n	8006a04 <_dtoa_r+0x29c>
 8006998:	2301      	movs	r3, #1
 800699a:	9300      	str	r3, [sp, #0]
 800699c:	9307      	str	r3, [sp, #28]
 800699e:	461a      	mov	r2, r3
 80069a0:	920e      	str	r2, [sp, #56]	@ 0x38
 80069a2:	e00b      	b.n	80069bc <_dtoa_r+0x254>
 80069a4:	2301      	movs	r3, #1
 80069a6:	e7f3      	b.n	8006990 <_dtoa_r+0x228>
 80069a8:	2300      	movs	r3, #0
 80069aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80069ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80069ae:	18fb      	adds	r3, r7, r3
 80069b0:	9300      	str	r3, [sp, #0]
 80069b2:	3301      	adds	r3, #1
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	9307      	str	r3, [sp, #28]
 80069b8:	bfb8      	it	lt
 80069ba:	2301      	movlt	r3, #1
 80069bc:	f8db 001c 	ldr.w	r0, [fp, #28]
 80069c0:	2100      	movs	r1, #0
 80069c2:	2204      	movs	r2, #4
 80069c4:	f102 0514 	add.w	r5, r2, #20
 80069c8:	429d      	cmp	r5, r3
 80069ca:	d91f      	bls.n	8006a0c <_dtoa_r+0x2a4>
 80069cc:	6041      	str	r1, [r0, #4]
 80069ce:	4658      	mov	r0, fp
 80069d0:	f000 fd8e 	bl	80074f0 <_Balloc>
 80069d4:	4682      	mov	sl, r0
 80069d6:	2800      	cmp	r0, #0
 80069d8:	d13c      	bne.n	8006a54 <_dtoa_r+0x2ec>
 80069da:	4b1b      	ldr	r3, [pc, #108]	@ (8006a48 <_dtoa_r+0x2e0>)
 80069dc:	4602      	mov	r2, r0
 80069de:	f240 11af 	movw	r1, #431	@ 0x1af
 80069e2:	e6d8      	b.n	8006796 <_dtoa_r+0x2e>
 80069e4:	2301      	movs	r3, #1
 80069e6:	e7e0      	b.n	80069aa <_dtoa_r+0x242>
 80069e8:	2401      	movs	r4, #1
 80069ea:	2300      	movs	r3, #0
 80069ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80069ee:	940b      	str	r4, [sp, #44]	@ 0x2c
 80069f0:	f04f 33ff 	mov.w	r3, #4294967295
 80069f4:	9300      	str	r3, [sp, #0]
 80069f6:	9307      	str	r3, [sp, #28]
 80069f8:	2200      	movs	r2, #0
 80069fa:	2312      	movs	r3, #18
 80069fc:	e7d0      	b.n	80069a0 <_dtoa_r+0x238>
 80069fe:	2301      	movs	r3, #1
 8006a00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a02:	e7f5      	b.n	80069f0 <_dtoa_r+0x288>
 8006a04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006a06:	9300      	str	r3, [sp, #0]
 8006a08:	9307      	str	r3, [sp, #28]
 8006a0a:	e7d7      	b.n	80069bc <_dtoa_r+0x254>
 8006a0c:	3101      	adds	r1, #1
 8006a0e:	0052      	lsls	r2, r2, #1
 8006a10:	e7d8      	b.n	80069c4 <_dtoa_r+0x25c>
 8006a12:	bf00      	nop
 8006a14:	f3af 8000 	nop.w
 8006a18:	636f4361 	.word	0x636f4361
 8006a1c:	3fd287a7 	.word	0x3fd287a7
 8006a20:	8b60c8b3 	.word	0x8b60c8b3
 8006a24:	3fc68a28 	.word	0x3fc68a28
 8006a28:	509f79fb 	.word	0x509f79fb
 8006a2c:	3fd34413 	.word	0x3fd34413
 8006a30:	080087d5 	.word	0x080087d5
 8006a34:	080087ec 	.word	0x080087ec
 8006a38:	7ff00000 	.word	0x7ff00000
 8006a3c:	080087a5 	.word	0x080087a5
 8006a40:	3ff80000 	.word	0x3ff80000
 8006a44:	080088e8 	.word	0x080088e8
 8006a48:	08008844 	.word	0x08008844
 8006a4c:	080087d1 	.word	0x080087d1
 8006a50:	080087a4 	.word	0x080087a4
 8006a54:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006a58:	6018      	str	r0, [r3, #0]
 8006a5a:	9b07      	ldr	r3, [sp, #28]
 8006a5c:	2b0e      	cmp	r3, #14
 8006a5e:	f200 80a4 	bhi.w	8006baa <_dtoa_r+0x442>
 8006a62:	2c00      	cmp	r4, #0
 8006a64:	f000 80a1 	beq.w	8006baa <_dtoa_r+0x442>
 8006a68:	2f00      	cmp	r7, #0
 8006a6a:	dd33      	ble.n	8006ad4 <_dtoa_r+0x36c>
 8006a6c:	4bad      	ldr	r3, [pc, #692]	@ (8006d24 <_dtoa_r+0x5bc>)
 8006a6e:	f007 020f 	and.w	r2, r7, #15
 8006a72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a76:	ed93 7b00 	vldr	d7, [r3]
 8006a7a:	05f8      	lsls	r0, r7, #23
 8006a7c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006a80:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006a84:	d516      	bpl.n	8006ab4 <_dtoa_r+0x34c>
 8006a86:	4ba8      	ldr	r3, [pc, #672]	@ (8006d28 <_dtoa_r+0x5c0>)
 8006a88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006a8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006a90:	f7f9 fee4 	bl	800085c <__aeabi_ddiv>
 8006a94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a98:	f004 040f 	and.w	r4, r4, #15
 8006a9c:	2603      	movs	r6, #3
 8006a9e:	4da2      	ldr	r5, [pc, #648]	@ (8006d28 <_dtoa_r+0x5c0>)
 8006aa0:	b954      	cbnz	r4, 8006ab8 <_dtoa_r+0x350>
 8006aa2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006aa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006aaa:	f7f9 fed7 	bl	800085c <__aeabi_ddiv>
 8006aae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ab2:	e028      	b.n	8006b06 <_dtoa_r+0x39e>
 8006ab4:	2602      	movs	r6, #2
 8006ab6:	e7f2      	b.n	8006a9e <_dtoa_r+0x336>
 8006ab8:	07e1      	lsls	r1, r4, #31
 8006aba:	d508      	bpl.n	8006ace <_dtoa_r+0x366>
 8006abc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ac0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006ac4:	f7f9 fda0 	bl	8000608 <__aeabi_dmul>
 8006ac8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006acc:	3601      	adds	r6, #1
 8006ace:	1064      	asrs	r4, r4, #1
 8006ad0:	3508      	adds	r5, #8
 8006ad2:	e7e5      	b.n	8006aa0 <_dtoa_r+0x338>
 8006ad4:	f000 80d2 	beq.w	8006c7c <_dtoa_r+0x514>
 8006ad8:	427c      	negs	r4, r7
 8006ada:	4b92      	ldr	r3, [pc, #584]	@ (8006d24 <_dtoa_r+0x5bc>)
 8006adc:	4d92      	ldr	r5, [pc, #584]	@ (8006d28 <_dtoa_r+0x5c0>)
 8006ade:	f004 020f 	and.w	r2, r4, #15
 8006ae2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006aee:	f7f9 fd8b 	bl	8000608 <__aeabi_dmul>
 8006af2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006af6:	1124      	asrs	r4, r4, #4
 8006af8:	2300      	movs	r3, #0
 8006afa:	2602      	movs	r6, #2
 8006afc:	2c00      	cmp	r4, #0
 8006afe:	f040 80b2 	bne.w	8006c66 <_dtoa_r+0x4fe>
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d1d3      	bne.n	8006aae <_dtoa_r+0x346>
 8006b06:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006b08:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	f000 80b7 	beq.w	8006c80 <_dtoa_r+0x518>
 8006b12:	4b86      	ldr	r3, [pc, #536]	@ (8006d2c <_dtoa_r+0x5c4>)
 8006b14:	2200      	movs	r2, #0
 8006b16:	4620      	mov	r0, r4
 8006b18:	4629      	mov	r1, r5
 8006b1a:	f7f9 ffe7 	bl	8000aec <__aeabi_dcmplt>
 8006b1e:	2800      	cmp	r0, #0
 8006b20:	f000 80ae 	beq.w	8006c80 <_dtoa_r+0x518>
 8006b24:	9b07      	ldr	r3, [sp, #28]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	f000 80aa 	beq.w	8006c80 <_dtoa_r+0x518>
 8006b2c:	9b00      	ldr	r3, [sp, #0]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	dd37      	ble.n	8006ba2 <_dtoa_r+0x43a>
 8006b32:	1e7b      	subs	r3, r7, #1
 8006b34:	9304      	str	r3, [sp, #16]
 8006b36:	4620      	mov	r0, r4
 8006b38:	4b7d      	ldr	r3, [pc, #500]	@ (8006d30 <_dtoa_r+0x5c8>)
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	4629      	mov	r1, r5
 8006b3e:	f7f9 fd63 	bl	8000608 <__aeabi_dmul>
 8006b42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b46:	9c00      	ldr	r4, [sp, #0]
 8006b48:	3601      	adds	r6, #1
 8006b4a:	4630      	mov	r0, r6
 8006b4c:	f7f9 fcf2 	bl	8000534 <__aeabi_i2d>
 8006b50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b54:	f7f9 fd58 	bl	8000608 <__aeabi_dmul>
 8006b58:	4b76      	ldr	r3, [pc, #472]	@ (8006d34 <_dtoa_r+0x5cc>)
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f7f9 fb9e 	bl	800029c <__adddf3>
 8006b60:	4605      	mov	r5, r0
 8006b62:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006b66:	2c00      	cmp	r4, #0
 8006b68:	f040 808d 	bne.w	8006c86 <_dtoa_r+0x51e>
 8006b6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b70:	4b71      	ldr	r3, [pc, #452]	@ (8006d38 <_dtoa_r+0x5d0>)
 8006b72:	2200      	movs	r2, #0
 8006b74:	f7f9 fb90 	bl	8000298 <__aeabi_dsub>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	460b      	mov	r3, r1
 8006b7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006b80:	462a      	mov	r2, r5
 8006b82:	4633      	mov	r3, r6
 8006b84:	f7f9 ffd0 	bl	8000b28 <__aeabi_dcmpgt>
 8006b88:	2800      	cmp	r0, #0
 8006b8a:	f040 828b 	bne.w	80070a4 <_dtoa_r+0x93c>
 8006b8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b92:	462a      	mov	r2, r5
 8006b94:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006b98:	f7f9 ffa8 	bl	8000aec <__aeabi_dcmplt>
 8006b9c:	2800      	cmp	r0, #0
 8006b9e:	f040 8128 	bne.w	8006df2 <_dtoa_r+0x68a>
 8006ba2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006ba6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006baa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	f2c0 815a 	blt.w	8006e66 <_dtoa_r+0x6fe>
 8006bb2:	2f0e      	cmp	r7, #14
 8006bb4:	f300 8157 	bgt.w	8006e66 <_dtoa_r+0x6fe>
 8006bb8:	4b5a      	ldr	r3, [pc, #360]	@ (8006d24 <_dtoa_r+0x5bc>)
 8006bba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006bbe:	ed93 7b00 	vldr	d7, [r3]
 8006bc2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	ed8d 7b00 	vstr	d7, [sp]
 8006bca:	da03      	bge.n	8006bd4 <_dtoa_r+0x46c>
 8006bcc:	9b07      	ldr	r3, [sp, #28]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	f340 8101 	ble.w	8006dd6 <_dtoa_r+0x66e>
 8006bd4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006bd8:	4656      	mov	r6, sl
 8006bda:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006bde:	4620      	mov	r0, r4
 8006be0:	4629      	mov	r1, r5
 8006be2:	f7f9 fe3b 	bl	800085c <__aeabi_ddiv>
 8006be6:	f7f9 ffbf 	bl	8000b68 <__aeabi_d2iz>
 8006bea:	4680      	mov	r8, r0
 8006bec:	f7f9 fca2 	bl	8000534 <__aeabi_i2d>
 8006bf0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006bf4:	f7f9 fd08 	bl	8000608 <__aeabi_dmul>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	460b      	mov	r3, r1
 8006bfc:	4620      	mov	r0, r4
 8006bfe:	4629      	mov	r1, r5
 8006c00:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006c04:	f7f9 fb48 	bl	8000298 <__aeabi_dsub>
 8006c08:	f806 4b01 	strb.w	r4, [r6], #1
 8006c0c:	9d07      	ldr	r5, [sp, #28]
 8006c0e:	eba6 040a 	sub.w	r4, r6, sl
 8006c12:	42a5      	cmp	r5, r4
 8006c14:	4602      	mov	r2, r0
 8006c16:	460b      	mov	r3, r1
 8006c18:	f040 8117 	bne.w	8006e4a <_dtoa_r+0x6e2>
 8006c1c:	f7f9 fb3e 	bl	800029c <__adddf3>
 8006c20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c24:	4604      	mov	r4, r0
 8006c26:	460d      	mov	r5, r1
 8006c28:	f7f9 ff7e 	bl	8000b28 <__aeabi_dcmpgt>
 8006c2c:	2800      	cmp	r0, #0
 8006c2e:	f040 80f9 	bne.w	8006e24 <_dtoa_r+0x6bc>
 8006c32:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c36:	4620      	mov	r0, r4
 8006c38:	4629      	mov	r1, r5
 8006c3a:	f7f9 ff4d 	bl	8000ad8 <__aeabi_dcmpeq>
 8006c3e:	b118      	cbz	r0, 8006c48 <_dtoa_r+0x4e0>
 8006c40:	f018 0f01 	tst.w	r8, #1
 8006c44:	f040 80ee 	bne.w	8006e24 <_dtoa_r+0x6bc>
 8006c48:	4649      	mov	r1, r9
 8006c4a:	4658      	mov	r0, fp
 8006c4c:	f000 fc90 	bl	8007570 <_Bfree>
 8006c50:	2300      	movs	r3, #0
 8006c52:	7033      	strb	r3, [r6, #0]
 8006c54:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006c56:	3701      	adds	r7, #1
 8006c58:	601f      	str	r7, [r3, #0]
 8006c5a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	f000 831d 	beq.w	800729c <_dtoa_r+0xb34>
 8006c62:	601e      	str	r6, [r3, #0]
 8006c64:	e31a      	b.n	800729c <_dtoa_r+0xb34>
 8006c66:	07e2      	lsls	r2, r4, #31
 8006c68:	d505      	bpl.n	8006c76 <_dtoa_r+0x50e>
 8006c6a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006c6e:	f7f9 fccb 	bl	8000608 <__aeabi_dmul>
 8006c72:	3601      	adds	r6, #1
 8006c74:	2301      	movs	r3, #1
 8006c76:	1064      	asrs	r4, r4, #1
 8006c78:	3508      	adds	r5, #8
 8006c7a:	e73f      	b.n	8006afc <_dtoa_r+0x394>
 8006c7c:	2602      	movs	r6, #2
 8006c7e:	e742      	b.n	8006b06 <_dtoa_r+0x39e>
 8006c80:	9c07      	ldr	r4, [sp, #28]
 8006c82:	9704      	str	r7, [sp, #16]
 8006c84:	e761      	b.n	8006b4a <_dtoa_r+0x3e2>
 8006c86:	4b27      	ldr	r3, [pc, #156]	@ (8006d24 <_dtoa_r+0x5bc>)
 8006c88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006c8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006c8e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006c92:	4454      	add	r4, sl
 8006c94:	2900      	cmp	r1, #0
 8006c96:	d053      	beq.n	8006d40 <_dtoa_r+0x5d8>
 8006c98:	4928      	ldr	r1, [pc, #160]	@ (8006d3c <_dtoa_r+0x5d4>)
 8006c9a:	2000      	movs	r0, #0
 8006c9c:	f7f9 fdde 	bl	800085c <__aeabi_ddiv>
 8006ca0:	4633      	mov	r3, r6
 8006ca2:	462a      	mov	r2, r5
 8006ca4:	f7f9 faf8 	bl	8000298 <__aeabi_dsub>
 8006ca8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006cac:	4656      	mov	r6, sl
 8006cae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cb2:	f7f9 ff59 	bl	8000b68 <__aeabi_d2iz>
 8006cb6:	4605      	mov	r5, r0
 8006cb8:	f7f9 fc3c 	bl	8000534 <__aeabi_i2d>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	460b      	mov	r3, r1
 8006cc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cc4:	f7f9 fae8 	bl	8000298 <__aeabi_dsub>
 8006cc8:	3530      	adds	r5, #48	@ 0x30
 8006cca:	4602      	mov	r2, r0
 8006ccc:	460b      	mov	r3, r1
 8006cce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006cd2:	f806 5b01 	strb.w	r5, [r6], #1
 8006cd6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006cda:	f7f9 ff07 	bl	8000aec <__aeabi_dcmplt>
 8006cde:	2800      	cmp	r0, #0
 8006ce0:	d171      	bne.n	8006dc6 <_dtoa_r+0x65e>
 8006ce2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ce6:	4911      	ldr	r1, [pc, #68]	@ (8006d2c <_dtoa_r+0x5c4>)
 8006ce8:	2000      	movs	r0, #0
 8006cea:	f7f9 fad5 	bl	8000298 <__aeabi_dsub>
 8006cee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006cf2:	f7f9 fefb 	bl	8000aec <__aeabi_dcmplt>
 8006cf6:	2800      	cmp	r0, #0
 8006cf8:	f040 8095 	bne.w	8006e26 <_dtoa_r+0x6be>
 8006cfc:	42a6      	cmp	r6, r4
 8006cfe:	f43f af50 	beq.w	8006ba2 <_dtoa_r+0x43a>
 8006d02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006d06:	4b0a      	ldr	r3, [pc, #40]	@ (8006d30 <_dtoa_r+0x5c8>)
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f7f9 fc7d 	bl	8000608 <__aeabi_dmul>
 8006d0e:	4b08      	ldr	r3, [pc, #32]	@ (8006d30 <_dtoa_r+0x5c8>)
 8006d10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006d14:	2200      	movs	r2, #0
 8006d16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d1a:	f7f9 fc75 	bl	8000608 <__aeabi_dmul>
 8006d1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d22:	e7c4      	b.n	8006cae <_dtoa_r+0x546>
 8006d24:	080088e8 	.word	0x080088e8
 8006d28:	080088c0 	.word	0x080088c0
 8006d2c:	3ff00000 	.word	0x3ff00000
 8006d30:	40240000 	.word	0x40240000
 8006d34:	401c0000 	.word	0x401c0000
 8006d38:	40140000 	.word	0x40140000
 8006d3c:	3fe00000 	.word	0x3fe00000
 8006d40:	4631      	mov	r1, r6
 8006d42:	4628      	mov	r0, r5
 8006d44:	f7f9 fc60 	bl	8000608 <__aeabi_dmul>
 8006d48:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006d4c:	9415      	str	r4, [sp, #84]	@ 0x54
 8006d4e:	4656      	mov	r6, sl
 8006d50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d54:	f7f9 ff08 	bl	8000b68 <__aeabi_d2iz>
 8006d58:	4605      	mov	r5, r0
 8006d5a:	f7f9 fbeb 	bl	8000534 <__aeabi_i2d>
 8006d5e:	4602      	mov	r2, r0
 8006d60:	460b      	mov	r3, r1
 8006d62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d66:	f7f9 fa97 	bl	8000298 <__aeabi_dsub>
 8006d6a:	3530      	adds	r5, #48	@ 0x30
 8006d6c:	f806 5b01 	strb.w	r5, [r6], #1
 8006d70:	4602      	mov	r2, r0
 8006d72:	460b      	mov	r3, r1
 8006d74:	42a6      	cmp	r6, r4
 8006d76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006d7a:	f04f 0200 	mov.w	r2, #0
 8006d7e:	d124      	bne.n	8006dca <_dtoa_r+0x662>
 8006d80:	4bac      	ldr	r3, [pc, #688]	@ (8007034 <_dtoa_r+0x8cc>)
 8006d82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006d86:	f7f9 fa89 	bl	800029c <__adddf3>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	460b      	mov	r3, r1
 8006d8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d92:	f7f9 fec9 	bl	8000b28 <__aeabi_dcmpgt>
 8006d96:	2800      	cmp	r0, #0
 8006d98:	d145      	bne.n	8006e26 <_dtoa_r+0x6be>
 8006d9a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006d9e:	49a5      	ldr	r1, [pc, #660]	@ (8007034 <_dtoa_r+0x8cc>)
 8006da0:	2000      	movs	r0, #0
 8006da2:	f7f9 fa79 	bl	8000298 <__aeabi_dsub>
 8006da6:	4602      	mov	r2, r0
 8006da8:	460b      	mov	r3, r1
 8006daa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006dae:	f7f9 fe9d 	bl	8000aec <__aeabi_dcmplt>
 8006db2:	2800      	cmp	r0, #0
 8006db4:	f43f aef5 	beq.w	8006ba2 <_dtoa_r+0x43a>
 8006db8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006dba:	1e73      	subs	r3, r6, #1
 8006dbc:	9315      	str	r3, [sp, #84]	@ 0x54
 8006dbe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006dc2:	2b30      	cmp	r3, #48	@ 0x30
 8006dc4:	d0f8      	beq.n	8006db8 <_dtoa_r+0x650>
 8006dc6:	9f04      	ldr	r7, [sp, #16]
 8006dc8:	e73e      	b.n	8006c48 <_dtoa_r+0x4e0>
 8006dca:	4b9b      	ldr	r3, [pc, #620]	@ (8007038 <_dtoa_r+0x8d0>)
 8006dcc:	f7f9 fc1c 	bl	8000608 <__aeabi_dmul>
 8006dd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006dd4:	e7bc      	b.n	8006d50 <_dtoa_r+0x5e8>
 8006dd6:	d10c      	bne.n	8006df2 <_dtoa_r+0x68a>
 8006dd8:	4b98      	ldr	r3, [pc, #608]	@ (800703c <_dtoa_r+0x8d4>)
 8006dda:	2200      	movs	r2, #0
 8006ddc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006de0:	f7f9 fc12 	bl	8000608 <__aeabi_dmul>
 8006de4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006de8:	f7f9 fe94 	bl	8000b14 <__aeabi_dcmpge>
 8006dec:	2800      	cmp	r0, #0
 8006dee:	f000 8157 	beq.w	80070a0 <_dtoa_r+0x938>
 8006df2:	2400      	movs	r4, #0
 8006df4:	4625      	mov	r5, r4
 8006df6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006df8:	43db      	mvns	r3, r3
 8006dfa:	9304      	str	r3, [sp, #16]
 8006dfc:	4656      	mov	r6, sl
 8006dfe:	2700      	movs	r7, #0
 8006e00:	4621      	mov	r1, r4
 8006e02:	4658      	mov	r0, fp
 8006e04:	f000 fbb4 	bl	8007570 <_Bfree>
 8006e08:	2d00      	cmp	r5, #0
 8006e0a:	d0dc      	beq.n	8006dc6 <_dtoa_r+0x65e>
 8006e0c:	b12f      	cbz	r7, 8006e1a <_dtoa_r+0x6b2>
 8006e0e:	42af      	cmp	r7, r5
 8006e10:	d003      	beq.n	8006e1a <_dtoa_r+0x6b2>
 8006e12:	4639      	mov	r1, r7
 8006e14:	4658      	mov	r0, fp
 8006e16:	f000 fbab 	bl	8007570 <_Bfree>
 8006e1a:	4629      	mov	r1, r5
 8006e1c:	4658      	mov	r0, fp
 8006e1e:	f000 fba7 	bl	8007570 <_Bfree>
 8006e22:	e7d0      	b.n	8006dc6 <_dtoa_r+0x65e>
 8006e24:	9704      	str	r7, [sp, #16]
 8006e26:	4633      	mov	r3, r6
 8006e28:	461e      	mov	r6, r3
 8006e2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e2e:	2a39      	cmp	r2, #57	@ 0x39
 8006e30:	d107      	bne.n	8006e42 <_dtoa_r+0x6da>
 8006e32:	459a      	cmp	sl, r3
 8006e34:	d1f8      	bne.n	8006e28 <_dtoa_r+0x6c0>
 8006e36:	9a04      	ldr	r2, [sp, #16]
 8006e38:	3201      	adds	r2, #1
 8006e3a:	9204      	str	r2, [sp, #16]
 8006e3c:	2230      	movs	r2, #48	@ 0x30
 8006e3e:	f88a 2000 	strb.w	r2, [sl]
 8006e42:	781a      	ldrb	r2, [r3, #0]
 8006e44:	3201      	adds	r2, #1
 8006e46:	701a      	strb	r2, [r3, #0]
 8006e48:	e7bd      	b.n	8006dc6 <_dtoa_r+0x65e>
 8006e4a:	4b7b      	ldr	r3, [pc, #492]	@ (8007038 <_dtoa_r+0x8d0>)
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f7f9 fbdb 	bl	8000608 <__aeabi_dmul>
 8006e52:	2200      	movs	r2, #0
 8006e54:	2300      	movs	r3, #0
 8006e56:	4604      	mov	r4, r0
 8006e58:	460d      	mov	r5, r1
 8006e5a:	f7f9 fe3d 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e5e:	2800      	cmp	r0, #0
 8006e60:	f43f aebb 	beq.w	8006bda <_dtoa_r+0x472>
 8006e64:	e6f0      	b.n	8006c48 <_dtoa_r+0x4e0>
 8006e66:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006e68:	2a00      	cmp	r2, #0
 8006e6a:	f000 80db 	beq.w	8007024 <_dtoa_r+0x8bc>
 8006e6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e70:	2a01      	cmp	r2, #1
 8006e72:	f300 80bf 	bgt.w	8006ff4 <_dtoa_r+0x88c>
 8006e76:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006e78:	2a00      	cmp	r2, #0
 8006e7a:	f000 80b7 	beq.w	8006fec <_dtoa_r+0x884>
 8006e7e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006e82:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006e84:	4646      	mov	r6, r8
 8006e86:	9a08      	ldr	r2, [sp, #32]
 8006e88:	2101      	movs	r1, #1
 8006e8a:	441a      	add	r2, r3
 8006e8c:	4658      	mov	r0, fp
 8006e8e:	4498      	add	r8, r3
 8006e90:	9208      	str	r2, [sp, #32]
 8006e92:	f000 fc21 	bl	80076d8 <__i2b>
 8006e96:	4605      	mov	r5, r0
 8006e98:	b15e      	cbz	r6, 8006eb2 <_dtoa_r+0x74a>
 8006e9a:	9b08      	ldr	r3, [sp, #32]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	dd08      	ble.n	8006eb2 <_dtoa_r+0x74a>
 8006ea0:	42b3      	cmp	r3, r6
 8006ea2:	9a08      	ldr	r2, [sp, #32]
 8006ea4:	bfa8      	it	ge
 8006ea6:	4633      	movge	r3, r6
 8006ea8:	eba8 0803 	sub.w	r8, r8, r3
 8006eac:	1af6      	subs	r6, r6, r3
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	9308      	str	r3, [sp, #32]
 8006eb2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006eb4:	b1f3      	cbz	r3, 8006ef4 <_dtoa_r+0x78c>
 8006eb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	f000 80b7 	beq.w	800702c <_dtoa_r+0x8c4>
 8006ebe:	b18c      	cbz	r4, 8006ee4 <_dtoa_r+0x77c>
 8006ec0:	4629      	mov	r1, r5
 8006ec2:	4622      	mov	r2, r4
 8006ec4:	4658      	mov	r0, fp
 8006ec6:	f000 fcc7 	bl	8007858 <__pow5mult>
 8006eca:	464a      	mov	r2, r9
 8006ecc:	4601      	mov	r1, r0
 8006ece:	4605      	mov	r5, r0
 8006ed0:	4658      	mov	r0, fp
 8006ed2:	f000 fc17 	bl	8007704 <__multiply>
 8006ed6:	4649      	mov	r1, r9
 8006ed8:	9004      	str	r0, [sp, #16]
 8006eda:	4658      	mov	r0, fp
 8006edc:	f000 fb48 	bl	8007570 <_Bfree>
 8006ee0:	9b04      	ldr	r3, [sp, #16]
 8006ee2:	4699      	mov	r9, r3
 8006ee4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ee6:	1b1a      	subs	r2, r3, r4
 8006ee8:	d004      	beq.n	8006ef4 <_dtoa_r+0x78c>
 8006eea:	4649      	mov	r1, r9
 8006eec:	4658      	mov	r0, fp
 8006eee:	f000 fcb3 	bl	8007858 <__pow5mult>
 8006ef2:	4681      	mov	r9, r0
 8006ef4:	2101      	movs	r1, #1
 8006ef6:	4658      	mov	r0, fp
 8006ef8:	f000 fbee 	bl	80076d8 <__i2b>
 8006efc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006efe:	4604      	mov	r4, r0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	f000 81cf 	beq.w	80072a4 <_dtoa_r+0xb3c>
 8006f06:	461a      	mov	r2, r3
 8006f08:	4601      	mov	r1, r0
 8006f0a:	4658      	mov	r0, fp
 8006f0c:	f000 fca4 	bl	8007858 <__pow5mult>
 8006f10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	4604      	mov	r4, r0
 8006f16:	f300 8095 	bgt.w	8007044 <_dtoa_r+0x8dc>
 8006f1a:	9b02      	ldr	r3, [sp, #8]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f040 8087 	bne.w	8007030 <_dtoa_r+0x8c8>
 8006f22:	9b03      	ldr	r3, [sp, #12]
 8006f24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	f040 8089 	bne.w	8007040 <_dtoa_r+0x8d8>
 8006f2e:	9b03      	ldr	r3, [sp, #12]
 8006f30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006f34:	0d1b      	lsrs	r3, r3, #20
 8006f36:	051b      	lsls	r3, r3, #20
 8006f38:	b12b      	cbz	r3, 8006f46 <_dtoa_r+0x7de>
 8006f3a:	9b08      	ldr	r3, [sp, #32]
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	9308      	str	r3, [sp, #32]
 8006f40:	f108 0801 	add.w	r8, r8, #1
 8006f44:	2301      	movs	r3, #1
 8006f46:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	f000 81b0 	beq.w	80072b0 <_dtoa_r+0xb48>
 8006f50:	6923      	ldr	r3, [r4, #16]
 8006f52:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006f56:	6918      	ldr	r0, [r3, #16]
 8006f58:	f000 fb72 	bl	8007640 <__hi0bits>
 8006f5c:	f1c0 0020 	rsb	r0, r0, #32
 8006f60:	9b08      	ldr	r3, [sp, #32]
 8006f62:	4418      	add	r0, r3
 8006f64:	f010 001f 	ands.w	r0, r0, #31
 8006f68:	d077      	beq.n	800705a <_dtoa_r+0x8f2>
 8006f6a:	f1c0 0320 	rsb	r3, r0, #32
 8006f6e:	2b04      	cmp	r3, #4
 8006f70:	dd6b      	ble.n	800704a <_dtoa_r+0x8e2>
 8006f72:	9b08      	ldr	r3, [sp, #32]
 8006f74:	f1c0 001c 	rsb	r0, r0, #28
 8006f78:	4403      	add	r3, r0
 8006f7a:	4480      	add	r8, r0
 8006f7c:	4406      	add	r6, r0
 8006f7e:	9308      	str	r3, [sp, #32]
 8006f80:	f1b8 0f00 	cmp.w	r8, #0
 8006f84:	dd05      	ble.n	8006f92 <_dtoa_r+0x82a>
 8006f86:	4649      	mov	r1, r9
 8006f88:	4642      	mov	r2, r8
 8006f8a:	4658      	mov	r0, fp
 8006f8c:	f000 fcbe 	bl	800790c <__lshift>
 8006f90:	4681      	mov	r9, r0
 8006f92:	9b08      	ldr	r3, [sp, #32]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	dd05      	ble.n	8006fa4 <_dtoa_r+0x83c>
 8006f98:	4621      	mov	r1, r4
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	4658      	mov	r0, fp
 8006f9e:	f000 fcb5 	bl	800790c <__lshift>
 8006fa2:	4604      	mov	r4, r0
 8006fa4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d059      	beq.n	800705e <_dtoa_r+0x8f6>
 8006faa:	4621      	mov	r1, r4
 8006fac:	4648      	mov	r0, r9
 8006fae:	f000 fd19 	bl	80079e4 <__mcmp>
 8006fb2:	2800      	cmp	r0, #0
 8006fb4:	da53      	bge.n	800705e <_dtoa_r+0x8f6>
 8006fb6:	1e7b      	subs	r3, r7, #1
 8006fb8:	9304      	str	r3, [sp, #16]
 8006fba:	4649      	mov	r1, r9
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	220a      	movs	r2, #10
 8006fc0:	4658      	mov	r0, fp
 8006fc2:	f000 faf7 	bl	80075b4 <__multadd>
 8006fc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006fc8:	4681      	mov	r9, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	f000 8172 	beq.w	80072b4 <_dtoa_r+0xb4c>
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	4629      	mov	r1, r5
 8006fd4:	220a      	movs	r2, #10
 8006fd6:	4658      	mov	r0, fp
 8006fd8:	f000 faec 	bl	80075b4 <__multadd>
 8006fdc:	9b00      	ldr	r3, [sp, #0]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	4605      	mov	r5, r0
 8006fe2:	dc67      	bgt.n	80070b4 <_dtoa_r+0x94c>
 8006fe4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fe6:	2b02      	cmp	r3, #2
 8006fe8:	dc41      	bgt.n	800706e <_dtoa_r+0x906>
 8006fea:	e063      	b.n	80070b4 <_dtoa_r+0x94c>
 8006fec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006fee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006ff2:	e746      	b.n	8006e82 <_dtoa_r+0x71a>
 8006ff4:	9b07      	ldr	r3, [sp, #28]
 8006ff6:	1e5c      	subs	r4, r3, #1
 8006ff8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ffa:	42a3      	cmp	r3, r4
 8006ffc:	bfbf      	itttt	lt
 8006ffe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007000:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007002:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007004:	1ae3      	sublt	r3, r4, r3
 8007006:	bfb4      	ite	lt
 8007008:	18d2      	addlt	r2, r2, r3
 800700a:	1b1c      	subge	r4, r3, r4
 800700c:	9b07      	ldr	r3, [sp, #28]
 800700e:	bfbc      	itt	lt
 8007010:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007012:	2400      	movlt	r4, #0
 8007014:	2b00      	cmp	r3, #0
 8007016:	bfb5      	itete	lt
 8007018:	eba8 0603 	sublt.w	r6, r8, r3
 800701c:	9b07      	ldrge	r3, [sp, #28]
 800701e:	2300      	movlt	r3, #0
 8007020:	4646      	movge	r6, r8
 8007022:	e730      	b.n	8006e86 <_dtoa_r+0x71e>
 8007024:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007026:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007028:	4646      	mov	r6, r8
 800702a:	e735      	b.n	8006e98 <_dtoa_r+0x730>
 800702c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800702e:	e75c      	b.n	8006eea <_dtoa_r+0x782>
 8007030:	2300      	movs	r3, #0
 8007032:	e788      	b.n	8006f46 <_dtoa_r+0x7de>
 8007034:	3fe00000 	.word	0x3fe00000
 8007038:	40240000 	.word	0x40240000
 800703c:	40140000 	.word	0x40140000
 8007040:	9b02      	ldr	r3, [sp, #8]
 8007042:	e780      	b.n	8006f46 <_dtoa_r+0x7de>
 8007044:	2300      	movs	r3, #0
 8007046:	930a      	str	r3, [sp, #40]	@ 0x28
 8007048:	e782      	b.n	8006f50 <_dtoa_r+0x7e8>
 800704a:	d099      	beq.n	8006f80 <_dtoa_r+0x818>
 800704c:	9a08      	ldr	r2, [sp, #32]
 800704e:	331c      	adds	r3, #28
 8007050:	441a      	add	r2, r3
 8007052:	4498      	add	r8, r3
 8007054:	441e      	add	r6, r3
 8007056:	9208      	str	r2, [sp, #32]
 8007058:	e792      	b.n	8006f80 <_dtoa_r+0x818>
 800705a:	4603      	mov	r3, r0
 800705c:	e7f6      	b.n	800704c <_dtoa_r+0x8e4>
 800705e:	9b07      	ldr	r3, [sp, #28]
 8007060:	9704      	str	r7, [sp, #16]
 8007062:	2b00      	cmp	r3, #0
 8007064:	dc20      	bgt.n	80070a8 <_dtoa_r+0x940>
 8007066:	9300      	str	r3, [sp, #0]
 8007068:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800706a:	2b02      	cmp	r3, #2
 800706c:	dd1e      	ble.n	80070ac <_dtoa_r+0x944>
 800706e:	9b00      	ldr	r3, [sp, #0]
 8007070:	2b00      	cmp	r3, #0
 8007072:	f47f aec0 	bne.w	8006df6 <_dtoa_r+0x68e>
 8007076:	4621      	mov	r1, r4
 8007078:	2205      	movs	r2, #5
 800707a:	4658      	mov	r0, fp
 800707c:	f000 fa9a 	bl	80075b4 <__multadd>
 8007080:	4601      	mov	r1, r0
 8007082:	4604      	mov	r4, r0
 8007084:	4648      	mov	r0, r9
 8007086:	f000 fcad 	bl	80079e4 <__mcmp>
 800708a:	2800      	cmp	r0, #0
 800708c:	f77f aeb3 	ble.w	8006df6 <_dtoa_r+0x68e>
 8007090:	4656      	mov	r6, sl
 8007092:	2331      	movs	r3, #49	@ 0x31
 8007094:	f806 3b01 	strb.w	r3, [r6], #1
 8007098:	9b04      	ldr	r3, [sp, #16]
 800709a:	3301      	adds	r3, #1
 800709c:	9304      	str	r3, [sp, #16]
 800709e:	e6ae      	b.n	8006dfe <_dtoa_r+0x696>
 80070a0:	9c07      	ldr	r4, [sp, #28]
 80070a2:	9704      	str	r7, [sp, #16]
 80070a4:	4625      	mov	r5, r4
 80070a6:	e7f3      	b.n	8007090 <_dtoa_r+0x928>
 80070a8:	9b07      	ldr	r3, [sp, #28]
 80070aa:	9300      	str	r3, [sp, #0]
 80070ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	f000 8104 	beq.w	80072bc <_dtoa_r+0xb54>
 80070b4:	2e00      	cmp	r6, #0
 80070b6:	dd05      	ble.n	80070c4 <_dtoa_r+0x95c>
 80070b8:	4629      	mov	r1, r5
 80070ba:	4632      	mov	r2, r6
 80070bc:	4658      	mov	r0, fp
 80070be:	f000 fc25 	bl	800790c <__lshift>
 80070c2:	4605      	mov	r5, r0
 80070c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d05a      	beq.n	8007180 <_dtoa_r+0xa18>
 80070ca:	6869      	ldr	r1, [r5, #4]
 80070cc:	4658      	mov	r0, fp
 80070ce:	f000 fa0f 	bl	80074f0 <_Balloc>
 80070d2:	4606      	mov	r6, r0
 80070d4:	b928      	cbnz	r0, 80070e2 <_dtoa_r+0x97a>
 80070d6:	4b84      	ldr	r3, [pc, #528]	@ (80072e8 <_dtoa_r+0xb80>)
 80070d8:	4602      	mov	r2, r0
 80070da:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80070de:	f7ff bb5a 	b.w	8006796 <_dtoa_r+0x2e>
 80070e2:	692a      	ldr	r2, [r5, #16]
 80070e4:	3202      	adds	r2, #2
 80070e6:	0092      	lsls	r2, r2, #2
 80070e8:	f105 010c 	add.w	r1, r5, #12
 80070ec:	300c      	adds	r0, #12
 80070ee:	f001 f975 	bl	80083dc <memcpy>
 80070f2:	2201      	movs	r2, #1
 80070f4:	4631      	mov	r1, r6
 80070f6:	4658      	mov	r0, fp
 80070f8:	f000 fc08 	bl	800790c <__lshift>
 80070fc:	f10a 0301 	add.w	r3, sl, #1
 8007100:	9307      	str	r3, [sp, #28]
 8007102:	9b00      	ldr	r3, [sp, #0]
 8007104:	4453      	add	r3, sl
 8007106:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007108:	9b02      	ldr	r3, [sp, #8]
 800710a:	f003 0301 	and.w	r3, r3, #1
 800710e:	462f      	mov	r7, r5
 8007110:	930a      	str	r3, [sp, #40]	@ 0x28
 8007112:	4605      	mov	r5, r0
 8007114:	9b07      	ldr	r3, [sp, #28]
 8007116:	4621      	mov	r1, r4
 8007118:	3b01      	subs	r3, #1
 800711a:	4648      	mov	r0, r9
 800711c:	9300      	str	r3, [sp, #0]
 800711e:	f7ff fa9a 	bl	8006656 <quorem>
 8007122:	4639      	mov	r1, r7
 8007124:	9002      	str	r0, [sp, #8]
 8007126:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800712a:	4648      	mov	r0, r9
 800712c:	f000 fc5a 	bl	80079e4 <__mcmp>
 8007130:	462a      	mov	r2, r5
 8007132:	9008      	str	r0, [sp, #32]
 8007134:	4621      	mov	r1, r4
 8007136:	4658      	mov	r0, fp
 8007138:	f000 fc70 	bl	8007a1c <__mdiff>
 800713c:	68c2      	ldr	r2, [r0, #12]
 800713e:	4606      	mov	r6, r0
 8007140:	bb02      	cbnz	r2, 8007184 <_dtoa_r+0xa1c>
 8007142:	4601      	mov	r1, r0
 8007144:	4648      	mov	r0, r9
 8007146:	f000 fc4d 	bl	80079e4 <__mcmp>
 800714a:	4602      	mov	r2, r0
 800714c:	4631      	mov	r1, r6
 800714e:	4658      	mov	r0, fp
 8007150:	920e      	str	r2, [sp, #56]	@ 0x38
 8007152:	f000 fa0d 	bl	8007570 <_Bfree>
 8007156:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007158:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800715a:	9e07      	ldr	r6, [sp, #28]
 800715c:	ea43 0102 	orr.w	r1, r3, r2
 8007160:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007162:	4319      	orrs	r1, r3
 8007164:	d110      	bne.n	8007188 <_dtoa_r+0xa20>
 8007166:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800716a:	d029      	beq.n	80071c0 <_dtoa_r+0xa58>
 800716c:	9b08      	ldr	r3, [sp, #32]
 800716e:	2b00      	cmp	r3, #0
 8007170:	dd02      	ble.n	8007178 <_dtoa_r+0xa10>
 8007172:	9b02      	ldr	r3, [sp, #8]
 8007174:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007178:	9b00      	ldr	r3, [sp, #0]
 800717a:	f883 8000 	strb.w	r8, [r3]
 800717e:	e63f      	b.n	8006e00 <_dtoa_r+0x698>
 8007180:	4628      	mov	r0, r5
 8007182:	e7bb      	b.n	80070fc <_dtoa_r+0x994>
 8007184:	2201      	movs	r2, #1
 8007186:	e7e1      	b.n	800714c <_dtoa_r+0x9e4>
 8007188:	9b08      	ldr	r3, [sp, #32]
 800718a:	2b00      	cmp	r3, #0
 800718c:	db04      	blt.n	8007198 <_dtoa_r+0xa30>
 800718e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007190:	430b      	orrs	r3, r1
 8007192:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007194:	430b      	orrs	r3, r1
 8007196:	d120      	bne.n	80071da <_dtoa_r+0xa72>
 8007198:	2a00      	cmp	r2, #0
 800719a:	dded      	ble.n	8007178 <_dtoa_r+0xa10>
 800719c:	4649      	mov	r1, r9
 800719e:	2201      	movs	r2, #1
 80071a0:	4658      	mov	r0, fp
 80071a2:	f000 fbb3 	bl	800790c <__lshift>
 80071a6:	4621      	mov	r1, r4
 80071a8:	4681      	mov	r9, r0
 80071aa:	f000 fc1b 	bl	80079e4 <__mcmp>
 80071ae:	2800      	cmp	r0, #0
 80071b0:	dc03      	bgt.n	80071ba <_dtoa_r+0xa52>
 80071b2:	d1e1      	bne.n	8007178 <_dtoa_r+0xa10>
 80071b4:	f018 0f01 	tst.w	r8, #1
 80071b8:	d0de      	beq.n	8007178 <_dtoa_r+0xa10>
 80071ba:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80071be:	d1d8      	bne.n	8007172 <_dtoa_r+0xa0a>
 80071c0:	9a00      	ldr	r2, [sp, #0]
 80071c2:	2339      	movs	r3, #57	@ 0x39
 80071c4:	7013      	strb	r3, [r2, #0]
 80071c6:	4633      	mov	r3, r6
 80071c8:	461e      	mov	r6, r3
 80071ca:	3b01      	subs	r3, #1
 80071cc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80071d0:	2a39      	cmp	r2, #57	@ 0x39
 80071d2:	d052      	beq.n	800727a <_dtoa_r+0xb12>
 80071d4:	3201      	adds	r2, #1
 80071d6:	701a      	strb	r2, [r3, #0]
 80071d8:	e612      	b.n	8006e00 <_dtoa_r+0x698>
 80071da:	2a00      	cmp	r2, #0
 80071dc:	dd07      	ble.n	80071ee <_dtoa_r+0xa86>
 80071de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80071e2:	d0ed      	beq.n	80071c0 <_dtoa_r+0xa58>
 80071e4:	9a00      	ldr	r2, [sp, #0]
 80071e6:	f108 0301 	add.w	r3, r8, #1
 80071ea:	7013      	strb	r3, [r2, #0]
 80071ec:	e608      	b.n	8006e00 <_dtoa_r+0x698>
 80071ee:	9b07      	ldr	r3, [sp, #28]
 80071f0:	9a07      	ldr	r2, [sp, #28]
 80071f2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80071f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d028      	beq.n	800724e <_dtoa_r+0xae6>
 80071fc:	4649      	mov	r1, r9
 80071fe:	2300      	movs	r3, #0
 8007200:	220a      	movs	r2, #10
 8007202:	4658      	mov	r0, fp
 8007204:	f000 f9d6 	bl	80075b4 <__multadd>
 8007208:	42af      	cmp	r7, r5
 800720a:	4681      	mov	r9, r0
 800720c:	f04f 0300 	mov.w	r3, #0
 8007210:	f04f 020a 	mov.w	r2, #10
 8007214:	4639      	mov	r1, r7
 8007216:	4658      	mov	r0, fp
 8007218:	d107      	bne.n	800722a <_dtoa_r+0xac2>
 800721a:	f000 f9cb 	bl	80075b4 <__multadd>
 800721e:	4607      	mov	r7, r0
 8007220:	4605      	mov	r5, r0
 8007222:	9b07      	ldr	r3, [sp, #28]
 8007224:	3301      	adds	r3, #1
 8007226:	9307      	str	r3, [sp, #28]
 8007228:	e774      	b.n	8007114 <_dtoa_r+0x9ac>
 800722a:	f000 f9c3 	bl	80075b4 <__multadd>
 800722e:	4629      	mov	r1, r5
 8007230:	4607      	mov	r7, r0
 8007232:	2300      	movs	r3, #0
 8007234:	220a      	movs	r2, #10
 8007236:	4658      	mov	r0, fp
 8007238:	f000 f9bc 	bl	80075b4 <__multadd>
 800723c:	4605      	mov	r5, r0
 800723e:	e7f0      	b.n	8007222 <_dtoa_r+0xaba>
 8007240:	9b00      	ldr	r3, [sp, #0]
 8007242:	2b00      	cmp	r3, #0
 8007244:	bfcc      	ite	gt
 8007246:	461e      	movgt	r6, r3
 8007248:	2601      	movle	r6, #1
 800724a:	4456      	add	r6, sl
 800724c:	2700      	movs	r7, #0
 800724e:	4649      	mov	r1, r9
 8007250:	2201      	movs	r2, #1
 8007252:	4658      	mov	r0, fp
 8007254:	f000 fb5a 	bl	800790c <__lshift>
 8007258:	4621      	mov	r1, r4
 800725a:	4681      	mov	r9, r0
 800725c:	f000 fbc2 	bl	80079e4 <__mcmp>
 8007260:	2800      	cmp	r0, #0
 8007262:	dcb0      	bgt.n	80071c6 <_dtoa_r+0xa5e>
 8007264:	d102      	bne.n	800726c <_dtoa_r+0xb04>
 8007266:	f018 0f01 	tst.w	r8, #1
 800726a:	d1ac      	bne.n	80071c6 <_dtoa_r+0xa5e>
 800726c:	4633      	mov	r3, r6
 800726e:	461e      	mov	r6, r3
 8007270:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007274:	2a30      	cmp	r2, #48	@ 0x30
 8007276:	d0fa      	beq.n	800726e <_dtoa_r+0xb06>
 8007278:	e5c2      	b.n	8006e00 <_dtoa_r+0x698>
 800727a:	459a      	cmp	sl, r3
 800727c:	d1a4      	bne.n	80071c8 <_dtoa_r+0xa60>
 800727e:	9b04      	ldr	r3, [sp, #16]
 8007280:	3301      	adds	r3, #1
 8007282:	9304      	str	r3, [sp, #16]
 8007284:	2331      	movs	r3, #49	@ 0x31
 8007286:	f88a 3000 	strb.w	r3, [sl]
 800728a:	e5b9      	b.n	8006e00 <_dtoa_r+0x698>
 800728c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800728e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80072ec <_dtoa_r+0xb84>
 8007292:	b11b      	cbz	r3, 800729c <_dtoa_r+0xb34>
 8007294:	f10a 0308 	add.w	r3, sl, #8
 8007298:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800729a:	6013      	str	r3, [r2, #0]
 800729c:	4650      	mov	r0, sl
 800729e:	b019      	add	sp, #100	@ 0x64
 80072a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	f77f ae37 	ble.w	8006f1a <_dtoa_r+0x7b2>
 80072ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80072ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80072b0:	2001      	movs	r0, #1
 80072b2:	e655      	b.n	8006f60 <_dtoa_r+0x7f8>
 80072b4:	9b00      	ldr	r3, [sp, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	f77f aed6 	ble.w	8007068 <_dtoa_r+0x900>
 80072bc:	4656      	mov	r6, sl
 80072be:	4621      	mov	r1, r4
 80072c0:	4648      	mov	r0, r9
 80072c2:	f7ff f9c8 	bl	8006656 <quorem>
 80072c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80072ca:	f806 8b01 	strb.w	r8, [r6], #1
 80072ce:	9b00      	ldr	r3, [sp, #0]
 80072d0:	eba6 020a 	sub.w	r2, r6, sl
 80072d4:	4293      	cmp	r3, r2
 80072d6:	ddb3      	ble.n	8007240 <_dtoa_r+0xad8>
 80072d8:	4649      	mov	r1, r9
 80072da:	2300      	movs	r3, #0
 80072dc:	220a      	movs	r2, #10
 80072de:	4658      	mov	r0, fp
 80072e0:	f000 f968 	bl	80075b4 <__multadd>
 80072e4:	4681      	mov	r9, r0
 80072e6:	e7ea      	b.n	80072be <_dtoa_r+0xb56>
 80072e8:	08008844 	.word	0x08008844
 80072ec:	080087c8 	.word	0x080087c8

080072f0 <_free_r>:
 80072f0:	b538      	push	{r3, r4, r5, lr}
 80072f2:	4605      	mov	r5, r0
 80072f4:	2900      	cmp	r1, #0
 80072f6:	d041      	beq.n	800737c <_free_r+0x8c>
 80072f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072fc:	1f0c      	subs	r4, r1, #4
 80072fe:	2b00      	cmp	r3, #0
 8007300:	bfb8      	it	lt
 8007302:	18e4      	addlt	r4, r4, r3
 8007304:	f000 f8e8 	bl	80074d8 <__malloc_lock>
 8007308:	4a1d      	ldr	r2, [pc, #116]	@ (8007380 <_free_r+0x90>)
 800730a:	6813      	ldr	r3, [r2, #0]
 800730c:	b933      	cbnz	r3, 800731c <_free_r+0x2c>
 800730e:	6063      	str	r3, [r4, #4]
 8007310:	6014      	str	r4, [r2, #0]
 8007312:	4628      	mov	r0, r5
 8007314:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007318:	f000 b8e4 	b.w	80074e4 <__malloc_unlock>
 800731c:	42a3      	cmp	r3, r4
 800731e:	d908      	bls.n	8007332 <_free_r+0x42>
 8007320:	6820      	ldr	r0, [r4, #0]
 8007322:	1821      	adds	r1, r4, r0
 8007324:	428b      	cmp	r3, r1
 8007326:	bf01      	itttt	eq
 8007328:	6819      	ldreq	r1, [r3, #0]
 800732a:	685b      	ldreq	r3, [r3, #4]
 800732c:	1809      	addeq	r1, r1, r0
 800732e:	6021      	streq	r1, [r4, #0]
 8007330:	e7ed      	b.n	800730e <_free_r+0x1e>
 8007332:	461a      	mov	r2, r3
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	b10b      	cbz	r3, 800733c <_free_r+0x4c>
 8007338:	42a3      	cmp	r3, r4
 800733a:	d9fa      	bls.n	8007332 <_free_r+0x42>
 800733c:	6811      	ldr	r1, [r2, #0]
 800733e:	1850      	adds	r0, r2, r1
 8007340:	42a0      	cmp	r0, r4
 8007342:	d10b      	bne.n	800735c <_free_r+0x6c>
 8007344:	6820      	ldr	r0, [r4, #0]
 8007346:	4401      	add	r1, r0
 8007348:	1850      	adds	r0, r2, r1
 800734a:	4283      	cmp	r3, r0
 800734c:	6011      	str	r1, [r2, #0]
 800734e:	d1e0      	bne.n	8007312 <_free_r+0x22>
 8007350:	6818      	ldr	r0, [r3, #0]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	6053      	str	r3, [r2, #4]
 8007356:	4408      	add	r0, r1
 8007358:	6010      	str	r0, [r2, #0]
 800735a:	e7da      	b.n	8007312 <_free_r+0x22>
 800735c:	d902      	bls.n	8007364 <_free_r+0x74>
 800735e:	230c      	movs	r3, #12
 8007360:	602b      	str	r3, [r5, #0]
 8007362:	e7d6      	b.n	8007312 <_free_r+0x22>
 8007364:	6820      	ldr	r0, [r4, #0]
 8007366:	1821      	adds	r1, r4, r0
 8007368:	428b      	cmp	r3, r1
 800736a:	bf04      	itt	eq
 800736c:	6819      	ldreq	r1, [r3, #0]
 800736e:	685b      	ldreq	r3, [r3, #4]
 8007370:	6063      	str	r3, [r4, #4]
 8007372:	bf04      	itt	eq
 8007374:	1809      	addeq	r1, r1, r0
 8007376:	6021      	streq	r1, [r4, #0]
 8007378:	6054      	str	r4, [r2, #4]
 800737a:	e7ca      	b.n	8007312 <_free_r+0x22>
 800737c:	bd38      	pop	{r3, r4, r5, pc}
 800737e:	bf00      	nop
 8007380:	200004b0 	.word	0x200004b0

08007384 <malloc>:
 8007384:	4b02      	ldr	r3, [pc, #8]	@ (8007390 <malloc+0xc>)
 8007386:	4601      	mov	r1, r0
 8007388:	6818      	ldr	r0, [r3, #0]
 800738a:	f000 b825 	b.w	80073d8 <_malloc_r>
 800738e:	bf00      	nop
 8007390:	2000001c 	.word	0x2000001c

08007394 <sbrk_aligned>:
 8007394:	b570      	push	{r4, r5, r6, lr}
 8007396:	4e0f      	ldr	r6, [pc, #60]	@ (80073d4 <sbrk_aligned+0x40>)
 8007398:	460c      	mov	r4, r1
 800739a:	6831      	ldr	r1, [r6, #0]
 800739c:	4605      	mov	r5, r0
 800739e:	b911      	cbnz	r1, 80073a6 <sbrk_aligned+0x12>
 80073a0:	f001 f80c 	bl	80083bc <_sbrk_r>
 80073a4:	6030      	str	r0, [r6, #0]
 80073a6:	4621      	mov	r1, r4
 80073a8:	4628      	mov	r0, r5
 80073aa:	f001 f807 	bl	80083bc <_sbrk_r>
 80073ae:	1c43      	adds	r3, r0, #1
 80073b0:	d103      	bne.n	80073ba <sbrk_aligned+0x26>
 80073b2:	f04f 34ff 	mov.w	r4, #4294967295
 80073b6:	4620      	mov	r0, r4
 80073b8:	bd70      	pop	{r4, r5, r6, pc}
 80073ba:	1cc4      	adds	r4, r0, #3
 80073bc:	f024 0403 	bic.w	r4, r4, #3
 80073c0:	42a0      	cmp	r0, r4
 80073c2:	d0f8      	beq.n	80073b6 <sbrk_aligned+0x22>
 80073c4:	1a21      	subs	r1, r4, r0
 80073c6:	4628      	mov	r0, r5
 80073c8:	f000 fff8 	bl	80083bc <_sbrk_r>
 80073cc:	3001      	adds	r0, #1
 80073ce:	d1f2      	bne.n	80073b6 <sbrk_aligned+0x22>
 80073d0:	e7ef      	b.n	80073b2 <sbrk_aligned+0x1e>
 80073d2:	bf00      	nop
 80073d4:	200004ac 	.word	0x200004ac

080073d8 <_malloc_r>:
 80073d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073dc:	1ccd      	adds	r5, r1, #3
 80073de:	f025 0503 	bic.w	r5, r5, #3
 80073e2:	3508      	adds	r5, #8
 80073e4:	2d0c      	cmp	r5, #12
 80073e6:	bf38      	it	cc
 80073e8:	250c      	movcc	r5, #12
 80073ea:	2d00      	cmp	r5, #0
 80073ec:	4606      	mov	r6, r0
 80073ee:	db01      	blt.n	80073f4 <_malloc_r+0x1c>
 80073f0:	42a9      	cmp	r1, r5
 80073f2:	d904      	bls.n	80073fe <_malloc_r+0x26>
 80073f4:	230c      	movs	r3, #12
 80073f6:	6033      	str	r3, [r6, #0]
 80073f8:	2000      	movs	r0, #0
 80073fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80074d4 <_malloc_r+0xfc>
 8007402:	f000 f869 	bl	80074d8 <__malloc_lock>
 8007406:	f8d8 3000 	ldr.w	r3, [r8]
 800740a:	461c      	mov	r4, r3
 800740c:	bb44      	cbnz	r4, 8007460 <_malloc_r+0x88>
 800740e:	4629      	mov	r1, r5
 8007410:	4630      	mov	r0, r6
 8007412:	f7ff ffbf 	bl	8007394 <sbrk_aligned>
 8007416:	1c43      	adds	r3, r0, #1
 8007418:	4604      	mov	r4, r0
 800741a:	d158      	bne.n	80074ce <_malloc_r+0xf6>
 800741c:	f8d8 4000 	ldr.w	r4, [r8]
 8007420:	4627      	mov	r7, r4
 8007422:	2f00      	cmp	r7, #0
 8007424:	d143      	bne.n	80074ae <_malloc_r+0xd6>
 8007426:	2c00      	cmp	r4, #0
 8007428:	d04b      	beq.n	80074c2 <_malloc_r+0xea>
 800742a:	6823      	ldr	r3, [r4, #0]
 800742c:	4639      	mov	r1, r7
 800742e:	4630      	mov	r0, r6
 8007430:	eb04 0903 	add.w	r9, r4, r3
 8007434:	f000 ffc2 	bl	80083bc <_sbrk_r>
 8007438:	4581      	cmp	r9, r0
 800743a:	d142      	bne.n	80074c2 <_malloc_r+0xea>
 800743c:	6821      	ldr	r1, [r4, #0]
 800743e:	1a6d      	subs	r5, r5, r1
 8007440:	4629      	mov	r1, r5
 8007442:	4630      	mov	r0, r6
 8007444:	f7ff ffa6 	bl	8007394 <sbrk_aligned>
 8007448:	3001      	adds	r0, #1
 800744a:	d03a      	beq.n	80074c2 <_malloc_r+0xea>
 800744c:	6823      	ldr	r3, [r4, #0]
 800744e:	442b      	add	r3, r5
 8007450:	6023      	str	r3, [r4, #0]
 8007452:	f8d8 3000 	ldr.w	r3, [r8]
 8007456:	685a      	ldr	r2, [r3, #4]
 8007458:	bb62      	cbnz	r2, 80074b4 <_malloc_r+0xdc>
 800745a:	f8c8 7000 	str.w	r7, [r8]
 800745e:	e00f      	b.n	8007480 <_malloc_r+0xa8>
 8007460:	6822      	ldr	r2, [r4, #0]
 8007462:	1b52      	subs	r2, r2, r5
 8007464:	d420      	bmi.n	80074a8 <_malloc_r+0xd0>
 8007466:	2a0b      	cmp	r2, #11
 8007468:	d917      	bls.n	800749a <_malloc_r+0xc2>
 800746a:	1961      	adds	r1, r4, r5
 800746c:	42a3      	cmp	r3, r4
 800746e:	6025      	str	r5, [r4, #0]
 8007470:	bf18      	it	ne
 8007472:	6059      	strne	r1, [r3, #4]
 8007474:	6863      	ldr	r3, [r4, #4]
 8007476:	bf08      	it	eq
 8007478:	f8c8 1000 	streq.w	r1, [r8]
 800747c:	5162      	str	r2, [r4, r5]
 800747e:	604b      	str	r3, [r1, #4]
 8007480:	4630      	mov	r0, r6
 8007482:	f000 f82f 	bl	80074e4 <__malloc_unlock>
 8007486:	f104 000b 	add.w	r0, r4, #11
 800748a:	1d23      	adds	r3, r4, #4
 800748c:	f020 0007 	bic.w	r0, r0, #7
 8007490:	1ac2      	subs	r2, r0, r3
 8007492:	bf1c      	itt	ne
 8007494:	1a1b      	subne	r3, r3, r0
 8007496:	50a3      	strne	r3, [r4, r2]
 8007498:	e7af      	b.n	80073fa <_malloc_r+0x22>
 800749a:	6862      	ldr	r2, [r4, #4]
 800749c:	42a3      	cmp	r3, r4
 800749e:	bf0c      	ite	eq
 80074a0:	f8c8 2000 	streq.w	r2, [r8]
 80074a4:	605a      	strne	r2, [r3, #4]
 80074a6:	e7eb      	b.n	8007480 <_malloc_r+0xa8>
 80074a8:	4623      	mov	r3, r4
 80074aa:	6864      	ldr	r4, [r4, #4]
 80074ac:	e7ae      	b.n	800740c <_malloc_r+0x34>
 80074ae:	463c      	mov	r4, r7
 80074b0:	687f      	ldr	r7, [r7, #4]
 80074b2:	e7b6      	b.n	8007422 <_malloc_r+0x4a>
 80074b4:	461a      	mov	r2, r3
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	42a3      	cmp	r3, r4
 80074ba:	d1fb      	bne.n	80074b4 <_malloc_r+0xdc>
 80074bc:	2300      	movs	r3, #0
 80074be:	6053      	str	r3, [r2, #4]
 80074c0:	e7de      	b.n	8007480 <_malloc_r+0xa8>
 80074c2:	230c      	movs	r3, #12
 80074c4:	6033      	str	r3, [r6, #0]
 80074c6:	4630      	mov	r0, r6
 80074c8:	f000 f80c 	bl	80074e4 <__malloc_unlock>
 80074cc:	e794      	b.n	80073f8 <_malloc_r+0x20>
 80074ce:	6005      	str	r5, [r0, #0]
 80074d0:	e7d6      	b.n	8007480 <_malloc_r+0xa8>
 80074d2:	bf00      	nop
 80074d4:	200004b0 	.word	0x200004b0

080074d8 <__malloc_lock>:
 80074d8:	4801      	ldr	r0, [pc, #4]	@ (80074e0 <__malloc_lock+0x8>)
 80074da:	f7ff b8ba 	b.w	8006652 <__retarget_lock_acquire_recursive>
 80074de:	bf00      	nop
 80074e0:	200004a8 	.word	0x200004a8

080074e4 <__malloc_unlock>:
 80074e4:	4801      	ldr	r0, [pc, #4]	@ (80074ec <__malloc_unlock+0x8>)
 80074e6:	f7ff b8b5 	b.w	8006654 <__retarget_lock_release_recursive>
 80074ea:	bf00      	nop
 80074ec:	200004a8 	.word	0x200004a8

080074f0 <_Balloc>:
 80074f0:	b570      	push	{r4, r5, r6, lr}
 80074f2:	69c6      	ldr	r6, [r0, #28]
 80074f4:	4604      	mov	r4, r0
 80074f6:	460d      	mov	r5, r1
 80074f8:	b976      	cbnz	r6, 8007518 <_Balloc+0x28>
 80074fa:	2010      	movs	r0, #16
 80074fc:	f7ff ff42 	bl	8007384 <malloc>
 8007500:	4602      	mov	r2, r0
 8007502:	61e0      	str	r0, [r4, #28]
 8007504:	b920      	cbnz	r0, 8007510 <_Balloc+0x20>
 8007506:	4b18      	ldr	r3, [pc, #96]	@ (8007568 <_Balloc+0x78>)
 8007508:	4818      	ldr	r0, [pc, #96]	@ (800756c <_Balloc+0x7c>)
 800750a:	216b      	movs	r1, #107	@ 0x6b
 800750c:	f000 ff74 	bl	80083f8 <__assert_func>
 8007510:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007514:	6006      	str	r6, [r0, #0]
 8007516:	60c6      	str	r6, [r0, #12]
 8007518:	69e6      	ldr	r6, [r4, #28]
 800751a:	68f3      	ldr	r3, [r6, #12]
 800751c:	b183      	cbz	r3, 8007540 <_Balloc+0x50>
 800751e:	69e3      	ldr	r3, [r4, #28]
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007526:	b9b8      	cbnz	r0, 8007558 <_Balloc+0x68>
 8007528:	2101      	movs	r1, #1
 800752a:	fa01 f605 	lsl.w	r6, r1, r5
 800752e:	1d72      	adds	r2, r6, #5
 8007530:	0092      	lsls	r2, r2, #2
 8007532:	4620      	mov	r0, r4
 8007534:	f000 ff7e 	bl	8008434 <_calloc_r>
 8007538:	b160      	cbz	r0, 8007554 <_Balloc+0x64>
 800753a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800753e:	e00e      	b.n	800755e <_Balloc+0x6e>
 8007540:	2221      	movs	r2, #33	@ 0x21
 8007542:	2104      	movs	r1, #4
 8007544:	4620      	mov	r0, r4
 8007546:	f000 ff75 	bl	8008434 <_calloc_r>
 800754a:	69e3      	ldr	r3, [r4, #28]
 800754c:	60f0      	str	r0, [r6, #12]
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d1e4      	bne.n	800751e <_Balloc+0x2e>
 8007554:	2000      	movs	r0, #0
 8007556:	bd70      	pop	{r4, r5, r6, pc}
 8007558:	6802      	ldr	r2, [r0, #0]
 800755a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800755e:	2300      	movs	r3, #0
 8007560:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007564:	e7f7      	b.n	8007556 <_Balloc+0x66>
 8007566:	bf00      	nop
 8007568:	080087d5 	.word	0x080087d5
 800756c:	08008855 	.word	0x08008855

08007570 <_Bfree>:
 8007570:	b570      	push	{r4, r5, r6, lr}
 8007572:	69c6      	ldr	r6, [r0, #28]
 8007574:	4605      	mov	r5, r0
 8007576:	460c      	mov	r4, r1
 8007578:	b976      	cbnz	r6, 8007598 <_Bfree+0x28>
 800757a:	2010      	movs	r0, #16
 800757c:	f7ff ff02 	bl	8007384 <malloc>
 8007580:	4602      	mov	r2, r0
 8007582:	61e8      	str	r0, [r5, #28]
 8007584:	b920      	cbnz	r0, 8007590 <_Bfree+0x20>
 8007586:	4b09      	ldr	r3, [pc, #36]	@ (80075ac <_Bfree+0x3c>)
 8007588:	4809      	ldr	r0, [pc, #36]	@ (80075b0 <_Bfree+0x40>)
 800758a:	218f      	movs	r1, #143	@ 0x8f
 800758c:	f000 ff34 	bl	80083f8 <__assert_func>
 8007590:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007594:	6006      	str	r6, [r0, #0]
 8007596:	60c6      	str	r6, [r0, #12]
 8007598:	b13c      	cbz	r4, 80075aa <_Bfree+0x3a>
 800759a:	69eb      	ldr	r3, [r5, #28]
 800759c:	6862      	ldr	r2, [r4, #4]
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80075a4:	6021      	str	r1, [r4, #0]
 80075a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80075aa:	bd70      	pop	{r4, r5, r6, pc}
 80075ac:	080087d5 	.word	0x080087d5
 80075b0:	08008855 	.word	0x08008855

080075b4 <__multadd>:
 80075b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075b8:	690d      	ldr	r5, [r1, #16]
 80075ba:	4607      	mov	r7, r0
 80075bc:	460c      	mov	r4, r1
 80075be:	461e      	mov	r6, r3
 80075c0:	f101 0c14 	add.w	ip, r1, #20
 80075c4:	2000      	movs	r0, #0
 80075c6:	f8dc 3000 	ldr.w	r3, [ip]
 80075ca:	b299      	uxth	r1, r3
 80075cc:	fb02 6101 	mla	r1, r2, r1, r6
 80075d0:	0c1e      	lsrs	r6, r3, #16
 80075d2:	0c0b      	lsrs	r3, r1, #16
 80075d4:	fb02 3306 	mla	r3, r2, r6, r3
 80075d8:	b289      	uxth	r1, r1
 80075da:	3001      	adds	r0, #1
 80075dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80075e0:	4285      	cmp	r5, r0
 80075e2:	f84c 1b04 	str.w	r1, [ip], #4
 80075e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80075ea:	dcec      	bgt.n	80075c6 <__multadd+0x12>
 80075ec:	b30e      	cbz	r6, 8007632 <__multadd+0x7e>
 80075ee:	68a3      	ldr	r3, [r4, #8]
 80075f0:	42ab      	cmp	r3, r5
 80075f2:	dc19      	bgt.n	8007628 <__multadd+0x74>
 80075f4:	6861      	ldr	r1, [r4, #4]
 80075f6:	4638      	mov	r0, r7
 80075f8:	3101      	adds	r1, #1
 80075fa:	f7ff ff79 	bl	80074f0 <_Balloc>
 80075fe:	4680      	mov	r8, r0
 8007600:	b928      	cbnz	r0, 800760e <__multadd+0x5a>
 8007602:	4602      	mov	r2, r0
 8007604:	4b0c      	ldr	r3, [pc, #48]	@ (8007638 <__multadd+0x84>)
 8007606:	480d      	ldr	r0, [pc, #52]	@ (800763c <__multadd+0x88>)
 8007608:	21ba      	movs	r1, #186	@ 0xba
 800760a:	f000 fef5 	bl	80083f8 <__assert_func>
 800760e:	6922      	ldr	r2, [r4, #16]
 8007610:	3202      	adds	r2, #2
 8007612:	f104 010c 	add.w	r1, r4, #12
 8007616:	0092      	lsls	r2, r2, #2
 8007618:	300c      	adds	r0, #12
 800761a:	f000 fedf 	bl	80083dc <memcpy>
 800761e:	4621      	mov	r1, r4
 8007620:	4638      	mov	r0, r7
 8007622:	f7ff ffa5 	bl	8007570 <_Bfree>
 8007626:	4644      	mov	r4, r8
 8007628:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800762c:	3501      	adds	r5, #1
 800762e:	615e      	str	r6, [r3, #20]
 8007630:	6125      	str	r5, [r4, #16]
 8007632:	4620      	mov	r0, r4
 8007634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007638:	08008844 	.word	0x08008844
 800763c:	08008855 	.word	0x08008855

08007640 <__hi0bits>:
 8007640:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007644:	4603      	mov	r3, r0
 8007646:	bf36      	itet	cc
 8007648:	0403      	lslcc	r3, r0, #16
 800764a:	2000      	movcs	r0, #0
 800764c:	2010      	movcc	r0, #16
 800764e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007652:	bf3c      	itt	cc
 8007654:	021b      	lslcc	r3, r3, #8
 8007656:	3008      	addcc	r0, #8
 8007658:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800765c:	bf3c      	itt	cc
 800765e:	011b      	lslcc	r3, r3, #4
 8007660:	3004      	addcc	r0, #4
 8007662:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007666:	bf3c      	itt	cc
 8007668:	009b      	lslcc	r3, r3, #2
 800766a:	3002      	addcc	r0, #2
 800766c:	2b00      	cmp	r3, #0
 800766e:	db05      	blt.n	800767c <__hi0bits+0x3c>
 8007670:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007674:	f100 0001 	add.w	r0, r0, #1
 8007678:	bf08      	it	eq
 800767a:	2020      	moveq	r0, #32
 800767c:	4770      	bx	lr

0800767e <__lo0bits>:
 800767e:	6803      	ldr	r3, [r0, #0]
 8007680:	4602      	mov	r2, r0
 8007682:	f013 0007 	ands.w	r0, r3, #7
 8007686:	d00b      	beq.n	80076a0 <__lo0bits+0x22>
 8007688:	07d9      	lsls	r1, r3, #31
 800768a:	d421      	bmi.n	80076d0 <__lo0bits+0x52>
 800768c:	0798      	lsls	r0, r3, #30
 800768e:	bf49      	itett	mi
 8007690:	085b      	lsrmi	r3, r3, #1
 8007692:	089b      	lsrpl	r3, r3, #2
 8007694:	2001      	movmi	r0, #1
 8007696:	6013      	strmi	r3, [r2, #0]
 8007698:	bf5c      	itt	pl
 800769a:	6013      	strpl	r3, [r2, #0]
 800769c:	2002      	movpl	r0, #2
 800769e:	4770      	bx	lr
 80076a0:	b299      	uxth	r1, r3
 80076a2:	b909      	cbnz	r1, 80076a8 <__lo0bits+0x2a>
 80076a4:	0c1b      	lsrs	r3, r3, #16
 80076a6:	2010      	movs	r0, #16
 80076a8:	b2d9      	uxtb	r1, r3
 80076aa:	b909      	cbnz	r1, 80076b0 <__lo0bits+0x32>
 80076ac:	3008      	adds	r0, #8
 80076ae:	0a1b      	lsrs	r3, r3, #8
 80076b0:	0719      	lsls	r1, r3, #28
 80076b2:	bf04      	itt	eq
 80076b4:	091b      	lsreq	r3, r3, #4
 80076b6:	3004      	addeq	r0, #4
 80076b8:	0799      	lsls	r1, r3, #30
 80076ba:	bf04      	itt	eq
 80076bc:	089b      	lsreq	r3, r3, #2
 80076be:	3002      	addeq	r0, #2
 80076c0:	07d9      	lsls	r1, r3, #31
 80076c2:	d403      	bmi.n	80076cc <__lo0bits+0x4e>
 80076c4:	085b      	lsrs	r3, r3, #1
 80076c6:	f100 0001 	add.w	r0, r0, #1
 80076ca:	d003      	beq.n	80076d4 <__lo0bits+0x56>
 80076cc:	6013      	str	r3, [r2, #0]
 80076ce:	4770      	bx	lr
 80076d0:	2000      	movs	r0, #0
 80076d2:	4770      	bx	lr
 80076d4:	2020      	movs	r0, #32
 80076d6:	4770      	bx	lr

080076d8 <__i2b>:
 80076d8:	b510      	push	{r4, lr}
 80076da:	460c      	mov	r4, r1
 80076dc:	2101      	movs	r1, #1
 80076de:	f7ff ff07 	bl	80074f0 <_Balloc>
 80076e2:	4602      	mov	r2, r0
 80076e4:	b928      	cbnz	r0, 80076f2 <__i2b+0x1a>
 80076e6:	4b05      	ldr	r3, [pc, #20]	@ (80076fc <__i2b+0x24>)
 80076e8:	4805      	ldr	r0, [pc, #20]	@ (8007700 <__i2b+0x28>)
 80076ea:	f240 1145 	movw	r1, #325	@ 0x145
 80076ee:	f000 fe83 	bl	80083f8 <__assert_func>
 80076f2:	2301      	movs	r3, #1
 80076f4:	6144      	str	r4, [r0, #20]
 80076f6:	6103      	str	r3, [r0, #16]
 80076f8:	bd10      	pop	{r4, pc}
 80076fa:	bf00      	nop
 80076fc:	08008844 	.word	0x08008844
 8007700:	08008855 	.word	0x08008855

08007704 <__multiply>:
 8007704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007708:	4614      	mov	r4, r2
 800770a:	690a      	ldr	r2, [r1, #16]
 800770c:	6923      	ldr	r3, [r4, #16]
 800770e:	429a      	cmp	r2, r3
 8007710:	bfa8      	it	ge
 8007712:	4623      	movge	r3, r4
 8007714:	460f      	mov	r7, r1
 8007716:	bfa4      	itt	ge
 8007718:	460c      	movge	r4, r1
 800771a:	461f      	movge	r7, r3
 800771c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007720:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007724:	68a3      	ldr	r3, [r4, #8]
 8007726:	6861      	ldr	r1, [r4, #4]
 8007728:	eb0a 0609 	add.w	r6, sl, r9
 800772c:	42b3      	cmp	r3, r6
 800772e:	b085      	sub	sp, #20
 8007730:	bfb8      	it	lt
 8007732:	3101      	addlt	r1, #1
 8007734:	f7ff fedc 	bl	80074f0 <_Balloc>
 8007738:	b930      	cbnz	r0, 8007748 <__multiply+0x44>
 800773a:	4602      	mov	r2, r0
 800773c:	4b44      	ldr	r3, [pc, #272]	@ (8007850 <__multiply+0x14c>)
 800773e:	4845      	ldr	r0, [pc, #276]	@ (8007854 <__multiply+0x150>)
 8007740:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007744:	f000 fe58 	bl	80083f8 <__assert_func>
 8007748:	f100 0514 	add.w	r5, r0, #20
 800774c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007750:	462b      	mov	r3, r5
 8007752:	2200      	movs	r2, #0
 8007754:	4543      	cmp	r3, r8
 8007756:	d321      	bcc.n	800779c <__multiply+0x98>
 8007758:	f107 0114 	add.w	r1, r7, #20
 800775c:	f104 0214 	add.w	r2, r4, #20
 8007760:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007764:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007768:	9302      	str	r3, [sp, #8]
 800776a:	1b13      	subs	r3, r2, r4
 800776c:	3b15      	subs	r3, #21
 800776e:	f023 0303 	bic.w	r3, r3, #3
 8007772:	3304      	adds	r3, #4
 8007774:	f104 0715 	add.w	r7, r4, #21
 8007778:	42ba      	cmp	r2, r7
 800777a:	bf38      	it	cc
 800777c:	2304      	movcc	r3, #4
 800777e:	9301      	str	r3, [sp, #4]
 8007780:	9b02      	ldr	r3, [sp, #8]
 8007782:	9103      	str	r1, [sp, #12]
 8007784:	428b      	cmp	r3, r1
 8007786:	d80c      	bhi.n	80077a2 <__multiply+0x9e>
 8007788:	2e00      	cmp	r6, #0
 800778a:	dd03      	ble.n	8007794 <__multiply+0x90>
 800778c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007790:	2b00      	cmp	r3, #0
 8007792:	d05b      	beq.n	800784c <__multiply+0x148>
 8007794:	6106      	str	r6, [r0, #16]
 8007796:	b005      	add	sp, #20
 8007798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800779c:	f843 2b04 	str.w	r2, [r3], #4
 80077a0:	e7d8      	b.n	8007754 <__multiply+0x50>
 80077a2:	f8b1 a000 	ldrh.w	sl, [r1]
 80077a6:	f1ba 0f00 	cmp.w	sl, #0
 80077aa:	d024      	beq.n	80077f6 <__multiply+0xf2>
 80077ac:	f104 0e14 	add.w	lr, r4, #20
 80077b0:	46a9      	mov	r9, r5
 80077b2:	f04f 0c00 	mov.w	ip, #0
 80077b6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80077ba:	f8d9 3000 	ldr.w	r3, [r9]
 80077be:	fa1f fb87 	uxth.w	fp, r7
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	fb0a 330b 	mla	r3, sl, fp, r3
 80077c8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80077cc:	f8d9 7000 	ldr.w	r7, [r9]
 80077d0:	4463      	add	r3, ip
 80077d2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80077d6:	fb0a c70b 	mla	r7, sl, fp, ip
 80077da:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80077de:	b29b      	uxth	r3, r3
 80077e0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80077e4:	4572      	cmp	r2, lr
 80077e6:	f849 3b04 	str.w	r3, [r9], #4
 80077ea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80077ee:	d8e2      	bhi.n	80077b6 <__multiply+0xb2>
 80077f0:	9b01      	ldr	r3, [sp, #4]
 80077f2:	f845 c003 	str.w	ip, [r5, r3]
 80077f6:	9b03      	ldr	r3, [sp, #12]
 80077f8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80077fc:	3104      	adds	r1, #4
 80077fe:	f1b9 0f00 	cmp.w	r9, #0
 8007802:	d021      	beq.n	8007848 <__multiply+0x144>
 8007804:	682b      	ldr	r3, [r5, #0]
 8007806:	f104 0c14 	add.w	ip, r4, #20
 800780a:	46ae      	mov	lr, r5
 800780c:	f04f 0a00 	mov.w	sl, #0
 8007810:	f8bc b000 	ldrh.w	fp, [ip]
 8007814:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007818:	fb09 770b 	mla	r7, r9, fp, r7
 800781c:	4457      	add	r7, sl
 800781e:	b29b      	uxth	r3, r3
 8007820:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007824:	f84e 3b04 	str.w	r3, [lr], #4
 8007828:	f85c 3b04 	ldr.w	r3, [ip], #4
 800782c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007830:	f8be 3000 	ldrh.w	r3, [lr]
 8007834:	fb09 330a 	mla	r3, r9, sl, r3
 8007838:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800783c:	4562      	cmp	r2, ip
 800783e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007842:	d8e5      	bhi.n	8007810 <__multiply+0x10c>
 8007844:	9f01      	ldr	r7, [sp, #4]
 8007846:	51eb      	str	r3, [r5, r7]
 8007848:	3504      	adds	r5, #4
 800784a:	e799      	b.n	8007780 <__multiply+0x7c>
 800784c:	3e01      	subs	r6, #1
 800784e:	e79b      	b.n	8007788 <__multiply+0x84>
 8007850:	08008844 	.word	0x08008844
 8007854:	08008855 	.word	0x08008855

08007858 <__pow5mult>:
 8007858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800785c:	4615      	mov	r5, r2
 800785e:	f012 0203 	ands.w	r2, r2, #3
 8007862:	4607      	mov	r7, r0
 8007864:	460e      	mov	r6, r1
 8007866:	d007      	beq.n	8007878 <__pow5mult+0x20>
 8007868:	4c25      	ldr	r4, [pc, #148]	@ (8007900 <__pow5mult+0xa8>)
 800786a:	3a01      	subs	r2, #1
 800786c:	2300      	movs	r3, #0
 800786e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007872:	f7ff fe9f 	bl	80075b4 <__multadd>
 8007876:	4606      	mov	r6, r0
 8007878:	10ad      	asrs	r5, r5, #2
 800787a:	d03d      	beq.n	80078f8 <__pow5mult+0xa0>
 800787c:	69fc      	ldr	r4, [r7, #28]
 800787e:	b97c      	cbnz	r4, 80078a0 <__pow5mult+0x48>
 8007880:	2010      	movs	r0, #16
 8007882:	f7ff fd7f 	bl	8007384 <malloc>
 8007886:	4602      	mov	r2, r0
 8007888:	61f8      	str	r0, [r7, #28]
 800788a:	b928      	cbnz	r0, 8007898 <__pow5mult+0x40>
 800788c:	4b1d      	ldr	r3, [pc, #116]	@ (8007904 <__pow5mult+0xac>)
 800788e:	481e      	ldr	r0, [pc, #120]	@ (8007908 <__pow5mult+0xb0>)
 8007890:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007894:	f000 fdb0 	bl	80083f8 <__assert_func>
 8007898:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800789c:	6004      	str	r4, [r0, #0]
 800789e:	60c4      	str	r4, [r0, #12]
 80078a0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80078a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80078a8:	b94c      	cbnz	r4, 80078be <__pow5mult+0x66>
 80078aa:	f240 2171 	movw	r1, #625	@ 0x271
 80078ae:	4638      	mov	r0, r7
 80078b0:	f7ff ff12 	bl	80076d8 <__i2b>
 80078b4:	2300      	movs	r3, #0
 80078b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80078ba:	4604      	mov	r4, r0
 80078bc:	6003      	str	r3, [r0, #0]
 80078be:	f04f 0900 	mov.w	r9, #0
 80078c2:	07eb      	lsls	r3, r5, #31
 80078c4:	d50a      	bpl.n	80078dc <__pow5mult+0x84>
 80078c6:	4631      	mov	r1, r6
 80078c8:	4622      	mov	r2, r4
 80078ca:	4638      	mov	r0, r7
 80078cc:	f7ff ff1a 	bl	8007704 <__multiply>
 80078d0:	4631      	mov	r1, r6
 80078d2:	4680      	mov	r8, r0
 80078d4:	4638      	mov	r0, r7
 80078d6:	f7ff fe4b 	bl	8007570 <_Bfree>
 80078da:	4646      	mov	r6, r8
 80078dc:	106d      	asrs	r5, r5, #1
 80078de:	d00b      	beq.n	80078f8 <__pow5mult+0xa0>
 80078e0:	6820      	ldr	r0, [r4, #0]
 80078e2:	b938      	cbnz	r0, 80078f4 <__pow5mult+0x9c>
 80078e4:	4622      	mov	r2, r4
 80078e6:	4621      	mov	r1, r4
 80078e8:	4638      	mov	r0, r7
 80078ea:	f7ff ff0b 	bl	8007704 <__multiply>
 80078ee:	6020      	str	r0, [r4, #0]
 80078f0:	f8c0 9000 	str.w	r9, [r0]
 80078f4:	4604      	mov	r4, r0
 80078f6:	e7e4      	b.n	80078c2 <__pow5mult+0x6a>
 80078f8:	4630      	mov	r0, r6
 80078fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078fe:	bf00      	nop
 8007900:	080088b0 	.word	0x080088b0
 8007904:	080087d5 	.word	0x080087d5
 8007908:	08008855 	.word	0x08008855

0800790c <__lshift>:
 800790c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007910:	460c      	mov	r4, r1
 8007912:	6849      	ldr	r1, [r1, #4]
 8007914:	6923      	ldr	r3, [r4, #16]
 8007916:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800791a:	68a3      	ldr	r3, [r4, #8]
 800791c:	4607      	mov	r7, r0
 800791e:	4691      	mov	r9, r2
 8007920:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007924:	f108 0601 	add.w	r6, r8, #1
 8007928:	42b3      	cmp	r3, r6
 800792a:	db0b      	blt.n	8007944 <__lshift+0x38>
 800792c:	4638      	mov	r0, r7
 800792e:	f7ff fddf 	bl	80074f0 <_Balloc>
 8007932:	4605      	mov	r5, r0
 8007934:	b948      	cbnz	r0, 800794a <__lshift+0x3e>
 8007936:	4602      	mov	r2, r0
 8007938:	4b28      	ldr	r3, [pc, #160]	@ (80079dc <__lshift+0xd0>)
 800793a:	4829      	ldr	r0, [pc, #164]	@ (80079e0 <__lshift+0xd4>)
 800793c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007940:	f000 fd5a 	bl	80083f8 <__assert_func>
 8007944:	3101      	adds	r1, #1
 8007946:	005b      	lsls	r3, r3, #1
 8007948:	e7ee      	b.n	8007928 <__lshift+0x1c>
 800794a:	2300      	movs	r3, #0
 800794c:	f100 0114 	add.w	r1, r0, #20
 8007950:	f100 0210 	add.w	r2, r0, #16
 8007954:	4618      	mov	r0, r3
 8007956:	4553      	cmp	r3, sl
 8007958:	db33      	blt.n	80079c2 <__lshift+0xb6>
 800795a:	6920      	ldr	r0, [r4, #16]
 800795c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007960:	f104 0314 	add.w	r3, r4, #20
 8007964:	f019 091f 	ands.w	r9, r9, #31
 8007968:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800796c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007970:	d02b      	beq.n	80079ca <__lshift+0xbe>
 8007972:	f1c9 0e20 	rsb	lr, r9, #32
 8007976:	468a      	mov	sl, r1
 8007978:	2200      	movs	r2, #0
 800797a:	6818      	ldr	r0, [r3, #0]
 800797c:	fa00 f009 	lsl.w	r0, r0, r9
 8007980:	4310      	orrs	r0, r2
 8007982:	f84a 0b04 	str.w	r0, [sl], #4
 8007986:	f853 2b04 	ldr.w	r2, [r3], #4
 800798a:	459c      	cmp	ip, r3
 800798c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007990:	d8f3      	bhi.n	800797a <__lshift+0x6e>
 8007992:	ebac 0304 	sub.w	r3, ip, r4
 8007996:	3b15      	subs	r3, #21
 8007998:	f023 0303 	bic.w	r3, r3, #3
 800799c:	3304      	adds	r3, #4
 800799e:	f104 0015 	add.w	r0, r4, #21
 80079a2:	4584      	cmp	ip, r0
 80079a4:	bf38      	it	cc
 80079a6:	2304      	movcc	r3, #4
 80079a8:	50ca      	str	r2, [r1, r3]
 80079aa:	b10a      	cbz	r2, 80079b0 <__lshift+0xa4>
 80079ac:	f108 0602 	add.w	r6, r8, #2
 80079b0:	3e01      	subs	r6, #1
 80079b2:	4638      	mov	r0, r7
 80079b4:	612e      	str	r6, [r5, #16]
 80079b6:	4621      	mov	r1, r4
 80079b8:	f7ff fdda 	bl	8007570 <_Bfree>
 80079bc:	4628      	mov	r0, r5
 80079be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80079c6:	3301      	adds	r3, #1
 80079c8:	e7c5      	b.n	8007956 <__lshift+0x4a>
 80079ca:	3904      	subs	r1, #4
 80079cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80079d0:	f841 2f04 	str.w	r2, [r1, #4]!
 80079d4:	459c      	cmp	ip, r3
 80079d6:	d8f9      	bhi.n	80079cc <__lshift+0xc0>
 80079d8:	e7ea      	b.n	80079b0 <__lshift+0xa4>
 80079da:	bf00      	nop
 80079dc:	08008844 	.word	0x08008844
 80079e0:	08008855 	.word	0x08008855

080079e4 <__mcmp>:
 80079e4:	690a      	ldr	r2, [r1, #16]
 80079e6:	4603      	mov	r3, r0
 80079e8:	6900      	ldr	r0, [r0, #16]
 80079ea:	1a80      	subs	r0, r0, r2
 80079ec:	b530      	push	{r4, r5, lr}
 80079ee:	d10e      	bne.n	8007a0e <__mcmp+0x2a>
 80079f0:	3314      	adds	r3, #20
 80079f2:	3114      	adds	r1, #20
 80079f4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80079f8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80079fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007a00:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007a04:	4295      	cmp	r5, r2
 8007a06:	d003      	beq.n	8007a10 <__mcmp+0x2c>
 8007a08:	d205      	bcs.n	8007a16 <__mcmp+0x32>
 8007a0a:	f04f 30ff 	mov.w	r0, #4294967295
 8007a0e:	bd30      	pop	{r4, r5, pc}
 8007a10:	42a3      	cmp	r3, r4
 8007a12:	d3f3      	bcc.n	80079fc <__mcmp+0x18>
 8007a14:	e7fb      	b.n	8007a0e <__mcmp+0x2a>
 8007a16:	2001      	movs	r0, #1
 8007a18:	e7f9      	b.n	8007a0e <__mcmp+0x2a>
	...

08007a1c <__mdiff>:
 8007a1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a20:	4689      	mov	r9, r1
 8007a22:	4606      	mov	r6, r0
 8007a24:	4611      	mov	r1, r2
 8007a26:	4648      	mov	r0, r9
 8007a28:	4614      	mov	r4, r2
 8007a2a:	f7ff ffdb 	bl	80079e4 <__mcmp>
 8007a2e:	1e05      	subs	r5, r0, #0
 8007a30:	d112      	bne.n	8007a58 <__mdiff+0x3c>
 8007a32:	4629      	mov	r1, r5
 8007a34:	4630      	mov	r0, r6
 8007a36:	f7ff fd5b 	bl	80074f0 <_Balloc>
 8007a3a:	4602      	mov	r2, r0
 8007a3c:	b928      	cbnz	r0, 8007a4a <__mdiff+0x2e>
 8007a3e:	4b3f      	ldr	r3, [pc, #252]	@ (8007b3c <__mdiff+0x120>)
 8007a40:	f240 2137 	movw	r1, #567	@ 0x237
 8007a44:	483e      	ldr	r0, [pc, #248]	@ (8007b40 <__mdiff+0x124>)
 8007a46:	f000 fcd7 	bl	80083f8 <__assert_func>
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007a50:	4610      	mov	r0, r2
 8007a52:	b003      	add	sp, #12
 8007a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a58:	bfbc      	itt	lt
 8007a5a:	464b      	movlt	r3, r9
 8007a5c:	46a1      	movlt	r9, r4
 8007a5e:	4630      	mov	r0, r6
 8007a60:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007a64:	bfba      	itte	lt
 8007a66:	461c      	movlt	r4, r3
 8007a68:	2501      	movlt	r5, #1
 8007a6a:	2500      	movge	r5, #0
 8007a6c:	f7ff fd40 	bl	80074f0 <_Balloc>
 8007a70:	4602      	mov	r2, r0
 8007a72:	b918      	cbnz	r0, 8007a7c <__mdiff+0x60>
 8007a74:	4b31      	ldr	r3, [pc, #196]	@ (8007b3c <__mdiff+0x120>)
 8007a76:	f240 2145 	movw	r1, #581	@ 0x245
 8007a7a:	e7e3      	b.n	8007a44 <__mdiff+0x28>
 8007a7c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007a80:	6926      	ldr	r6, [r4, #16]
 8007a82:	60c5      	str	r5, [r0, #12]
 8007a84:	f109 0310 	add.w	r3, r9, #16
 8007a88:	f109 0514 	add.w	r5, r9, #20
 8007a8c:	f104 0e14 	add.w	lr, r4, #20
 8007a90:	f100 0b14 	add.w	fp, r0, #20
 8007a94:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007a98:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007a9c:	9301      	str	r3, [sp, #4]
 8007a9e:	46d9      	mov	r9, fp
 8007aa0:	f04f 0c00 	mov.w	ip, #0
 8007aa4:	9b01      	ldr	r3, [sp, #4]
 8007aa6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007aaa:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007aae:	9301      	str	r3, [sp, #4]
 8007ab0:	fa1f f38a 	uxth.w	r3, sl
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	b283      	uxth	r3, r0
 8007ab8:	1acb      	subs	r3, r1, r3
 8007aba:	0c00      	lsrs	r0, r0, #16
 8007abc:	4463      	add	r3, ip
 8007abe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007ac2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007acc:	4576      	cmp	r6, lr
 8007ace:	f849 3b04 	str.w	r3, [r9], #4
 8007ad2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007ad6:	d8e5      	bhi.n	8007aa4 <__mdiff+0x88>
 8007ad8:	1b33      	subs	r3, r6, r4
 8007ada:	3b15      	subs	r3, #21
 8007adc:	f023 0303 	bic.w	r3, r3, #3
 8007ae0:	3415      	adds	r4, #21
 8007ae2:	3304      	adds	r3, #4
 8007ae4:	42a6      	cmp	r6, r4
 8007ae6:	bf38      	it	cc
 8007ae8:	2304      	movcc	r3, #4
 8007aea:	441d      	add	r5, r3
 8007aec:	445b      	add	r3, fp
 8007aee:	461e      	mov	r6, r3
 8007af0:	462c      	mov	r4, r5
 8007af2:	4544      	cmp	r4, r8
 8007af4:	d30e      	bcc.n	8007b14 <__mdiff+0xf8>
 8007af6:	f108 0103 	add.w	r1, r8, #3
 8007afa:	1b49      	subs	r1, r1, r5
 8007afc:	f021 0103 	bic.w	r1, r1, #3
 8007b00:	3d03      	subs	r5, #3
 8007b02:	45a8      	cmp	r8, r5
 8007b04:	bf38      	it	cc
 8007b06:	2100      	movcc	r1, #0
 8007b08:	440b      	add	r3, r1
 8007b0a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007b0e:	b191      	cbz	r1, 8007b36 <__mdiff+0x11a>
 8007b10:	6117      	str	r7, [r2, #16]
 8007b12:	e79d      	b.n	8007a50 <__mdiff+0x34>
 8007b14:	f854 1b04 	ldr.w	r1, [r4], #4
 8007b18:	46e6      	mov	lr, ip
 8007b1a:	0c08      	lsrs	r0, r1, #16
 8007b1c:	fa1c fc81 	uxtah	ip, ip, r1
 8007b20:	4471      	add	r1, lr
 8007b22:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007b26:	b289      	uxth	r1, r1
 8007b28:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007b2c:	f846 1b04 	str.w	r1, [r6], #4
 8007b30:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007b34:	e7dd      	b.n	8007af2 <__mdiff+0xd6>
 8007b36:	3f01      	subs	r7, #1
 8007b38:	e7e7      	b.n	8007b0a <__mdiff+0xee>
 8007b3a:	bf00      	nop
 8007b3c:	08008844 	.word	0x08008844
 8007b40:	08008855 	.word	0x08008855

08007b44 <__d2b>:
 8007b44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007b48:	460f      	mov	r7, r1
 8007b4a:	2101      	movs	r1, #1
 8007b4c:	ec59 8b10 	vmov	r8, r9, d0
 8007b50:	4616      	mov	r6, r2
 8007b52:	f7ff fccd 	bl	80074f0 <_Balloc>
 8007b56:	4604      	mov	r4, r0
 8007b58:	b930      	cbnz	r0, 8007b68 <__d2b+0x24>
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	4b23      	ldr	r3, [pc, #140]	@ (8007bec <__d2b+0xa8>)
 8007b5e:	4824      	ldr	r0, [pc, #144]	@ (8007bf0 <__d2b+0xac>)
 8007b60:	f240 310f 	movw	r1, #783	@ 0x30f
 8007b64:	f000 fc48 	bl	80083f8 <__assert_func>
 8007b68:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007b6c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007b70:	b10d      	cbz	r5, 8007b76 <__d2b+0x32>
 8007b72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b76:	9301      	str	r3, [sp, #4]
 8007b78:	f1b8 0300 	subs.w	r3, r8, #0
 8007b7c:	d023      	beq.n	8007bc6 <__d2b+0x82>
 8007b7e:	4668      	mov	r0, sp
 8007b80:	9300      	str	r3, [sp, #0]
 8007b82:	f7ff fd7c 	bl	800767e <__lo0bits>
 8007b86:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007b8a:	b1d0      	cbz	r0, 8007bc2 <__d2b+0x7e>
 8007b8c:	f1c0 0320 	rsb	r3, r0, #32
 8007b90:	fa02 f303 	lsl.w	r3, r2, r3
 8007b94:	430b      	orrs	r3, r1
 8007b96:	40c2      	lsrs	r2, r0
 8007b98:	6163      	str	r3, [r4, #20]
 8007b9a:	9201      	str	r2, [sp, #4]
 8007b9c:	9b01      	ldr	r3, [sp, #4]
 8007b9e:	61a3      	str	r3, [r4, #24]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	bf0c      	ite	eq
 8007ba4:	2201      	moveq	r2, #1
 8007ba6:	2202      	movne	r2, #2
 8007ba8:	6122      	str	r2, [r4, #16]
 8007baa:	b1a5      	cbz	r5, 8007bd6 <__d2b+0x92>
 8007bac:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007bb0:	4405      	add	r5, r0
 8007bb2:	603d      	str	r5, [r7, #0]
 8007bb4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007bb8:	6030      	str	r0, [r6, #0]
 8007bba:	4620      	mov	r0, r4
 8007bbc:	b003      	add	sp, #12
 8007bbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007bc2:	6161      	str	r1, [r4, #20]
 8007bc4:	e7ea      	b.n	8007b9c <__d2b+0x58>
 8007bc6:	a801      	add	r0, sp, #4
 8007bc8:	f7ff fd59 	bl	800767e <__lo0bits>
 8007bcc:	9b01      	ldr	r3, [sp, #4]
 8007bce:	6163      	str	r3, [r4, #20]
 8007bd0:	3020      	adds	r0, #32
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	e7e8      	b.n	8007ba8 <__d2b+0x64>
 8007bd6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007bda:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007bde:	6038      	str	r0, [r7, #0]
 8007be0:	6918      	ldr	r0, [r3, #16]
 8007be2:	f7ff fd2d 	bl	8007640 <__hi0bits>
 8007be6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007bea:	e7e5      	b.n	8007bb8 <__d2b+0x74>
 8007bec:	08008844 	.word	0x08008844
 8007bf0:	08008855 	.word	0x08008855

08007bf4 <__ssputs_r>:
 8007bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bf8:	688e      	ldr	r6, [r1, #8]
 8007bfa:	461f      	mov	r7, r3
 8007bfc:	42be      	cmp	r6, r7
 8007bfe:	680b      	ldr	r3, [r1, #0]
 8007c00:	4682      	mov	sl, r0
 8007c02:	460c      	mov	r4, r1
 8007c04:	4690      	mov	r8, r2
 8007c06:	d82d      	bhi.n	8007c64 <__ssputs_r+0x70>
 8007c08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007c0c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007c10:	d026      	beq.n	8007c60 <__ssputs_r+0x6c>
 8007c12:	6965      	ldr	r5, [r4, #20]
 8007c14:	6909      	ldr	r1, [r1, #16]
 8007c16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c1a:	eba3 0901 	sub.w	r9, r3, r1
 8007c1e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007c22:	1c7b      	adds	r3, r7, #1
 8007c24:	444b      	add	r3, r9
 8007c26:	106d      	asrs	r5, r5, #1
 8007c28:	429d      	cmp	r5, r3
 8007c2a:	bf38      	it	cc
 8007c2c:	461d      	movcc	r5, r3
 8007c2e:	0553      	lsls	r3, r2, #21
 8007c30:	d527      	bpl.n	8007c82 <__ssputs_r+0x8e>
 8007c32:	4629      	mov	r1, r5
 8007c34:	f7ff fbd0 	bl	80073d8 <_malloc_r>
 8007c38:	4606      	mov	r6, r0
 8007c3a:	b360      	cbz	r0, 8007c96 <__ssputs_r+0xa2>
 8007c3c:	6921      	ldr	r1, [r4, #16]
 8007c3e:	464a      	mov	r2, r9
 8007c40:	f000 fbcc 	bl	80083dc <memcpy>
 8007c44:	89a3      	ldrh	r3, [r4, #12]
 8007c46:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007c4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c4e:	81a3      	strh	r3, [r4, #12]
 8007c50:	6126      	str	r6, [r4, #16]
 8007c52:	6165      	str	r5, [r4, #20]
 8007c54:	444e      	add	r6, r9
 8007c56:	eba5 0509 	sub.w	r5, r5, r9
 8007c5a:	6026      	str	r6, [r4, #0]
 8007c5c:	60a5      	str	r5, [r4, #8]
 8007c5e:	463e      	mov	r6, r7
 8007c60:	42be      	cmp	r6, r7
 8007c62:	d900      	bls.n	8007c66 <__ssputs_r+0x72>
 8007c64:	463e      	mov	r6, r7
 8007c66:	6820      	ldr	r0, [r4, #0]
 8007c68:	4632      	mov	r2, r6
 8007c6a:	4641      	mov	r1, r8
 8007c6c:	f000 fb6a 	bl	8008344 <memmove>
 8007c70:	68a3      	ldr	r3, [r4, #8]
 8007c72:	1b9b      	subs	r3, r3, r6
 8007c74:	60a3      	str	r3, [r4, #8]
 8007c76:	6823      	ldr	r3, [r4, #0]
 8007c78:	4433      	add	r3, r6
 8007c7a:	6023      	str	r3, [r4, #0]
 8007c7c:	2000      	movs	r0, #0
 8007c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c82:	462a      	mov	r2, r5
 8007c84:	f000 fbfc 	bl	8008480 <_realloc_r>
 8007c88:	4606      	mov	r6, r0
 8007c8a:	2800      	cmp	r0, #0
 8007c8c:	d1e0      	bne.n	8007c50 <__ssputs_r+0x5c>
 8007c8e:	6921      	ldr	r1, [r4, #16]
 8007c90:	4650      	mov	r0, sl
 8007c92:	f7ff fb2d 	bl	80072f0 <_free_r>
 8007c96:	230c      	movs	r3, #12
 8007c98:	f8ca 3000 	str.w	r3, [sl]
 8007c9c:	89a3      	ldrh	r3, [r4, #12]
 8007c9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ca2:	81a3      	strh	r3, [r4, #12]
 8007ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ca8:	e7e9      	b.n	8007c7e <__ssputs_r+0x8a>
	...

08007cac <_svfiprintf_r>:
 8007cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cb0:	4698      	mov	r8, r3
 8007cb2:	898b      	ldrh	r3, [r1, #12]
 8007cb4:	061b      	lsls	r3, r3, #24
 8007cb6:	b09d      	sub	sp, #116	@ 0x74
 8007cb8:	4607      	mov	r7, r0
 8007cba:	460d      	mov	r5, r1
 8007cbc:	4614      	mov	r4, r2
 8007cbe:	d510      	bpl.n	8007ce2 <_svfiprintf_r+0x36>
 8007cc0:	690b      	ldr	r3, [r1, #16]
 8007cc2:	b973      	cbnz	r3, 8007ce2 <_svfiprintf_r+0x36>
 8007cc4:	2140      	movs	r1, #64	@ 0x40
 8007cc6:	f7ff fb87 	bl	80073d8 <_malloc_r>
 8007cca:	6028      	str	r0, [r5, #0]
 8007ccc:	6128      	str	r0, [r5, #16]
 8007cce:	b930      	cbnz	r0, 8007cde <_svfiprintf_r+0x32>
 8007cd0:	230c      	movs	r3, #12
 8007cd2:	603b      	str	r3, [r7, #0]
 8007cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8007cd8:	b01d      	add	sp, #116	@ 0x74
 8007cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cde:	2340      	movs	r3, #64	@ 0x40
 8007ce0:	616b      	str	r3, [r5, #20]
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ce6:	2320      	movs	r3, #32
 8007ce8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007cec:	f8cd 800c 	str.w	r8, [sp, #12]
 8007cf0:	2330      	movs	r3, #48	@ 0x30
 8007cf2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007e90 <_svfiprintf_r+0x1e4>
 8007cf6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007cfa:	f04f 0901 	mov.w	r9, #1
 8007cfe:	4623      	mov	r3, r4
 8007d00:	469a      	mov	sl, r3
 8007d02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d06:	b10a      	cbz	r2, 8007d0c <_svfiprintf_r+0x60>
 8007d08:	2a25      	cmp	r2, #37	@ 0x25
 8007d0a:	d1f9      	bne.n	8007d00 <_svfiprintf_r+0x54>
 8007d0c:	ebba 0b04 	subs.w	fp, sl, r4
 8007d10:	d00b      	beq.n	8007d2a <_svfiprintf_r+0x7e>
 8007d12:	465b      	mov	r3, fp
 8007d14:	4622      	mov	r2, r4
 8007d16:	4629      	mov	r1, r5
 8007d18:	4638      	mov	r0, r7
 8007d1a:	f7ff ff6b 	bl	8007bf4 <__ssputs_r>
 8007d1e:	3001      	adds	r0, #1
 8007d20:	f000 80a7 	beq.w	8007e72 <_svfiprintf_r+0x1c6>
 8007d24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d26:	445a      	add	r2, fp
 8007d28:	9209      	str	r2, [sp, #36]	@ 0x24
 8007d2a:	f89a 3000 	ldrb.w	r3, [sl]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	f000 809f 	beq.w	8007e72 <_svfiprintf_r+0x1c6>
 8007d34:	2300      	movs	r3, #0
 8007d36:	f04f 32ff 	mov.w	r2, #4294967295
 8007d3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d3e:	f10a 0a01 	add.w	sl, sl, #1
 8007d42:	9304      	str	r3, [sp, #16]
 8007d44:	9307      	str	r3, [sp, #28]
 8007d46:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007d4a:	931a      	str	r3, [sp, #104]	@ 0x68
 8007d4c:	4654      	mov	r4, sl
 8007d4e:	2205      	movs	r2, #5
 8007d50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d54:	484e      	ldr	r0, [pc, #312]	@ (8007e90 <_svfiprintf_r+0x1e4>)
 8007d56:	f7f8 fa43 	bl	80001e0 <memchr>
 8007d5a:	9a04      	ldr	r2, [sp, #16]
 8007d5c:	b9d8      	cbnz	r0, 8007d96 <_svfiprintf_r+0xea>
 8007d5e:	06d0      	lsls	r0, r2, #27
 8007d60:	bf44      	itt	mi
 8007d62:	2320      	movmi	r3, #32
 8007d64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d68:	0711      	lsls	r1, r2, #28
 8007d6a:	bf44      	itt	mi
 8007d6c:	232b      	movmi	r3, #43	@ 0x2b
 8007d6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d72:	f89a 3000 	ldrb.w	r3, [sl]
 8007d76:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d78:	d015      	beq.n	8007da6 <_svfiprintf_r+0xfa>
 8007d7a:	9a07      	ldr	r2, [sp, #28]
 8007d7c:	4654      	mov	r4, sl
 8007d7e:	2000      	movs	r0, #0
 8007d80:	f04f 0c0a 	mov.w	ip, #10
 8007d84:	4621      	mov	r1, r4
 8007d86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d8a:	3b30      	subs	r3, #48	@ 0x30
 8007d8c:	2b09      	cmp	r3, #9
 8007d8e:	d94b      	bls.n	8007e28 <_svfiprintf_r+0x17c>
 8007d90:	b1b0      	cbz	r0, 8007dc0 <_svfiprintf_r+0x114>
 8007d92:	9207      	str	r2, [sp, #28]
 8007d94:	e014      	b.n	8007dc0 <_svfiprintf_r+0x114>
 8007d96:	eba0 0308 	sub.w	r3, r0, r8
 8007d9a:	fa09 f303 	lsl.w	r3, r9, r3
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	9304      	str	r3, [sp, #16]
 8007da2:	46a2      	mov	sl, r4
 8007da4:	e7d2      	b.n	8007d4c <_svfiprintf_r+0xa0>
 8007da6:	9b03      	ldr	r3, [sp, #12]
 8007da8:	1d19      	adds	r1, r3, #4
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	9103      	str	r1, [sp, #12]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	bfbb      	ittet	lt
 8007db2:	425b      	neglt	r3, r3
 8007db4:	f042 0202 	orrlt.w	r2, r2, #2
 8007db8:	9307      	strge	r3, [sp, #28]
 8007dba:	9307      	strlt	r3, [sp, #28]
 8007dbc:	bfb8      	it	lt
 8007dbe:	9204      	strlt	r2, [sp, #16]
 8007dc0:	7823      	ldrb	r3, [r4, #0]
 8007dc2:	2b2e      	cmp	r3, #46	@ 0x2e
 8007dc4:	d10a      	bne.n	8007ddc <_svfiprintf_r+0x130>
 8007dc6:	7863      	ldrb	r3, [r4, #1]
 8007dc8:	2b2a      	cmp	r3, #42	@ 0x2a
 8007dca:	d132      	bne.n	8007e32 <_svfiprintf_r+0x186>
 8007dcc:	9b03      	ldr	r3, [sp, #12]
 8007dce:	1d1a      	adds	r2, r3, #4
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	9203      	str	r2, [sp, #12]
 8007dd4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007dd8:	3402      	adds	r4, #2
 8007dda:	9305      	str	r3, [sp, #20]
 8007ddc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007ea0 <_svfiprintf_r+0x1f4>
 8007de0:	7821      	ldrb	r1, [r4, #0]
 8007de2:	2203      	movs	r2, #3
 8007de4:	4650      	mov	r0, sl
 8007de6:	f7f8 f9fb 	bl	80001e0 <memchr>
 8007dea:	b138      	cbz	r0, 8007dfc <_svfiprintf_r+0x150>
 8007dec:	9b04      	ldr	r3, [sp, #16]
 8007dee:	eba0 000a 	sub.w	r0, r0, sl
 8007df2:	2240      	movs	r2, #64	@ 0x40
 8007df4:	4082      	lsls	r2, r0
 8007df6:	4313      	orrs	r3, r2
 8007df8:	3401      	adds	r4, #1
 8007dfa:	9304      	str	r3, [sp, #16]
 8007dfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e00:	4824      	ldr	r0, [pc, #144]	@ (8007e94 <_svfiprintf_r+0x1e8>)
 8007e02:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007e06:	2206      	movs	r2, #6
 8007e08:	f7f8 f9ea 	bl	80001e0 <memchr>
 8007e0c:	2800      	cmp	r0, #0
 8007e0e:	d036      	beq.n	8007e7e <_svfiprintf_r+0x1d2>
 8007e10:	4b21      	ldr	r3, [pc, #132]	@ (8007e98 <_svfiprintf_r+0x1ec>)
 8007e12:	bb1b      	cbnz	r3, 8007e5c <_svfiprintf_r+0x1b0>
 8007e14:	9b03      	ldr	r3, [sp, #12]
 8007e16:	3307      	adds	r3, #7
 8007e18:	f023 0307 	bic.w	r3, r3, #7
 8007e1c:	3308      	adds	r3, #8
 8007e1e:	9303      	str	r3, [sp, #12]
 8007e20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e22:	4433      	add	r3, r6
 8007e24:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e26:	e76a      	b.n	8007cfe <_svfiprintf_r+0x52>
 8007e28:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e2c:	460c      	mov	r4, r1
 8007e2e:	2001      	movs	r0, #1
 8007e30:	e7a8      	b.n	8007d84 <_svfiprintf_r+0xd8>
 8007e32:	2300      	movs	r3, #0
 8007e34:	3401      	adds	r4, #1
 8007e36:	9305      	str	r3, [sp, #20]
 8007e38:	4619      	mov	r1, r3
 8007e3a:	f04f 0c0a 	mov.w	ip, #10
 8007e3e:	4620      	mov	r0, r4
 8007e40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e44:	3a30      	subs	r2, #48	@ 0x30
 8007e46:	2a09      	cmp	r2, #9
 8007e48:	d903      	bls.n	8007e52 <_svfiprintf_r+0x1a6>
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d0c6      	beq.n	8007ddc <_svfiprintf_r+0x130>
 8007e4e:	9105      	str	r1, [sp, #20]
 8007e50:	e7c4      	b.n	8007ddc <_svfiprintf_r+0x130>
 8007e52:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e56:	4604      	mov	r4, r0
 8007e58:	2301      	movs	r3, #1
 8007e5a:	e7f0      	b.n	8007e3e <_svfiprintf_r+0x192>
 8007e5c:	ab03      	add	r3, sp, #12
 8007e5e:	9300      	str	r3, [sp, #0]
 8007e60:	462a      	mov	r2, r5
 8007e62:	4b0e      	ldr	r3, [pc, #56]	@ (8007e9c <_svfiprintf_r+0x1f0>)
 8007e64:	a904      	add	r1, sp, #16
 8007e66:	4638      	mov	r0, r7
 8007e68:	f7fd fdf2 	bl	8005a50 <_printf_float>
 8007e6c:	1c42      	adds	r2, r0, #1
 8007e6e:	4606      	mov	r6, r0
 8007e70:	d1d6      	bne.n	8007e20 <_svfiprintf_r+0x174>
 8007e72:	89ab      	ldrh	r3, [r5, #12]
 8007e74:	065b      	lsls	r3, r3, #25
 8007e76:	f53f af2d 	bmi.w	8007cd4 <_svfiprintf_r+0x28>
 8007e7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007e7c:	e72c      	b.n	8007cd8 <_svfiprintf_r+0x2c>
 8007e7e:	ab03      	add	r3, sp, #12
 8007e80:	9300      	str	r3, [sp, #0]
 8007e82:	462a      	mov	r2, r5
 8007e84:	4b05      	ldr	r3, [pc, #20]	@ (8007e9c <_svfiprintf_r+0x1f0>)
 8007e86:	a904      	add	r1, sp, #16
 8007e88:	4638      	mov	r0, r7
 8007e8a:	f7fe f879 	bl	8005f80 <_printf_i>
 8007e8e:	e7ed      	b.n	8007e6c <_svfiprintf_r+0x1c0>
 8007e90:	080089b0 	.word	0x080089b0
 8007e94:	080089ba 	.word	0x080089ba
 8007e98:	08005a51 	.word	0x08005a51
 8007e9c:	08007bf5 	.word	0x08007bf5
 8007ea0:	080089b6 	.word	0x080089b6

08007ea4 <__sfputc_r>:
 8007ea4:	6893      	ldr	r3, [r2, #8]
 8007ea6:	3b01      	subs	r3, #1
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	b410      	push	{r4}
 8007eac:	6093      	str	r3, [r2, #8]
 8007eae:	da08      	bge.n	8007ec2 <__sfputc_r+0x1e>
 8007eb0:	6994      	ldr	r4, [r2, #24]
 8007eb2:	42a3      	cmp	r3, r4
 8007eb4:	db01      	blt.n	8007eba <__sfputc_r+0x16>
 8007eb6:	290a      	cmp	r1, #10
 8007eb8:	d103      	bne.n	8007ec2 <__sfputc_r+0x1e>
 8007eba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ebe:	f7fe bab6 	b.w	800642e <__swbuf_r>
 8007ec2:	6813      	ldr	r3, [r2, #0]
 8007ec4:	1c58      	adds	r0, r3, #1
 8007ec6:	6010      	str	r0, [r2, #0]
 8007ec8:	7019      	strb	r1, [r3, #0]
 8007eca:	4608      	mov	r0, r1
 8007ecc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ed0:	4770      	bx	lr

08007ed2 <__sfputs_r>:
 8007ed2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ed4:	4606      	mov	r6, r0
 8007ed6:	460f      	mov	r7, r1
 8007ed8:	4614      	mov	r4, r2
 8007eda:	18d5      	adds	r5, r2, r3
 8007edc:	42ac      	cmp	r4, r5
 8007ede:	d101      	bne.n	8007ee4 <__sfputs_r+0x12>
 8007ee0:	2000      	movs	r0, #0
 8007ee2:	e007      	b.n	8007ef4 <__sfputs_r+0x22>
 8007ee4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ee8:	463a      	mov	r2, r7
 8007eea:	4630      	mov	r0, r6
 8007eec:	f7ff ffda 	bl	8007ea4 <__sfputc_r>
 8007ef0:	1c43      	adds	r3, r0, #1
 8007ef2:	d1f3      	bne.n	8007edc <__sfputs_r+0xa>
 8007ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007ef8 <_vfiprintf_r>:
 8007ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007efc:	460d      	mov	r5, r1
 8007efe:	b09d      	sub	sp, #116	@ 0x74
 8007f00:	4614      	mov	r4, r2
 8007f02:	4698      	mov	r8, r3
 8007f04:	4606      	mov	r6, r0
 8007f06:	b118      	cbz	r0, 8007f10 <_vfiprintf_r+0x18>
 8007f08:	6a03      	ldr	r3, [r0, #32]
 8007f0a:	b90b      	cbnz	r3, 8007f10 <_vfiprintf_r+0x18>
 8007f0c:	f7fe f9e4 	bl	80062d8 <__sinit>
 8007f10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f12:	07d9      	lsls	r1, r3, #31
 8007f14:	d405      	bmi.n	8007f22 <_vfiprintf_r+0x2a>
 8007f16:	89ab      	ldrh	r3, [r5, #12]
 8007f18:	059a      	lsls	r2, r3, #22
 8007f1a:	d402      	bmi.n	8007f22 <_vfiprintf_r+0x2a>
 8007f1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f1e:	f7fe fb98 	bl	8006652 <__retarget_lock_acquire_recursive>
 8007f22:	89ab      	ldrh	r3, [r5, #12]
 8007f24:	071b      	lsls	r3, r3, #28
 8007f26:	d501      	bpl.n	8007f2c <_vfiprintf_r+0x34>
 8007f28:	692b      	ldr	r3, [r5, #16]
 8007f2a:	b99b      	cbnz	r3, 8007f54 <_vfiprintf_r+0x5c>
 8007f2c:	4629      	mov	r1, r5
 8007f2e:	4630      	mov	r0, r6
 8007f30:	f7fe fabc 	bl	80064ac <__swsetup_r>
 8007f34:	b170      	cbz	r0, 8007f54 <_vfiprintf_r+0x5c>
 8007f36:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f38:	07dc      	lsls	r4, r3, #31
 8007f3a:	d504      	bpl.n	8007f46 <_vfiprintf_r+0x4e>
 8007f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f40:	b01d      	add	sp, #116	@ 0x74
 8007f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f46:	89ab      	ldrh	r3, [r5, #12]
 8007f48:	0598      	lsls	r0, r3, #22
 8007f4a:	d4f7      	bmi.n	8007f3c <_vfiprintf_r+0x44>
 8007f4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f4e:	f7fe fb81 	bl	8006654 <__retarget_lock_release_recursive>
 8007f52:	e7f3      	b.n	8007f3c <_vfiprintf_r+0x44>
 8007f54:	2300      	movs	r3, #0
 8007f56:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f58:	2320      	movs	r3, #32
 8007f5a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007f5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f62:	2330      	movs	r3, #48	@ 0x30
 8007f64:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008114 <_vfiprintf_r+0x21c>
 8007f68:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007f6c:	f04f 0901 	mov.w	r9, #1
 8007f70:	4623      	mov	r3, r4
 8007f72:	469a      	mov	sl, r3
 8007f74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f78:	b10a      	cbz	r2, 8007f7e <_vfiprintf_r+0x86>
 8007f7a:	2a25      	cmp	r2, #37	@ 0x25
 8007f7c:	d1f9      	bne.n	8007f72 <_vfiprintf_r+0x7a>
 8007f7e:	ebba 0b04 	subs.w	fp, sl, r4
 8007f82:	d00b      	beq.n	8007f9c <_vfiprintf_r+0xa4>
 8007f84:	465b      	mov	r3, fp
 8007f86:	4622      	mov	r2, r4
 8007f88:	4629      	mov	r1, r5
 8007f8a:	4630      	mov	r0, r6
 8007f8c:	f7ff ffa1 	bl	8007ed2 <__sfputs_r>
 8007f90:	3001      	adds	r0, #1
 8007f92:	f000 80a7 	beq.w	80080e4 <_vfiprintf_r+0x1ec>
 8007f96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f98:	445a      	add	r2, fp
 8007f9a:	9209      	str	r2, [sp, #36]	@ 0x24
 8007f9c:	f89a 3000 	ldrb.w	r3, [sl]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	f000 809f 	beq.w	80080e4 <_vfiprintf_r+0x1ec>
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8007fac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007fb0:	f10a 0a01 	add.w	sl, sl, #1
 8007fb4:	9304      	str	r3, [sp, #16]
 8007fb6:	9307      	str	r3, [sp, #28]
 8007fb8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007fbc:	931a      	str	r3, [sp, #104]	@ 0x68
 8007fbe:	4654      	mov	r4, sl
 8007fc0:	2205      	movs	r2, #5
 8007fc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fc6:	4853      	ldr	r0, [pc, #332]	@ (8008114 <_vfiprintf_r+0x21c>)
 8007fc8:	f7f8 f90a 	bl	80001e0 <memchr>
 8007fcc:	9a04      	ldr	r2, [sp, #16]
 8007fce:	b9d8      	cbnz	r0, 8008008 <_vfiprintf_r+0x110>
 8007fd0:	06d1      	lsls	r1, r2, #27
 8007fd2:	bf44      	itt	mi
 8007fd4:	2320      	movmi	r3, #32
 8007fd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007fda:	0713      	lsls	r3, r2, #28
 8007fdc:	bf44      	itt	mi
 8007fde:	232b      	movmi	r3, #43	@ 0x2b
 8007fe0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007fe4:	f89a 3000 	ldrb.w	r3, [sl]
 8007fe8:	2b2a      	cmp	r3, #42	@ 0x2a
 8007fea:	d015      	beq.n	8008018 <_vfiprintf_r+0x120>
 8007fec:	9a07      	ldr	r2, [sp, #28]
 8007fee:	4654      	mov	r4, sl
 8007ff0:	2000      	movs	r0, #0
 8007ff2:	f04f 0c0a 	mov.w	ip, #10
 8007ff6:	4621      	mov	r1, r4
 8007ff8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ffc:	3b30      	subs	r3, #48	@ 0x30
 8007ffe:	2b09      	cmp	r3, #9
 8008000:	d94b      	bls.n	800809a <_vfiprintf_r+0x1a2>
 8008002:	b1b0      	cbz	r0, 8008032 <_vfiprintf_r+0x13a>
 8008004:	9207      	str	r2, [sp, #28]
 8008006:	e014      	b.n	8008032 <_vfiprintf_r+0x13a>
 8008008:	eba0 0308 	sub.w	r3, r0, r8
 800800c:	fa09 f303 	lsl.w	r3, r9, r3
 8008010:	4313      	orrs	r3, r2
 8008012:	9304      	str	r3, [sp, #16]
 8008014:	46a2      	mov	sl, r4
 8008016:	e7d2      	b.n	8007fbe <_vfiprintf_r+0xc6>
 8008018:	9b03      	ldr	r3, [sp, #12]
 800801a:	1d19      	adds	r1, r3, #4
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	9103      	str	r1, [sp, #12]
 8008020:	2b00      	cmp	r3, #0
 8008022:	bfbb      	ittet	lt
 8008024:	425b      	neglt	r3, r3
 8008026:	f042 0202 	orrlt.w	r2, r2, #2
 800802a:	9307      	strge	r3, [sp, #28]
 800802c:	9307      	strlt	r3, [sp, #28]
 800802e:	bfb8      	it	lt
 8008030:	9204      	strlt	r2, [sp, #16]
 8008032:	7823      	ldrb	r3, [r4, #0]
 8008034:	2b2e      	cmp	r3, #46	@ 0x2e
 8008036:	d10a      	bne.n	800804e <_vfiprintf_r+0x156>
 8008038:	7863      	ldrb	r3, [r4, #1]
 800803a:	2b2a      	cmp	r3, #42	@ 0x2a
 800803c:	d132      	bne.n	80080a4 <_vfiprintf_r+0x1ac>
 800803e:	9b03      	ldr	r3, [sp, #12]
 8008040:	1d1a      	adds	r2, r3, #4
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	9203      	str	r2, [sp, #12]
 8008046:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800804a:	3402      	adds	r4, #2
 800804c:	9305      	str	r3, [sp, #20]
 800804e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008124 <_vfiprintf_r+0x22c>
 8008052:	7821      	ldrb	r1, [r4, #0]
 8008054:	2203      	movs	r2, #3
 8008056:	4650      	mov	r0, sl
 8008058:	f7f8 f8c2 	bl	80001e0 <memchr>
 800805c:	b138      	cbz	r0, 800806e <_vfiprintf_r+0x176>
 800805e:	9b04      	ldr	r3, [sp, #16]
 8008060:	eba0 000a 	sub.w	r0, r0, sl
 8008064:	2240      	movs	r2, #64	@ 0x40
 8008066:	4082      	lsls	r2, r0
 8008068:	4313      	orrs	r3, r2
 800806a:	3401      	adds	r4, #1
 800806c:	9304      	str	r3, [sp, #16]
 800806e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008072:	4829      	ldr	r0, [pc, #164]	@ (8008118 <_vfiprintf_r+0x220>)
 8008074:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008078:	2206      	movs	r2, #6
 800807a:	f7f8 f8b1 	bl	80001e0 <memchr>
 800807e:	2800      	cmp	r0, #0
 8008080:	d03f      	beq.n	8008102 <_vfiprintf_r+0x20a>
 8008082:	4b26      	ldr	r3, [pc, #152]	@ (800811c <_vfiprintf_r+0x224>)
 8008084:	bb1b      	cbnz	r3, 80080ce <_vfiprintf_r+0x1d6>
 8008086:	9b03      	ldr	r3, [sp, #12]
 8008088:	3307      	adds	r3, #7
 800808a:	f023 0307 	bic.w	r3, r3, #7
 800808e:	3308      	adds	r3, #8
 8008090:	9303      	str	r3, [sp, #12]
 8008092:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008094:	443b      	add	r3, r7
 8008096:	9309      	str	r3, [sp, #36]	@ 0x24
 8008098:	e76a      	b.n	8007f70 <_vfiprintf_r+0x78>
 800809a:	fb0c 3202 	mla	r2, ip, r2, r3
 800809e:	460c      	mov	r4, r1
 80080a0:	2001      	movs	r0, #1
 80080a2:	e7a8      	b.n	8007ff6 <_vfiprintf_r+0xfe>
 80080a4:	2300      	movs	r3, #0
 80080a6:	3401      	adds	r4, #1
 80080a8:	9305      	str	r3, [sp, #20]
 80080aa:	4619      	mov	r1, r3
 80080ac:	f04f 0c0a 	mov.w	ip, #10
 80080b0:	4620      	mov	r0, r4
 80080b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080b6:	3a30      	subs	r2, #48	@ 0x30
 80080b8:	2a09      	cmp	r2, #9
 80080ba:	d903      	bls.n	80080c4 <_vfiprintf_r+0x1cc>
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d0c6      	beq.n	800804e <_vfiprintf_r+0x156>
 80080c0:	9105      	str	r1, [sp, #20]
 80080c2:	e7c4      	b.n	800804e <_vfiprintf_r+0x156>
 80080c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80080c8:	4604      	mov	r4, r0
 80080ca:	2301      	movs	r3, #1
 80080cc:	e7f0      	b.n	80080b0 <_vfiprintf_r+0x1b8>
 80080ce:	ab03      	add	r3, sp, #12
 80080d0:	9300      	str	r3, [sp, #0]
 80080d2:	462a      	mov	r2, r5
 80080d4:	4b12      	ldr	r3, [pc, #72]	@ (8008120 <_vfiprintf_r+0x228>)
 80080d6:	a904      	add	r1, sp, #16
 80080d8:	4630      	mov	r0, r6
 80080da:	f7fd fcb9 	bl	8005a50 <_printf_float>
 80080de:	4607      	mov	r7, r0
 80080e0:	1c78      	adds	r0, r7, #1
 80080e2:	d1d6      	bne.n	8008092 <_vfiprintf_r+0x19a>
 80080e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80080e6:	07d9      	lsls	r1, r3, #31
 80080e8:	d405      	bmi.n	80080f6 <_vfiprintf_r+0x1fe>
 80080ea:	89ab      	ldrh	r3, [r5, #12]
 80080ec:	059a      	lsls	r2, r3, #22
 80080ee:	d402      	bmi.n	80080f6 <_vfiprintf_r+0x1fe>
 80080f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80080f2:	f7fe faaf 	bl	8006654 <__retarget_lock_release_recursive>
 80080f6:	89ab      	ldrh	r3, [r5, #12]
 80080f8:	065b      	lsls	r3, r3, #25
 80080fa:	f53f af1f 	bmi.w	8007f3c <_vfiprintf_r+0x44>
 80080fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008100:	e71e      	b.n	8007f40 <_vfiprintf_r+0x48>
 8008102:	ab03      	add	r3, sp, #12
 8008104:	9300      	str	r3, [sp, #0]
 8008106:	462a      	mov	r2, r5
 8008108:	4b05      	ldr	r3, [pc, #20]	@ (8008120 <_vfiprintf_r+0x228>)
 800810a:	a904      	add	r1, sp, #16
 800810c:	4630      	mov	r0, r6
 800810e:	f7fd ff37 	bl	8005f80 <_printf_i>
 8008112:	e7e4      	b.n	80080de <_vfiprintf_r+0x1e6>
 8008114:	080089b0 	.word	0x080089b0
 8008118:	080089ba 	.word	0x080089ba
 800811c:	08005a51 	.word	0x08005a51
 8008120:	08007ed3 	.word	0x08007ed3
 8008124:	080089b6 	.word	0x080089b6

08008128 <__sflush_r>:
 8008128:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800812c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008130:	0716      	lsls	r6, r2, #28
 8008132:	4605      	mov	r5, r0
 8008134:	460c      	mov	r4, r1
 8008136:	d454      	bmi.n	80081e2 <__sflush_r+0xba>
 8008138:	684b      	ldr	r3, [r1, #4]
 800813a:	2b00      	cmp	r3, #0
 800813c:	dc02      	bgt.n	8008144 <__sflush_r+0x1c>
 800813e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008140:	2b00      	cmp	r3, #0
 8008142:	dd48      	ble.n	80081d6 <__sflush_r+0xae>
 8008144:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008146:	2e00      	cmp	r6, #0
 8008148:	d045      	beq.n	80081d6 <__sflush_r+0xae>
 800814a:	2300      	movs	r3, #0
 800814c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008150:	682f      	ldr	r7, [r5, #0]
 8008152:	6a21      	ldr	r1, [r4, #32]
 8008154:	602b      	str	r3, [r5, #0]
 8008156:	d030      	beq.n	80081ba <__sflush_r+0x92>
 8008158:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800815a:	89a3      	ldrh	r3, [r4, #12]
 800815c:	0759      	lsls	r1, r3, #29
 800815e:	d505      	bpl.n	800816c <__sflush_r+0x44>
 8008160:	6863      	ldr	r3, [r4, #4]
 8008162:	1ad2      	subs	r2, r2, r3
 8008164:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008166:	b10b      	cbz	r3, 800816c <__sflush_r+0x44>
 8008168:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800816a:	1ad2      	subs	r2, r2, r3
 800816c:	2300      	movs	r3, #0
 800816e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008170:	6a21      	ldr	r1, [r4, #32]
 8008172:	4628      	mov	r0, r5
 8008174:	47b0      	blx	r6
 8008176:	1c43      	adds	r3, r0, #1
 8008178:	89a3      	ldrh	r3, [r4, #12]
 800817a:	d106      	bne.n	800818a <__sflush_r+0x62>
 800817c:	6829      	ldr	r1, [r5, #0]
 800817e:	291d      	cmp	r1, #29
 8008180:	d82b      	bhi.n	80081da <__sflush_r+0xb2>
 8008182:	4a2a      	ldr	r2, [pc, #168]	@ (800822c <__sflush_r+0x104>)
 8008184:	410a      	asrs	r2, r1
 8008186:	07d6      	lsls	r6, r2, #31
 8008188:	d427      	bmi.n	80081da <__sflush_r+0xb2>
 800818a:	2200      	movs	r2, #0
 800818c:	6062      	str	r2, [r4, #4]
 800818e:	04d9      	lsls	r1, r3, #19
 8008190:	6922      	ldr	r2, [r4, #16]
 8008192:	6022      	str	r2, [r4, #0]
 8008194:	d504      	bpl.n	80081a0 <__sflush_r+0x78>
 8008196:	1c42      	adds	r2, r0, #1
 8008198:	d101      	bne.n	800819e <__sflush_r+0x76>
 800819a:	682b      	ldr	r3, [r5, #0]
 800819c:	b903      	cbnz	r3, 80081a0 <__sflush_r+0x78>
 800819e:	6560      	str	r0, [r4, #84]	@ 0x54
 80081a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80081a2:	602f      	str	r7, [r5, #0]
 80081a4:	b1b9      	cbz	r1, 80081d6 <__sflush_r+0xae>
 80081a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80081aa:	4299      	cmp	r1, r3
 80081ac:	d002      	beq.n	80081b4 <__sflush_r+0x8c>
 80081ae:	4628      	mov	r0, r5
 80081b0:	f7ff f89e 	bl	80072f0 <_free_r>
 80081b4:	2300      	movs	r3, #0
 80081b6:	6363      	str	r3, [r4, #52]	@ 0x34
 80081b8:	e00d      	b.n	80081d6 <__sflush_r+0xae>
 80081ba:	2301      	movs	r3, #1
 80081bc:	4628      	mov	r0, r5
 80081be:	47b0      	blx	r6
 80081c0:	4602      	mov	r2, r0
 80081c2:	1c50      	adds	r0, r2, #1
 80081c4:	d1c9      	bne.n	800815a <__sflush_r+0x32>
 80081c6:	682b      	ldr	r3, [r5, #0]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d0c6      	beq.n	800815a <__sflush_r+0x32>
 80081cc:	2b1d      	cmp	r3, #29
 80081ce:	d001      	beq.n	80081d4 <__sflush_r+0xac>
 80081d0:	2b16      	cmp	r3, #22
 80081d2:	d11e      	bne.n	8008212 <__sflush_r+0xea>
 80081d4:	602f      	str	r7, [r5, #0]
 80081d6:	2000      	movs	r0, #0
 80081d8:	e022      	b.n	8008220 <__sflush_r+0xf8>
 80081da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081de:	b21b      	sxth	r3, r3
 80081e0:	e01b      	b.n	800821a <__sflush_r+0xf2>
 80081e2:	690f      	ldr	r7, [r1, #16]
 80081e4:	2f00      	cmp	r7, #0
 80081e6:	d0f6      	beq.n	80081d6 <__sflush_r+0xae>
 80081e8:	0793      	lsls	r3, r2, #30
 80081ea:	680e      	ldr	r6, [r1, #0]
 80081ec:	bf08      	it	eq
 80081ee:	694b      	ldreq	r3, [r1, #20]
 80081f0:	600f      	str	r7, [r1, #0]
 80081f2:	bf18      	it	ne
 80081f4:	2300      	movne	r3, #0
 80081f6:	eba6 0807 	sub.w	r8, r6, r7
 80081fa:	608b      	str	r3, [r1, #8]
 80081fc:	f1b8 0f00 	cmp.w	r8, #0
 8008200:	dde9      	ble.n	80081d6 <__sflush_r+0xae>
 8008202:	6a21      	ldr	r1, [r4, #32]
 8008204:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008206:	4643      	mov	r3, r8
 8008208:	463a      	mov	r2, r7
 800820a:	4628      	mov	r0, r5
 800820c:	47b0      	blx	r6
 800820e:	2800      	cmp	r0, #0
 8008210:	dc08      	bgt.n	8008224 <__sflush_r+0xfc>
 8008212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008216:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800821a:	81a3      	strh	r3, [r4, #12]
 800821c:	f04f 30ff 	mov.w	r0, #4294967295
 8008220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008224:	4407      	add	r7, r0
 8008226:	eba8 0800 	sub.w	r8, r8, r0
 800822a:	e7e7      	b.n	80081fc <__sflush_r+0xd4>
 800822c:	dfbffffe 	.word	0xdfbffffe

08008230 <_fflush_r>:
 8008230:	b538      	push	{r3, r4, r5, lr}
 8008232:	690b      	ldr	r3, [r1, #16]
 8008234:	4605      	mov	r5, r0
 8008236:	460c      	mov	r4, r1
 8008238:	b913      	cbnz	r3, 8008240 <_fflush_r+0x10>
 800823a:	2500      	movs	r5, #0
 800823c:	4628      	mov	r0, r5
 800823e:	bd38      	pop	{r3, r4, r5, pc}
 8008240:	b118      	cbz	r0, 800824a <_fflush_r+0x1a>
 8008242:	6a03      	ldr	r3, [r0, #32]
 8008244:	b90b      	cbnz	r3, 800824a <_fflush_r+0x1a>
 8008246:	f7fe f847 	bl	80062d8 <__sinit>
 800824a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d0f3      	beq.n	800823a <_fflush_r+0xa>
 8008252:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008254:	07d0      	lsls	r0, r2, #31
 8008256:	d404      	bmi.n	8008262 <_fflush_r+0x32>
 8008258:	0599      	lsls	r1, r3, #22
 800825a:	d402      	bmi.n	8008262 <_fflush_r+0x32>
 800825c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800825e:	f7fe f9f8 	bl	8006652 <__retarget_lock_acquire_recursive>
 8008262:	4628      	mov	r0, r5
 8008264:	4621      	mov	r1, r4
 8008266:	f7ff ff5f 	bl	8008128 <__sflush_r>
 800826a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800826c:	07da      	lsls	r2, r3, #31
 800826e:	4605      	mov	r5, r0
 8008270:	d4e4      	bmi.n	800823c <_fflush_r+0xc>
 8008272:	89a3      	ldrh	r3, [r4, #12]
 8008274:	059b      	lsls	r3, r3, #22
 8008276:	d4e1      	bmi.n	800823c <_fflush_r+0xc>
 8008278:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800827a:	f7fe f9eb 	bl	8006654 <__retarget_lock_release_recursive>
 800827e:	e7dd      	b.n	800823c <_fflush_r+0xc>

08008280 <__swhatbuf_r>:
 8008280:	b570      	push	{r4, r5, r6, lr}
 8008282:	460c      	mov	r4, r1
 8008284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008288:	2900      	cmp	r1, #0
 800828a:	b096      	sub	sp, #88	@ 0x58
 800828c:	4615      	mov	r5, r2
 800828e:	461e      	mov	r6, r3
 8008290:	da0d      	bge.n	80082ae <__swhatbuf_r+0x2e>
 8008292:	89a3      	ldrh	r3, [r4, #12]
 8008294:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008298:	f04f 0100 	mov.w	r1, #0
 800829c:	bf14      	ite	ne
 800829e:	2340      	movne	r3, #64	@ 0x40
 80082a0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80082a4:	2000      	movs	r0, #0
 80082a6:	6031      	str	r1, [r6, #0]
 80082a8:	602b      	str	r3, [r5, #0]
 80082aa:	b016      	add	sp, #88	@ 0x58
 80082ac:	bd70      	pop	{r4, r5, r6, pc}
 80082ae:	466a      	mov	r2, sp
 80082b0:	f000 f862 	bl	8008378 <_fstat_r>
 80082b4:	2800      	cmp	r0, #0
 80082b6:	dbec      	blt.n	8008292 <__swhatbuf_r+0x12>
 80082b8:	9901      	ldr	r1, [sp, #4]
 80082ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80082be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80082c2:	4259      	negs	r1, r3
 80082c4:	4159      	adcs	r1, r3
 80082c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80082ca:	e7eb      	b.n	80082a4 <__swhatbuf_r+0x24>

080082cc <__smakebuf_r>:
 80082cc:	898b      	ldrh	r3, [r1, #12]
 80082ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082d0:	079d      	lsls	r5, r3, #30
 80082d2:	4606      	mov	r6, r0
 80082d4:	460c      	mov	r4, r1
 80082d6:	d507      	bpl.n	80082e8 <__smakebuf_r+0x1c>
 80082d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80082dc:	6023      	str	r3, [r4, #0]
 80082de:	6123      	str	r3, [r4, #16]
 80082e0:	2301      	movs	r3, #1
 80082e2:	6163      	str	r3, [r4, #20]
 80082e4:	b003      	add	sp, #12
 80082e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082e8:	ab01      	add	r3, sp, #4
 80082ea:	466a      	mov	r2, sp
 80082ec:	f7ff ffc8 	bl	8008280 <__swhatbuf_r>
 80082f0:	9f00      	ldr	r7, [sp, #0]
 80082f2:	4605      	mov	r5, r0
 80082f4:	4639      	mov	r1, r7
 80082f6:	4630      	mov	r0, r6
 80082f8:	f7ff f86e 	bl	80073d8 <_malloc_r>
 80082fc:	b948      	cbnz	r0, 8008312 <__smakebuf_r+0x46>
 80082fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008302:	059a      	lsls	r2, r3, #22
 8008304:	d4ee      	bmi.n	80082e4 <__smakebuf_r+0x18>
 8008306:	f023 0303 	bic.w	r3, r3, #3
 800830a:	f043 0302 	orr.w	r3, r3, #2
 800830e:	81a3      	strh	r3, [r4, #12]
 8008310:	e7e2      	b.n	80082d8 <__smakebuf_r+0xc>
 8008312:	89a3      	ldrh	r3, [r4, #12]
 8008314:	6020      	str	r0, [r4, #0]
 8008316:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800831a:	81a3      	strh	r3, [r4, #12]
 800831c:	9b01      	ldr	r3, [sp, #4]
 800831e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008322:	b15b      	cbz	r3, 800833c <__smakebuf_r+0x70>
 8008324:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008328:	4630      	mov	r0, r6
 800832a:	f000 f837 	bl	800839c <_isatty_r>
 800832e:	b128      	cbz	r0, 800833c <__smakebuf_r+0x70>
 8008330:	89a3      	ldrh	r3, [r4, #12]
 8008332:	f023 0303 	bic.w	r3, r3, #3
 8008336:	f043 0301 	orr.w	r3, r3, #1
 800833a:	81a3      	strh	r3, [r4, #12]
 800833c:	89a3      	ldrh	r3, [r4, #12]
 800833e:	431d      	orrs	r5, r3
 8008340:	81a5      	strh	r5, [r4, #12]
 8008342:	e7cf      	b.n	80082e4 <__smakebuf_r+0x18>

08008344 <memmove>:
 8008344:	4288      	cmp	r0, r1
 8008346:	b510      	push	{r4, lr}
 8008348:	eb01 0402 	add.w	r4, r1, r2
 800834c:	d902      	bls.n	8008354 <memmove+0x10>
 800834e:	4284      	cmp	r4, r0
 8008350:	4623      	mov	r3, r4
 8008352:	d807      	bhi.n	8008364 <memmove+0x20>
 8008354:	1e43      	subs	r3, r0, #1
 8008356:	42a1      	cmp	r1, r4
 8008358:	d008      	beq.n	800836c <memmove+0x28>
 800835a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800835e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008362:	e7f8      	b.n	8008356 <memmove+0x12>
 8008364:	4402      	add	r2, r0
 8008366:	4601      	mov	r1, r0
 8008368:	428a      	cmp	r2, r1
 800836a:	d100      	bne.n	800836e <memmove+0x2a>
 800836c:	bd10      	pop	{r4, pc}
 800836e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008372:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008376:	e7f7      	b.n	8008368 <memmove+0x24>

08008378 <_fstat_r>:
 8008378:	b538      	push	{r3, r4, r5, lr}
 800837a:	4d07      	ldr	r5, [pc, #28]	@ (8008398 <_fstat_r+0x20>)
 800837c:	2300      	movs	r3, #0
 800837e:	4604      	mov	r4, r0
 8008380:	4608      	mov	r0, r1
 8008382:	4611      	mov	r1, r2
 8008384:	602b      	str	r3, [r5, #0]
 8008386:	f7f9 fc5b 	bl	8001c40 <_fstat>
 800838a:	1c43      	adds	r3, r0, #1
 800838c:	d102      	bne.n	8008394 <_fstat_r+0x1c>
 800838e:	682b      	ldr	r3, [r5, #0]
 8008390:	b103      	cbz	r3, 8008394 <_fstat_r+0x1c>
 8008392:	6023      	str	r3, [r4, #0]
 8008394:	bd38      	pop	{r3, r4, r5, pc}
 8008396:	bf00      	nop
 8008398:	200004a4 	.word	0x200004a4

0800839c <_isatty_r>:
 800839c:	b538      	push	{r3, r4, r5, lr}
 800839e:	4d06      	ldr	r5, [pc, #24]	@ (80083b8 <_isatty_r+0x1c>)
 80083a0:	2300      	movs	r3, #0
 80083a2:	4604      	mov	r4, r0
 80083a4:	4608      	mov	r0, r1
 80083a6:	602b      	str	r3, [r5, #0]
 80083a8:	f7f9 fc5a 	bl	8001c60 <_isatty>
 80083ac:	1c43      	adds	r3, r0, #1
 80083ae:	d102      	bne.n	80083b6 <_isatty_r+0x1a>
 80083b0:	682b      	ldr	r3, [r5, #0]
 80083b2:	b103      	cbz	r3, 80083b6 <_isatty_r+0x1a>
 80083b4:	6023      	str	r3, [r4, #0]
 80083b6:	bd38      	pop	{r3, r4, r5, pc}
 80083b8:	200004a4 	.word	0x200004a4

080083bc <_sbrk_r>:
 80083bc:	b538      	push	{r3, r4, r5, lr}
 80083be:	4d06      	ldr	r5, [pc, #24]	@ (80083d8 <_sbrk_r+0x1c>)
 80083c0:	2300      	movs	r3, #0
 80083c2:	4604      	mov	r4, r0
 80083c4:	4608      	mov	r0, r1
 80083c6:	602b      	str	r3, [r5, #0]
 80083c8:	f7f9 fc62 	bl	8001c90 <_sbrk>
 80083cc:	1c43      	adds	r3, r0, #1
 80083ce:	d102      	bne.n	80083d6 <_sbrk_r+0x1a>
 80083d0:	682b      	ldr	r3, [r5, #0]
 80083d2:	b103      	cbz	r3, 80083d6 <_sbrk_r+0x1a>
 80083d4:	6023      	str	r3, [r4, #0]
 80083d6:	bd38      	pop	{r3, r4, r5, pc}
 80083d8:	200004a4 	.word	0x200004a4

080083dc <memcpy>:
 80083dc:	440a      	add	r2, r1
 80083de:	4291      	cmp	r1, r2
 80083e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80083e4:	d100      	bne.n	80083e8 <memcpy+0xc>
 80083e6:	4770      	bx	lr
 80083e8:	b510      	push	{r4, lr}
 80083ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083f2:	4291      	cmp	r1, r2
 80083f4:	d1f9      	bne.n	80083ea <memcpy+0xe>
 80083f6:	bd10      	pop	{r4, pc}

080083f8 <__assert_func>:
 80083f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80083fa:	4614      	mov	r4, r2
 80083fc:	461a      	mov	r2, r3
 80083fe:	4b09      	ldr	r3, [pc, #36]	@ (8008424 <__assert_func+0x2c>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4605      	mov	r5, r0
 8008404:	68d8      	ldr	r0, [r3, #12]
 8008406:	b954      	cbnz	r4, 800841e <__assert_func+0x26>
 8008408:	4b07      	ldr	r3, [pc, #28]	@ (8008428 <__assert_func+0x30>)
 800840a:	461c      	mov	r4, r3
 800840c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008410:	9100      	str	r1, [sp, #0]
 8008412:	462b      	mov	r3, r5
 8008414:	4905      	ldr	r1, [pc, #20]	@ (800842c <__assert_func+0x34>)
 8008416:	f000 f86f 	bl	80084f8 <fiprintf>
 800841a:	f000 f87f 	bl	800851c <abort>
 800841e:	4b04      	ldr	r3, [pc, #16]	@ (8008430 <__assert_func+0x38>)
 8008420:	e7f4      	b.n	800840c <__assert_func+0x14>
 8008422:	bf00      	nop
 8008424:	2000001c 	.word	0x2000001c
 8008428:	08008a06 	.word	0x08008a06
 800842c:	080089d8 	.word	0x080089d8
 8008430:	080089cb 	.word	0x080089cb

08008434 <_calloc_r>:
 8008434:	b570      	push	{r4, r5, r6, lr}
 8008436:	fba1 5402 	umull	r5, r4, r1, r2
 800843a:	b93c      	cbnz	r4, 800844c <_calloc_r+0x18>
 800843c:	4629      	mov	r1, r5
 800843e:	f7fe ffcb 	bl	80073d8 <_malloc_r>
 8008442:	4606      	mov	r6, r0
 8008444:	b928      	cbnz	r0, 8008452 <_calloc_r+0x1e>
 8008446:	2600      	movs	r6, #0
 8008448:	4630      	mov	r0, r6
 800844a:	bd70      	pop	{r4, r5, r6, pc}
 800844c:	220c      	movs	r2, #12
 800844e:	6002      	str	r2, [r0, #0]
 8008450:	e7f9      	b.n	8008446 <_calloc_r+0x12>
 8008452:	462a      	mov	r2, r5
 8008454:	4621      	mov	r1, r4
 8008456:	f7fe f87f 	bl	8006558 <memset>
 800845a:	e7f5      	b.n	8008448 <_calloc_r+0x14>

0800845c <__ascii_mbtowc>:
 800845c:	b082      	sub	sp, #8
 800845e:	b901      	cbnz	r1, 8008462 <__ascii_mbtowc+0x6>
 8008460:	a901      	add	r1, sp, #4
 8008462:	b142      	cbz	r2, 8008476 <__ascii_mbtowc+0x1a>
 8008464:	b14b      	cbz	r3, 800847a <__ascii_mbtowc+0x1e>
 8008466:	7813      	ldrb	r3, [r2, #0]
 8008468:	600b      	str	r3, [r1, #0]
 800846a:	7812      	ldrb	r2, [r2, #0]
 800846c:	1e10      	subs	r0, r2, #0
 800846e:	bf18      	it	ne
 8008470:	2001      	movne	r0, #1
 8008472:	b002      	add	sp, #8
 8008474:	4770      	bx	lr
 8008476:	4610      	mov	r0, r2
 8008478:	e7fb      	b.n	8008472 <__ascii_mbtowc+0x16>
 800847a:	f06f 0001 	mvn.w	r0, #1
 800847e:	e7f8      	b.n	8008472 <__ascii_mbtowc+0x16>

08008480 <_realloc_r>:
 8008480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008484:	4680      	mov	r8, r0
 8008486:	4615      	mov	r5, r2
 8008488:	460c      	mov	r4, r1
 800848a:	b921      	cbnz	r1, 8008496 <_realloc_r+0x16>
 800848c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008490:	4611      	mov	r1, r2
 8008492:	f7fe bfa1 	b.w	80073d8 <_malloc_r>
 8008496:	b92a      	cbnz	r2, 80084a4 <_realloc_r+0x24>
 8008498:	f7fe ff2a 	bl	80072f0 <_free_r>
 800849c:	2400      	movs	r4, #0
 800849e:	4620      	mov	r0, r4
 80084a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084a4:	f000 f841 	bl	800852a <_malloc_usable_size_r>
 80084a8:	4285      	cmp	r5, r0
 80084aa:	4606      	mov	r6, r0
 80084ac:	d802      	bhi.n	80084b4 <_realloc_r+0x34>
 80084ae:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80084b2:	d8f4      	bhi.n	800849e <_realloc_r+0x1e>
 80084b4:	4629      	mov	r1, r5
 80084b6:	4640      	mov	r0, r8
 80084b8:	f7fe ff8e 	bl	80073d8 <_malloc_r>
 80084bc:	4607      	mov	r7, r0
 80084be:	2800      	cmp	r0, #0
 80084c0:	d0ec      	beq.n	800849c <_realloc_r+0x1c>
 80084c2:	42b5      	cmp	r5, r6
 80084c4:	462a      	mov	r2, r5
 80084c6:	4621      	mov	r1, r4
 80084c8:	bf28      	it	cs
 80084ca:	4632      	movcs	r2, r6
 80084cc:	f7ff ff86 	bl	80083dc <memcpy>
 80084d0:	4621      	mov	r1, r4
 80084d2:	4640      	mov	r0, r8
 80084d4:	f7fe ff0c 	bl	80072f0 <_free_r>
 80084d8:	463c      	mov	r4, r7
 80084da:	e7e0      	b.n	800849e <_realloc_r+0x1e>

080084dc <__ascii_wctomb>:
 80084dc:	4603      	mov	r3, r0
 80084de:	4608      	mov	r0, r1
 80084e0:	b141      	cbz	r1, 80084f4 <__ascii_wctomb+0x18>
 80084e2:	2aff      	cmp	r2, #255	@ 0xff
 80084e4:	d904      	bls.n	80084f0 <__ascii_wctomb+0x14>
 80084e6:	228a      	movs	r2, #138	@ 0x8a
 80084e8:	601a      	str	r2, [r3, #0]
 80084ea:	f04f 30ff 	mov.w	r0, #4294967295
 80084ee:	4770      	bx	lr
 80084f0:	700a      	strb	r2, [r1, #0]
 80084f2:	2001      	movs	r0, #1
 80084f4:	4770      	bx	lr
	...

080084f8 <fiprintf>:
 80084f8:	b40e      	push	{r1, r2, r3}
 80084fa:	b503      	push	{r0, r1, lr}
 80084fc:	4601      	mov	r1, r0
 80084fe:	ab03      	add	r3, sp, #12
 8008500:	4805      	ldr	r0, [pc, #20]	@ (8008518 <fiprintf+0x20>)
 8008502:	f853 2b04 	ldr.w	r2, [r3], #4
 8008506:	6800      	ldr	r0, [r0, #0]
 8008508:	9301      	str	r3, [sp, #4]
 800850a:	f7ff fcf5 	bl	8007ef8 <_vfiprintf_r>
 800850e:	b002      	add	sp, #8
 8008510:	f85d eb04 	ldr.w	lr, [sp], #4
 8008514:	b003      	add	sp, #12
 8008516:	4770      	bx	lr
 8008518:	2000001c 	.word	0x2000001c

0800851c <abort>:
 800851c:	b508      	push	{r3, lr}
 800851e:	2006      	movs	r0, #6
 8008520:	f000 f834 	bl	800858c <raise>
 8008524:	2001      	movs	r0, #1
 8008526:	f7f9 fb3b 	bl	8001ba0 <_exit>

0800852a <_malloc_usable_size_r>:
 800852a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800852e:	1f18      	subs	r0, r3, #4
 8008530:	2b00      	cmp	r3, #0
 8008532:	bfbc      	itt	lt
 8008534:	580b      	ldrlt	r3, [r1, r0]
 8008536:	18c0      	addlt	r0, r0, r3
 8008538:	4770      	bx	lr

0800853a <_raise_r>:
 800853a:	291f      	cmp	r1, #31
 800853c:	b538      	push	{r3, r4, r5, lr}
 800853e:	4605      	mov	r5, r0
 8008540:	460c      	mov	r4, r1
 8008542:	d904      	bls.n	800854e <_raise_r+0x14>
 8008544:	2316      	movs	r3, #22
 8008546:	6003      	str	r3, [r0, #0]
 8008548:	f04f 30ff 	mov.w	r0, #4294967295
 800854c:	bd38      	pop	{r3, r4, r5, pc}
 800854e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008550:	b112      	cbz	r2, 8008558 <_raise_r+0x1e>
 8008552:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008556:	b94b      	cbnz	r3, 800856c <_raise_r+0x32>
 8008558:	4628      	mov	r0, r5
 800855a:	f000 f831 	bl	80085c0 <_getpid_r>
 800855e:	4622      	mov	r2, r4
 8008560:	4601      	mov	r1, r0
 8008562:	4628      	mov	r0, r5
 8008564:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008568:	f000 b818 	b.w	800859c <_kill_r>
 800856c:	2b01      	cmp	r3, #1
 800856e:	d00a      	beq.n	8008586 <_raise_r+0x4c>
 8008570:	1c59      	adds	r1, r3, #1
 8008572:	d103      	bne.n	800857c <_raise_r+0x42>
 8008574:	2316      	movs	r3, #22
 8008576:	6003      	str	r3, [r0, #0]
 8008578:	2001      	movs	r0, #1
 800857a:	e7e7      	b.n	800854c <_raise_r+0x12>
 800857c:	2100      	movs	r1, #0
 800857e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008582:	4620      	mov	r0, r4
 8008584:	4798      	blx	r3
 8008586:	2000      	movs	r0, #0
 8008588:	e7e0      	b.n	800854c <_raise_r+0x12>
	...

0800858c <raise>:
 800858c:	4b02      	ldr	r3, [pc, #8]	@ (8008598 <raise+0xc>)
 800858e:	4601      	mov	r1, r0
 8008590:	6818      	ldr	r0, [r3, #0]
 8008592:	f7ff bfd2 	b.w	800853a <_raise_r>
 8008596:	bf00      	nop
 8008598:	2000001c 	.word	0x2000001c

0800859c <_kill_r>:
 800859c:	b538      	push	{r3, r4, r5, lr}
 800859e:	4d07      	ldr	r5, [pc, #28]	@ (80085bc <_kill_r+0x20>)
 80085a0:	2300      	movs	r3, #0
 80085a2:	4604      	mov	r4, r0
 80085a4:	4608      	mov	r0, r1
 80085a6:	4611      	mov	r1, r2
 80085a8:	602b      	str	r3, [r5, #0]
 80085aa:	f7f9 fae9 	bl	8001b80 <_kill>
 80085ae:	1c43      	adds	r3, r0, #1
 80085b0:	d102      	bne.n	80085b8 <_kill_r+0x1c>
 80085b2:	682b      	ldr	r3, [r5, #0]
 80085b4:	b103      	cbz	r3, 80085b8 <_kill_r+0x1c>
 80085b6:	6023      	str	r3, [r4, #0]
 80085b8:	bd38      	pop	{r3, r4, r5, pc}
 80085ba:	bf00      	nop
 80085bc:	200004a4 	.word	0x200004a4

080085c0 <_getpid_r>:
 80085c0:	f7f9 bad6 	b.w	8001b70 <_getpid>

080085c4 <_init>:
 80085c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085c6:	bf00      	nop
 80085c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ca:	bc08      	pop	{r3}
 80085cc:	469e      	mov	lr, r3
 80085ce:	4770      	bx	lr

080085d0 <_fini>:
 80085d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085d2:	bf00      	nop
 80085d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085d6:	bc08      	pop	{r3}
 80085d8:	469e      	mov	lr, r3
 80085da:	4770      	bx	lr
